// Code generated by go generate; DO NOT EDIT.
package protocol

import "encoding/json"
const WorkspaceDidChangeWorkspaceFoldersMethod = "workspace/didChangeWorkspaceFolders"

// The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
// folder configuration changes.
type WorkspaceDidChangeWorkspaceFoldersNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidChangeWorkspaceFoldersParams `json:"params,omitempty"`
}

func NewWorkspaceDidChangeWorkspaceFoldersNotification(id int, params DidChangeWorkspaceFoldersParams) WorkspaceDidChangeWorkspaceFoldersNotification {
	return WorkspaceDidChangeWorkspaceFoldersNotification{Jsonrpc: "2.0", Method: WorkspaceDidChangeWorkspaceFoldersMethod, Params: params }
}

// Marshal r into WorkspaceDidChangeWorkspaceFoldersNotification
func (m Message) WorkspaceDidChangeWorkspaceFolders() (v WorkspaceDidChangeWorkspaceFoldersNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WindowWorkDoneProgressCancelMethod = "window/workDoneProgress/cancel"

// The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
// initiated on the server side.
type WindowWorkDoneProgressCancelNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params WorkDoneProgressCancelParams `json:"params,omitempty"`
}

func NewWindowWorkDoneProgressCancelNotification(id int, params WorkDoneProgressCancelParams) WindowWorkDoneProgressCancelNotification {
	return WindowWorkDoneProgressCancelNotification{Jsonrpc: "2.0", Method: WindowWorkDoneProgressCancelMethod, Params: params }
}

// Marshal r into WindowWorkDoneProgressCancelNotification
func (m Message) WindowWorkDoneProgressCancel() (v WindowWorkDoneProgressCancelNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WorkspaceDidCreateFilesMethod = "workspace/didCreateFiles"

// The did create files notification is sent from the client to the server when
// files were created from within the client.
// 
// @since 3.16.0
type WorkspaceDidCreateFilesNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params CreateFilesParams `json:"params,omitempty"`
}

func NewWorkspaceDidCreateFilesNotification(id int, params CreateFilesParams) WorkspaceDidCreateFilesNotification {
	return WorkspaceDidCreateFilesNotification{Jsonrpc: "2.0", Method: WorkspaceDidCreateFilesMethod, Params: params }
}

// Marshal r into WorkspaceDidCreateFilesNotification
func (m Message) WorkspaceDidCreateFiles() (v WorkspaceDidCreateFilesNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WorkspaceDidRenameFilesMethod = "workspace/didRenameFiles"

// The did rename files notification is sent from the client to the server when
// files were renamed from within the client.
// 
// @since 3.16.0
type WorkspaceDidRenameFilesNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params RenameFilesParams `json:"params,omitempty"`
}

func NewWorkspaceDidRenameFilesNotification(id int, params RenameFilesParams) WorkspaceDidRenameFilesNotification {
	return WorkspaceDidRenameFilesNotification{Jsonrpc: "2.0", Method: WorkspaceDidRenameFilesMethod, Params: params }
}

// Marshal r into WorkspaceDidRenameFilesNotification
func (m Message) WorkspaceDidRenameFiles() (v WorkspaceDidRenameFilesNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WorkspaceDidDeleteFilesMethod = "workspace/didDeleteFiles"

// The will delete files request is sent from the client to the server before files are actually
// deleted as long as the deletion is triggered from within the client.
// 
// @since 3.16.0
type WorkspaceDidDeleteFilesNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DeleteFilesParams `json:"params,omitempty"`
}

func NewWorkspaceDidDeleteFilesNotification(id int, params DeleteFilesParams) WorkspaceDidDeleteFilesNotification {
	return WorkspaceDidDeleteFilesNotification{Jsonrpc: "2.0", Method: WorkspaceDidDeleteFilesMethod, Params: params }
}

// Marshal r into WorkspaceDidDeleteFilesNotification
func (m Message) WorkspaceDidDeleteFiles() (v WorkspaceDidDeleteFilesNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const NotebookDocumentDidOpenMethod = "notebookDocument/didOpen"

// A notification sent when a notebook opens.
// 
// @since 3.17.0
type NotebookDocumentDidOpenNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidOpenNotebookDocumentParams `json:"params,omitempty"`
}

func NewNotebookDocumentDidOpenNotification(id int, params DidOpenNotebookDocumentParams) NotebookDocumentDidOpenNotification {
	return NotebookDocumentDidOpenNotification{Jsonrpc: "2.0", Method: NotebookDocumentDidOpenMethod, Params: params }
}

// Marshal r into NotebookDocumentDidOpenNotification
func (m Message) NotebookDocumentDidOpen() (v NotebookDocumentDidOpenNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const NotebookDocumentDidChangeMethod = "notebookDocument/didChange"


type NotebookDocumentDidChangeNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidChangeNotebookDocumentParams `json:"params,omitempty"`
}

func NewNotebookDocumentDidChangeNotification(id int, params DidChangeNotebookDocumentParams) NotebookDocumentDidChangeNotification {
	return NotebookDocumentDidChangeNotification{Jsonrpc: "2.0", Method: NotebookDocumentDidChangeMethod, Params: params }
}

// Marshal r into NotebookDocumentDidChangeNotification
func (m Message) NotebookDocumentDidChange() (v NotebookDocumentDidChangeNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const NotebookDocumentDidSaveMethod = "notebookDocument/didSave"

// A notification sent when a notebook document is saved.
// 
// @since 3.17.0
type NotebookDocumentDidSaveNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidSaveNotebookDocumentParams `json:"params,omitempty"`
}

func NewNotebookDocumentDidSaveNotification(id int, params DidSaveNotebookDocumentParams) NotebookDocumentDidSaveNotification {
	return NotebookDocumentDidSaveNotification{Jsonrpc: "2.0", Method: NotebookDocumentDidSaveMethod, Params: params }
}

// Marshal r into NotebookDocumentDidSaveNotification
func (m Message) NotebookDocumentDidSave() (v NotebookDocumentDidSaveNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const NotebookDocumentDidCloseMethod = "notebookDocument/didClose"

// A notification sent when a notebook closes.
// 
// @since 3.17.0
type NotebookDocumentDidCloseNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidCloseNotebookDocumentParams `json:"params,omitempty"`
}

func NewNotebookDocumentDidCloseNotification(id int, params DidCloseNotebookDocumentParams) NotebookDocumentDidCloseNotification {
	return NotebookDocumentDidCloseNotification{Jsonrpc: "2.0", Method: NotebookDocumentDidCloseMethod, Params: params }
}

// Marshal r into NotebookDocumentDidCloseNotification
func (m Message) NotebookDocumentDidClose() (v NotebookDocumentDidCloseNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const InitializedMethod = "initialized"

// The initialized notification is sent from the client to the
// server after the client is fully initialized and the server
// is allowed to send requests from the server to the client.
type InitializedNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params InitializedParams `json:"params,omitempty"`
}

func NewInitializedNotification(id int, params InitializedParams) InitializedNotification {
	return InitializedNotification{Jsonrpc: "2.0", Method: InitializedMethod, Params: params }
}

// Marshal r into InitializedNotification
func (m Message) Initialized() (v InitializedNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const ExitMethod = "exit"

// The exit event is sent from the client to the server to
// ask the server to exit its process.
type ExitNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewExitNotification(id int, params any) ExitNotification {
	return ExitNotification{Jsonrpc: "2.0", Method: ExitMethod, Params: params }
}

// Marshal r into ExitNotification
func (m Message) Exit() (v ExitNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WorkspaceDidChangeConfigurationMethod = "workspace/didChangeConfiguration"

// The configuration change notification is sent from the client to the server
// when the client's configuration has changed. The notification contains
// the changed configuration as defined by the language client.
type WorkspaceDidChangeConfigurationNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidChangeConfigurationParams `json:"params,omitempty"`
}

func NewWorkspaceDidChangeConfigurationNotification(id int, params DidChangeConfigurationParams) WorkspaceDidChangeConfigurationNotification {
	return WorkspaceDidChangeConfigurationNotification{Jsonrpc: "2.0", Method: WorkspaceDidChangeConfigurationMethod, Params: params }
}

// Marshal r into WorkspaceDidChangeConfigurationNotification
func (m Message) WorkspaceDidChangeConfiguration() (v WorkspaceDidChangeConfigurationNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WindowShowMessageMethod = "window/showMessage"

// The show message notification is sent from a server to a client to ask
// the client to display a particular message in the user interface.
type WindowShowMessageNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params ShowMessageParams `json:"params,omitempty"`
}

func NewWindowShowMessageNotification(id int, params ShowMessageParams) WindowShowMessageNotification {
	return WindowShowMessageNotification{Jsonrpc: "2.0", Method: WindowShowMessageMethod, Params: params }
}

// Marshal r into WindowShowMessageNotification
func (m Message) WindowShowMessage() (v WindowShowMessageNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WindowLogMessageMethod = "window/logMessage"

// The log message notification is sent from the server to the client to ask
// the client to log a particular message.
type WindowLogMessageNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params LogMessageParams `json:"params,omitempty"`
}

func NewWindowLogMessageNotification(id int, params LogMessageParams) WindowLogMessageNotification {
	return WindowLogMessageNotification{Jsonrpc: "2.0", Method: WindowLogMessageMethod, Params: params }
}

// Marshal r into WindowLogMessageNotification
func (m Message) WindowLogMessage() (v WindowLogMessageNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const TelemetryEventMethod = "telemetry/event"

// The telemetry event notification is sent from the server to the client to ask
// the client to log telemetry data.
type TelemetryEventNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params LSPAny `json:"params,omitempty"`
}

func NewTelemetryEventNotification(id int, params LSPAny) TelemetryEventNotification {
	return TelemetryEventNotification{Jsonrpc: "2.0", Method: TelemetryEventMethod, Params: params }
}

// Marshal r into TelemetryEventNotification
func (m Message) TelemetryEvent() (v TelemetryEventNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const TextDocumentDidOpenMethod = "textDocument/didOpen"

// The document open notification is sent from the client to the server to signal
// newly opened text documents. The document's truth is now managed by the client
// and the server must not try to read the document's truth using the document's
// uri. Open in this sense means it is managed by the client. It doesn't necessarily
// mean that its content is presented in an editor. An open notification must not
// be sent more than once without a corresponding close notification send before.
// This means open and close notification must be balanced and the max open count
// is one.
type TextDocumentDidOpenNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidOpenTextDocumentParams `json:"params,omitempty"`
}

func NewTextDocumentDidOpenNotification(id int, params DidOpenTextDocumentParams) TextDocumentDidOpenNotification {
	return TextDocumentDidOpenNotification{Jsonrpc: "2.0", Method: TextDocumentDidOpenMethod, Params: params }
}

// Marshal r into TextDocumentDidOpenNotification
func (m Message) TextDocumentDidOpen() (v TextDocumentDidOpenNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const TextDocumentDidChangeMethod = "textDocument/didChange"

// The document change notification is sent from the client to the server to signal
// changes to a text document.
type TextDocumentDidChangeNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidChangeTextDocumentParams `json:"params,omitempty"`
}

func NewTextDocumentDidChangeNotification(id int, params DidChangeTextDocumentParams) TextDocumentDidChangeNotification {
	return TextDocumentDidChangeNotification{Jsonrpc: "2.0", Method: TextDocumentDidChangeMethod, Params: params }
}

// Marshal r into TextDocumentDidChangeNotification
func (m Message) TextDocumentDidChange() (v TextDocumentDidChangeNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const TextDocumentDidCloseMethod = "textDocument/didClose"

// The document close notification is sent from the client to the server when
// the document got closed in the client. The document's truth now exists where
// the document's uri points to (e.g. if the document's uri is a file uri the
// truth now exists on disk). As with the open notification the close notification
// is about managing the document's content. Receiving a close notification
// doesn't mean that the document was open in an editor before. A close
// notification requires a previous open notification to be sent.
type TextDocumentDidCloseNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidCloseTextDocumentParams `json:"params,omitempty"`
}

func NewTextDocumentDidCloseNotification(id int, params DidCloseTextDocumentParams) TextDocumentDidCloseNotification {
	return TextDocumentDidCloseNotification{Jsonrpc: "2.0", Method: TextDocumentDidCloseMethod, Params: params }
}

// Marshal r into TextDocumentDidCloseNotification
func (m Message) TextDocumentDidClose() (v TextDocumentDidCloseNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const TextDocumentDidSaveMethod = "textDocument/didSave"

// The document save notification is sent from the client to the server when
// the document got saved in the client.
type TextDocumentDidSaveNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidSaveTextDocumentParams `json:"params,omitempty"`
}

func NewTextDocumentDidSaveNotification(id int, params DidSaveTextDocumentParams) TextDocumentDidSaveNotification {
	return TextDocumentDidSaveNotification{Jsonrpc: "2.0", Method: TextDocumentDidSaveMethod, Params: params }
}

// Marshal r into TextDocumentDidSaveNotification
func (m Message) TextDocumentDidSave() (v TextDocumentDidSaveNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const TextDocumentWillSaveMethod = "textDocument/willSave"

// A document will save notification is sent from the client to the server before
// the document is actually saved.
type TextDocumentWillSaveNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params WillSaveTextDocumentParams `json:"params,omitempty"`
}

func NewTextDocumentWillSaveNotification(id int, params WillSaveTextDocumentParams) TextDocumentWillSaveNotification {
	return TextDocumentWillSaveNotification{Jsonrpc: "2.0", Method: TextDocumentWillSaveMethod, Params: params }
}

// Marshal r into TextDocumentWillSaveNotification
func (m Message) TextDocumentWillSave() (v TextDocumentWillSaveNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const WorkspaceDidChangeWatchedFilesMethod = "workspace/didChangeWatchedFiles"

// The watched files notification is sent from the client to the server when
// the client detects changes to file watched by the language client.
type WorkspaceDidChangeWatchedFilesNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params DidChangeWatchedFilesParams `json:"params,omitempty"`
}

func NewWorkspaceDidChangeWatchedFilesNotification(id int, params DidChangeWatchedFilesParams) WorkspaceDidChangeWatchedFilesNotification {
	return WorkspaceDidChangeWatchedFilesNotification{Jsonrpc: "2.0", Method: WorkspaceDidChangeWatchedFilesMethod, Params: params }
}

// Marshal r into WorkspaceDidChangeWatchedFilesNotification
func (m Message) WorkspaceDidChangeWatchedFiles() (v WorkspaceDidChangeWatchedFilesNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const TextDocumentPublishDiagnosticsMethod = "textDocument/publishDiagnostics"

// Diagnostics notification are sent from the server to the client to signal
// results of validation runs.
type TextDocumentPublishDiagnosticsNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params PublishDiagnosticsParams `json:"params,omitempty"`
}

func NewTextDocumentPublishDiagnosticsNotification(id int, params PublishDiagnosticsParams) TextDocumentPublishDiagnosticsNotification {
	return TextDocumentPublishDiagnosticsNotification{Jsonrpc: "2.0", Method: TextDocumentPublishDiagnosticsMethod, Params: params }
}

// Marshal r into TextDocumentPublishDiagnosticsNotification
func (m Message) TextDocumentPublishDiagnostics() (v TextDocumentPublishDiagnosticsNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const SetTraceMethod = "$/setTrace"


type SetTraceNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params SetTraceParams `json:"params,omitempty"`
}

func NewSetTraceNotification(id int, params SetTraceParams) SetTraceNotification {
	return SetTraceNotification{Jsonrpc: "2.0", Method: SetTraceMethod, Params: params }
}

// Marshal r into SetTraceNotification
func (m Message) SetTrace() (v SetTraceNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const LogTraceMethod = "$/logTrace"


type LogTraceNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params LogTraceParams `json:"params,omitempty"`
}

func NewLogTraceNotification(id int, params LogTraceParams) LogTraceNotification {
	return LogTraceNotification{Jsonrpc: "2.0", Method: LogTraceMethod, Params: params }
}

// Marshal r into LogTraceNotification
func (m Message) LogTrace() (v LogTraceNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const CancelRequestMethod = "$/cancelRequest"


type CancelRequestNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params CancelParams `json:"params,omitempty"`
}

func NewCancelRequestNotification(id int, params CancelParams) CancelRequestNotification {
	return CancelRequestNotification{Jsonrpc: "2.0", Method: CancelRequestMethod, Params: params }
}

// Marshal r into CancelRequestNotification
func (m Message) CancelRequest() (v CancelRequestNotification) {
	json.Unmarshal(m.raw, &v)
	return
}

const ProgressMethod = "$/progress"


type ProgressNotification struct {
	Jsonrpc string `json:"jsonrpc"`
	Method string `json:"method"`
	Params ProgressParams `json:"params,omitempty"`
}

func NewProgressNotification(id int, params ProgressParams) ProgressNotification {
	return ProgressNotification{Jsonrpc: "2.0", Method: ProgressMethod, Params: params }
}

// Marshal r into ProgressNotification
func (m Message) Progress() (v ProgressNotification) {
	json.Unmarshal(m.raw, &v)
	return
}
