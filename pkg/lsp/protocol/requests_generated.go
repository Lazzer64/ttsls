// Code generated by go generate; DO NOT EDIT.
package protocol

import "encoding/json"


const TextDocumentImplementationMethod = "textDocument/implementation"

// A request to resolve the implementation locations of a symbol at a given text
// document position. The request's parameter is of type [TextDocumentPositionParams]
// (#TextDocumentPositionParams) the response is of type {@link Definition} or a
// Thenable that resolves to such.
type TextDocumentImplementationRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ImplementationParams `json:"params,omitempty"`
}

func NewTextDocumentImplementationRequest(id int, params ImplementationParams) TextDocumentImplementationRequest {
	return TextDocumentImplementationRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentImplementationMethod, Params: params }
}

// Marshal r into TextDocumentImplementationRequest
func (r Request) TextDocumentImplementation() (v TextDocumentImplementationRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentTypeDefinitionMethod = "textDocument/typeDefinition"

// A request to resolve the type definition locations of a symbol at a given text
// document position. The request's parameter is of type [TextDocumentPositionParams]
// (#TextDocumentPositionParams) the response is of type {@link Definition} or a
// Thenable that resolves to such.
type TextDocumentTypeDefinitionRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params TypeDefinitionParams `json:"params,omitempty"`
}

func NewTextDocumentTypeDefinitionRequest(id int, params TypeDefinitionParams) TextDocumentTypeDefinitionRequest {
	return TextDocumentTypeDefinitionRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentTypeDefinitionMethod, Params: params }
}

// Marshal r into TextDocumentTypeDefinitionRequest
func (r Request) TextDocumentTypeDefinition() (v TextDocumentTypeDefinitionRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceWorkspaceFoldersMethod = "workspace/workspaceFolders"

// The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
type WorkspaceWorkspaceFoldersRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewWorkspaceWorkspaceFoldersRequest(id int, params any) WorkspaceWorkspaceFoldersRequest {
	return WorkspaceWorkspaceFoldersRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceWorkspaceFoldersMethod, Params: params }
}

// Marshal r into WorkspaceWorkspaceFoldersRequest
func (r Request) WorkspaceWorkspaceFolders() (v WorkspaceWorkspaceFoldersRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceConfigurationMethod = "workspace/configuration"

// The 'workspace/configuration' request is sent from the server to the client to fetch a certain
// configuration setting.
// 
// This pull model replaces the old push model were the client signaled configuration change via an
// event. If the server still needs to react to configuration changes (since the server caches the
// result of `workspace/configuration` requests) the server should register for an empty configuration
// change event and empty the cache if such an event is received.
type WorkspaceConfigurationRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ConfigurationParams `json:"params,omitempty"`
}

func NewWorkspaceConfigurationRequest(id int, params ConfigurationParams) WorkspaceConfigurationRequest {
	return WorkspaceConfigurationRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceConfigurationMethod, Params: params }
}

// Marshal r into WorkspaceConfigurationRequest
func (r Request) WorkspaceConfiguration() (v WorkspaceConfigurationRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentDocumentColorMethod = "textDocument/documentColor"

// A request to list all color symbols found in a given text document. The request's
// parameter is of type {@link DocumentColorParams} the
// response is of type {@link ColorInformation ColorInformation[]} or a Thenable
// that resolves to such.
type TextDocumentDocumentColorRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentColorParams `json:"params,omitempty"`
}

func NewTextDocumentDocumentColorRequest(id int, params DocumentColorParams) TextDocumentDocumentColorRequest {
	return TextDocumentDocumentColorRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentDocumentColorMethod, Params: params }
}

// Marshal r into TextDocumentDocumentColorRequest
func (r Request) TextDocumentDocumentColor() (v TextDocumentDocumentColorRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentColorPresentationMethod = "textDocument/colorPresentation"

// A request to list all presentation for a color. The request's
// parameter is of type {@link ColorPresentationParams} the
// response is of type {@link ColorInformation ColorInformation[]} or a Thenable
// that resolves to such.
type TextDocumentColorPresentationRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ColorPresentationParams `json:"params,omitempty"`
}

func NewTextDocumentColorPresentationRequest(id int, params ColorPresentationParams) TextDocumentColorPresentationRequest {
	return TextDocumentColorPresentationRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentColorPresentationMethod, Params: params }
}

// Marshal r into TextDocumentColorPresentationRequest
func (r Request) TextDocumentColorPresentation() (v TextDocumentColorPresentationRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentFoldingRangeMethod = "textDocument/foldingRange"

// A request to provide folding ranges in a document. The request's
// parameter is of type {@link FoldingRangeParams}, the
// response is of type {@link FoldingRangeList} or a Thenable
// that resolves to such.
type TextDocumentFoldingRangeRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params FoldingRangeParams `json:"params,omitempty"`
}

func NewTextDocumentFoldingRangeRequest(id int, params FoldingRangeParams) TextDocumentFoldingRangeRequest {
	return TextDocumentFoldingRangeRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentFoldingRangeMethod, Params: params }
}

// Marshal r into TextDocumentFoldingRangeRequest
func (r Request) TextDocumentFoldingRange() (v TextDocumentFoldingRangeRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentDeclarationMethod = "textDocument/declaration"

// A request to resolve the type definition locations of a symbol at a given text
// document position. The request's parameter is of type [TextDocumentPositionParams]
// (#TextDocumentPositionParams) the response is of type {@link Declaration}
// or a typed array of {@link DeclarationLink} or a Thenable that resolves
// to such.
type TextDocumentDeclarationRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DeclarationParams `json:"params,omitempty"`
}

func NewTextDocumentDeclarationRequest(id int, params DeclarationParams) TextDocumentDeclarationRequest {
	return TextDocumentDeclarationRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentDeclarationMethod, Params: params }
}

// Marshal r into TextDocumentDeclarationRequest
func (r Request) TextDocumentDeclaration() (v TextDocumentDeclarationRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentSelectionRangeMethod = "textDocument/selectionRange"

// A request to provide selection ranges in a document. The request's
// parameter is of type {@link SelectionRangeParams}, the
// response is of type {@link SelectionRange SelectionRange[]} or a Thenable
// that resolves to such.
type TextDocumentSelectionRangeRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params SelectionRangeParams `json:"params,omitempty"`
}

func NewTextDocumentSelectionRangeRequest(id int, params SelectionRangeParams) TextDocumentSelectionRangeRequest {
	return TextDocumentSelectionRangeRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentSelectionRangeMethod, Params: params }
}

// Marshal r into TextDocumentSelectionRangeRequest
func (r Request) TextDocumentSelectionRange() (v TextDocumentSelectionRangeRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WindowWorkDoneProgressCreateMethod = "window/workDoneProgress/create"

// The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
// reporting from the server.
type WindowWorkDoneProgressCreateRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params WorkDoneProgressCreateParams `json:"params,omitempty"`
}

func NewWindowWorkDoneProgressCreateRequest(id int, params WorkDoneProgressCreateParams) WindowWorkDoneProgressCreateRequest {
	return WindowWorkDoneProgressCreateRequest{Jsonrpc: "2.0", Id: id, Method: WindowWorkDoneProgressCreateMethod, Params: params }
}

// Marshal r into WindowWorkDoneProgressCreateRequest
func (r Request) WindowWorkDoneProgressCreate() (v WindowWorkDoneProgressCreateRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentPrepareCallHierarchyMethod = "textDocument/prepareCallHierarchy"

// A request to result a `CallHierarchyItem` in a document at a given position.
// Can be used as an input to an incoming or outgoing call hierarchy.
// 
// @since 3.16.0
type TextDocumentPrepareCallHierarchyRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CallHierarchyPrepareParams `json:"params,omitempty"`
}

func NewTextDocumentPrepareCallHierarchyRequest(id int, params CallHierarchyPrepareParams) TextDocumentPrepareCallHierarchyRequest {
	return TextDocumentPrepareCallHierarchyRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentPrepareCallHierarchyMethod, Params: params }
}

// Marshal r into TextDocumentPrepareCallHierarchyRequest
func (r Request) TextDocumentPrepareCallHierarchy() (v TextDocumentPrepareCallHierarchyRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const CallHierarchyIncomingCallsMethod = "callHierarchy/incomingCalls"

// A request to resolve the incoming calls for a given `CallHierarchyItem`.
// 
// @since 3.16.0
type CallHierarchyIncomingCallsRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CallHierarchyIncomingCallsParams `json:"params,omitempty"`
}

func NewCallHierarchyIncomingCallsRequest(id int, params CallHierarchyIncomingCallsParams) CallHierarchyIncomingCallsRequest {
	return CallHierarchyIncomingCallsRequest{Jsonrpc: "2.0", Id: id, Method: CallHierarchyIncomingCallsMethod, Params: params }
}

// Marshal r into CallHierarchyIncomingCallsRequest
func (r Request) CallHierarchyIncomingCalls() (v CallHierarchyIncomingCallsRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const CallHierarchyOutgoingCallsMethod = "callHierarchy/outgoingCalls"

// A request to resolve the outgoing calls for a given `CallHierarchyItem`.
// 
// @since 3.16.0
type CallHierarchyOutgoingCallsRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CallHierarchyOutgoingCallsParams `json:"params,omitempty"`
}

func NewCallHierarchyOutgoingCallsRequest(id int, params CallHierarchyOutgoingCallsParams) CallHierarchyOutgoingCallsRequest {
	return CallHierarchyOutgoingCallsRequest{Jsonrpc: "2.0", Id: id, Method: CallHierarchyOutgoingCallsMethod, Params: params }
}

// Marshal r into CallHierarchyOutgoingCallsRequest
func (r Request) CallHierarchyOutgoingCalls() (v CallHierarchyOutgoingCallsRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentSemanticTokensFullMethod = "textDocument/semanticTokens/full"

// @since 3.16.0
type TextDocumentSemanticTokensFullRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params SemanticTokensParams `json:"params,omitempty"`
}

func NewTextDocumentSemanticTokensFullRequest(id int, params SemanticTokensParams) TextDocumentSemanticTokensFullRequest {
	return TextDocumentSemanticTokensFullRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentSemanticTokensFullMethod, Params: params }
}

// Marshal r into TextDocumentSemanticTokensFullRequest
func (r Request) TextDocumentSemanticTokensFull() (v TextDocumentSemanticTokensFullRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentSemanticTokensFullDeltaMethod = "textDocument/semanticTokens/full/delta"

// @since 3.16.0
type TextDocumentSemanticTokensFullDeltaRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params SemanticTokensDeltaParams `json:"params,omitempty"`
}

func NewTextDocumentSemanticTokensFullDeltaRequest(id int, params SemanticTokensDeltaParams) TextDocumentSemanticTokensFullDeltaRequest {
	return TextDocumentSemanticTokensFullDeltaRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentSemanticTokensFullDeltaMethod, Params: params }
}

// Marshal r into TextDocumentSemanticTokensFullDeltaRequest
func (r Request) TextDocumentSemanticTokensFullDelta() (v TextDocumentSemanticTokensFullDeltaRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentSemanticTokensRangeMethod = "textDocument/semanticTokens/range"

// @since 3.16.0
type TextDocumentSemanticTokensRangeRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params SemanticTokensRangeParams `json:"params,omitempty"`
}

func NewTextDocumentSemanticTokensRangeRequest(id int, params SemanticTokensRangeParams) TextDocumentSemanticTokensRangeRequest {
	return TextDocumentSemanticTokensRangeRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentSemanticTokensRangeMethod, Params: params }
}

// Marshal r into TextDocumentSemanticTokensRangeRequest
func (r Request) TextDocumentSemanticTokensRange() (v TextDocumentSemanticTokensRangeRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceSemanticTokensRefreshMethod = "workspace/semanticTokens/refresh"

// @since 3.16.0
type WorkspaceSemanticTokensRefreshRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewWorkspaceSemanticTokensRefreshRequest(id int, params any) WorkspaceSemanticTokensRefreshRequest {
	return WorkspaceSemanticTokensRefreshRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceSemanticTokensRefreshMethod, Params: params }
}

// Marshal r into WorkspaceSemanticTokensRefreshRequest
func (r Request) WorkspaceSemanticTokensRefresh() (v WorkspaceSemanticTokensRefreshRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WindowShowDocumentMethod = "window/showDocument"

// A request to show a document. This request might open an
// external program depending on the value of the URI to open.
// For example a request to open `https://code.visualstudio.com/`
// will very likely open the URI in a WEB browser.
// 
// @since 3.16.0
type WindowShowDocumentRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ShowDocumentParams `json:"params,omitempty"`
}

func NewWindowShowDocumentRequest(id int, params ShowDocumentParams) WindowShowDocumentRequest {
	return WindowShowDocumentRequest{Jsonrpc: "2.0", Id: id, Method: WindowShowDocumentMethod, Params: params }
}

// Marshal r into WindowShowDocumentRequest
func (r Request) WindowShowDocument() (v WindowShowDocumentRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentLinkedEditingRangeMethod = "textDocument/linkedEditingRange"

// A request to provide ranges that can be edited together.
// 
// @since 3.16.0
type TextDocumentLinkedEditingRangeRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params LinkedEditingRangeParams `json:"params,omitempty"`
}

func NewTextDocumentLinkedEditingRangeRequest(id int, params LinkedEditingRangeParams) TextDocumentLinkedEditingRangeRequest {
	return TextDocumentLinkedEditingRangeRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentLinkedEditingRangeMethod, Params: params }
}

// Marshal r into TextDocumentLinkedEditingRangeRequest
func (r Request) TextDocumentLinkedEditingRange() (v TextDocumentLinkedEditingRangeRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceWillCreateFilesMethod = "workspace/willCreateFiles"

// The will create files request is sent from the client to the server before files are actually
// created as long as the creation is triggered from within the client.
// 
// @since 3.16.0
type WorkspaceWillCreateFilesRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CreateFilesParams `json:"params,omitempty"`
}

func NewWorkspaceWillCreateFilesRequest(id int, params CreateFilesParams) WorkspaceWillCreateFilesRequest {
	return WorkspaceWillCreateFilesRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceWillCreateFilesMethod, Params: params }
}

// Marshal r into WorkspaceWillCreateFilesRequest
func (r Request) WorkspaceWillCreateFiles() (v WorkspaceWillCreateFilesRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceWillRenameFilesMethod = "workspace/willRenameFiles"

// The will rename files request is sent from the client to the server before files are actually
// renamed as long as the rename is triggered from within the client.
// 
// @since 3.16.0
type WorkspaceWillRenameFilesRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params RenameFilesParams `json:"params,omitempty"`
}

func NewWorkspaceWillRenameFilesRequest(id int, params RenameFilesParams) WorkspaceWillRenameFilesRequest {
	return WorkspaceWillRenameFilesRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceWillRenameFilesMethod, Params: params }
}

// Marshal r into WorkspaceWillRenameFilesRequest
func (r Request) WorkspaceWillRenameFiles() (v WorkspaceWillRenameFilesRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceWillDeleteFilesMethod = "workspace/willDeleteFiles"

// The did delete files notification is sent from the client to the server when
// files were deleted from within the client.
// 
// @since 3.16.0
type WorkspaceWillDeleteFilesRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DeleteFilesParams `json:"params,omitempty"`
}

func NewWorkspaceWillDeleteFilesRequest(id int, params DeleteFilesParams) WorkspaceWillDeleteFilesRequest {
	return WorkspaceWillDeleteFilesRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceWillDeleteFilesMethod, Params: params }
}

// Marshal r into WorkspaceWillDeleteFilesRequest
func (r Request) WorkspaceWillDeleteFiles() (v WorkspaceWillDeleteFilesRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentMonikerMethod = "textDocument/moniker"

// A request to get the moniker of a symbol at a given text document position.
// The request parameter is of type {@link TextDocumentPositionParams}.
// The response is of type {@link Moniker Moniker[]} or `null`.
type TextDocumentMonikerRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params MonikerParams `json:"params,omitempty"`
}

func NewTextDocumentMonikerRequest(id int, params MonikerParams) TextDocumentMonikerRequest {
	return TextDocumentMonikerRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentMonikerMethod, Params: params }
}

// Marshal r into TextDocumentMonikerRequest
func (r Request) TextDocumentMoniker() (v TextDocumentMonikerRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentPrepareTypeHierarchyMethod = "textDocument/prepareTypeHierarchy"

// A request to result a `TypeHierarchyItem` in a document at a given position.
// Can be used as an input to a subtypes or supertypes type hierarchy.
// 
// @since 3.17.0
type TextDocumentPrepareTypeHierarchyRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params TypeHierarchyPrepareParams `json:"params,omitempty"`
}

func NewTextDocumentPrepareTypeHierarchyRequest(id int, params TypeHierarchyPrepareParams) TextDocumentPrepareTypeHierarchyRequest {
	return TextDocumentPrepareTypeHierarchyRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentPrepareTypeHierarchyMethod, Params: params }
}

// Marshal r into TextDocumentPrepareTypeHierarchyRequest
func (r Request) TextDocumentPrepareTypeHierarchy() (v TextDocumentPrepareTypeHierarchyRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TypeHierarchySupertypesMethod = "typeHierarchy/supertypes"

// A request to resolve the supertypes for a given `TypeHierarchyItem`.
// 
// @since 3.17.0
type TypeHierarchySupertypesRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params TypeHierarchySupertypesParams `json:"params,omitempty"`
}

func NewTypeHierarchySupertypesRequest(id int, params TypeHierarchySupertypesParams) TypeHierarchySupertypesRequest {
	return TypeHierarchySupertypesRequest{Jsonrpc: "2.0", Id: id, Method: TypeHierarchySupertypesMethod, Params: params }
}

// Marshal r into TypeHierarchySupertypesRequest
func (r Request) TypeHierarchySupertypes() (v TypeHierarchySupertypesRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TypeHierarchySubtypesMethod = "typeHierarchy/subtypes"

// A request to resolve the subtypes for a given `TypeHierarchyItem`.
// 
// @since 3.17.0
type TypeHierarchySubtypesRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params TypeHierarchySubtypesParams `json:"params,omitempty"`
}

func NewTypeHierarchySubtypesRequest(id int, params TypeHierarchySubtypesParams) TypeHierarchySubtypesRequest {
	return TypeHierarchySubtypesRequest{Jsonrpc: "2.0", Id: id, Method: TypeHierarchySubtypesMethod, Params: params }
}

// Marshal r into TypeHierarchySubtypesRequest
func (r Request) TypeHierarchySubtypes() (v TypeHierarchySubtypesRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentInlineValueMethod = "textDocument/inlineValue"

// A request to provide inline values in a document. The request's parameter is of
// type {@link InlineValueParams}, the response is of type
// {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
// 
// @since 3.17.0
type TextDocumentInlineValueRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params InlineValueParams `json:"params,omitempty"`
}

func NewTextDocumentInlineValueRequest(id int, params InlineValueParams) TextDocumentInlineValueRequest {
	return TextDocumentInlineValueRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentInlineValueMethod, Params: params }
}

// Marshal r into TextDocumentInlineValueRequest
func (r Request) TextDocumentInlineValue() (v TextDocumentInlineValueRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceInlineValueRefreshMethod = "workspace/inlineValue/refresh"

// @since 3.17.0
type WorkspaceInlineValueRefreshRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewWorkspaceInlineValueRefreshRequest(id int, params any) WorkspaceInlineValueRefreshRequest {
	return WorkspaceInlineValueRefreshRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceInlineValueRefreshMethod, Params: params }
}

// Marshal r into WorkspaceInlineValueRefreshRequest
func (r Request) WorkspaceInlineValueRefresh() (v WorkspaceInlineValueRefreshRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentInlayHintMethod = "textDocument/inlayHint"

// A request to provide inlay hints in a document. The request's parameter is of
// type {@link InlayHintsParams}, the response is of type
// {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
// 
// @since 3.17.0
type TextDocumentInlayHintRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params InlayHintParams `json:"params,omitempty"`
}

func NewTextDocumentInlayHintRequest(id int, params InlayHintParams) TextDocumentInlayHintRequest {
	return TextDocumentInlayHintRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentInlayHintMethod, Params: params }
}

// Marshal r into TextDocumentInlayHintRequest
func (r Request) TextDocumentInlayHint() (v TextDocumentInlayHintRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const InlayHintResolveMethod = "inlayHint/resolve"

// A request to resolve additional properties for an inlay hint.
// The request's parameter is of type {@link InlayHint}, the response is
// of type {@link InlayHint} or a Thenable that resolves to such.
// 
// @since 3.17.0
type InlayHintResolveRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params InlayHint `json:"params,omitempty"`
}

func NewInlayHintResolveRequest(id int, params InlayHint) InlayHintResolveRequest {
	return InlayHintResolveRequest{Jsonrpc: "2.0", Id: id, Method: InlayHintResolveMethod, Params: params }
}

// Marshal r into InlayHintResolveRequest
func (r Request) InlayHintResolve() (v InlayHintResolveRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceInlayHintRefreshMethod = "workspace/inlayHint/refresh"

// @since 3.17.0
type WorkspaceInlayHintRefreshRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewWorkspaceInlayHintRefreshRequest(id int, params any) WorkspaceInlayHintRefreshRequest {
	return WorkspaceInlayHintRefreshRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceInlayHintRefreshMethod, Params: params }
}

// Marshal r into WorkspaceInlayHintRefreshRequest
func (r Request) WorkspaceInlayHintRefresh() (v WorkspaceInlayHintRefreshRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentDiagnosticMethod = "textDocument/diagnostic"

// The document diagnostic request definition.
// 
// @since 3.17.0
type TextDocumentDiagnosticRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentDiagnosticParams `json:"params,omitempty"`
}

func NewTextDocumentDiagnosticRequest(id int, params DocumentDiagnosticParams) TextDocumentDiagnosticRequest {
	return TextDocumentDiagnosticRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentDiagnosticMethod, Params: params }
}

// Marshal r into TextDocumentDiagnosticRequest
func (r Request) TextDocumentDiagnostic() (v TextDocumentDiagnosticRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceDiagnosticMethod = "workspace/diagnostic"

// The workspace diagnostic request definition.
// 
// @since 3.17.0
type WorkspaceDiagnosticRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params WorkspaceDiagnosticParams `json:"params,omitempty"`
}

func NewWorkspaceDiagnosticRequest(id int, params WorkspaceDiagnosticParams) WorkspaceDiagnosticRequest {
	return WorkspaceDiagnosticRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceDiagnosticMethod, Params: params }
}

// Marshal r into WorkspaceDiagnosticRequest
func (r Request) WorkspaceDiagnostic() (v WorkspaceDiagnosticRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceDiagnosticRefreshMethod = "workspace/diagnostic/refresh"

// The diagnostic refresh request definition.
// 
// @since 3.17.0
type WorkspaceDiagnosticRefreshRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewWorkspaceDiagnosticRefreshRequest(id int, params any) WorkspaceDiagnosticRefreshRequest {
	return WorkspaceDiagnosticRefreshRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceDiagnosticRefreshMethod, Params: params }
}

// Marshal r into WorkspaceDiagnosticRefreshRequest
func (r Request) WorkspaceDiagnosticRefresh() (v WorkspaceDiagnosticRefreshRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const ClientRegisterCapabilityMethod = "client/registerCapability"

// The `client/registerCapability` request is sent from the server to the client to register a new capability
// handler on the client side.
type ClientRegisterCapabilityRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params RegistrationParams `json:"params,omitempty"`
}

func NewClientRegisterCapabilityRequest(id int, params RegistrationParams) ClientRegisterCapabilityRequest {
	return ClientRegisterCapabilityRequest{Jsonrpc: "2.0", Id: id, Method: ClientRegisterCapabilityMethod, Params: params }
}

// Marshal r into ClientRegisterCapabilityRequest
func (r Request) ClientRegisterCapability() (v ClientRegisterCapabilityRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const ClientUnregisterCapabilityMethod = "client/unregisterCapability"

// The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
// handler on the client side.
type ClientUnregisterCapabilityRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params UnregistrationParams `json:"params,omitempty"`
}

func NewClientUnregisterCapabilityRequest(id int, params UnregistrationParams) ClientUnregisterCapabilityRequest {
	return ClientUnregisterCapabilityRequest{Jsonrpc: "2.0", Id: id, Method: ClientUnregisterCapabilityMethod, Params: params }
}

// Marshal r into ClientUnregisterCapabilityRequest
func (r Request) ClientUnregisterCapability() (v ClientUnregisterCapabilityRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const InitializeMethod = "initialize"

// The initialize request is sent from the client to the server.
// It is sent once as the request after starting up the server.
// The requests parameter is of type {@link InitializeParams}
// the response if of type {@link InitializeResult} of a Thenable that
// resolves to such.
type InitializeRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params InitializeParams `json:"params,omitempty"`
}

func NewInitializeRequest(id int, params InitializeParams) InitializeRequest {
	return InitializeRequest{Jsonrpc: "2.0", Id: id, Method: InitializeMethod, Params: params }
}

// Marshal r into InitializeRequest
func (r Request) Initialize() (v InitializeRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const ShutdownMethod = "shutdown"

// A shutdown request is sent from the client to the server.
// It is sent once when the client decides to shutdown the
// server. The only notification that is sent after a shutdown request
// is the exit event.
type ShutdownRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewShutdownRequest(id int, params any) ShutdownRequest {
	return ShutdownRequest{Jsonrpc: "2.0", Id: id, Method: ShutdownMethod, Params: params }
}

// Marshal r into ShutdownRequest
func (r Request) Shutdown() (v ShutdownRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WindowShowMessageRequestMethod = "window/showMessageRequest"

// The show message request is sent from the server to the client to show a message
// and a set of options actions to the user.
type WindowShowMessageRequestRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ShowMessageRequestParams `json:"params,omitempty"`
}

func NewWindowShowMessageRequestRequest(id int, params ShowMessageRequestParams) WindowShowMessageRequestRequest {
	return WindowShowMessageRequestRequest{Jsonrpc: "2.0", Id: id, Method: WindowShowMessageRequestMethod, Params: params }
}

// Marshal r into WindowShowMessageRequestRequest
func (r Request) WindowShowMessageRequest() (v WindowShowMessageRequestRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentWillSaveWaitUntilMethod = "textDocument/willSaveWaitUntil"

// A document will save request is sent from the client to the server before
// the document is actually saved. The request can return an array of TextEdits
// which will be applied to the text document before it is saved. Please note that
// clients might drop results if computing the text edits took too long or if a
// server constantly fails on this request. This is done to keep the save fast and
// reliable.
type TextDocumentWillSaveWaitUntilRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params WillSaveTextDocumentParams `json:"params,omitempty"`
}

func NewTextDocumentWillSaveWaitUntilRequest(id int, params WillSaveTextDocumentParams) TextDocumentWillSaveWaitUntilRequest {
	return TextDocumentWillSaveWaitUntilRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentWillSaveWaitUntilMethod, Params: params }
}

// Marshal r into TextDocumentWillSaveWaitUntilRequest
func (r Request) TextDocumentWillSaveWaitUntil() (v TextDocumentWillSaveWaitUntilRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentCompletionMethod = "textDocument/completion"

// Request to request completion at a given text document position. The request's
// parameter is of type {@link TextDocumentPosition} the response
// is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
// or a Thenable that resolves to such.
// 
// The request can delay the computation of the {@link CompletionItem.detail `detail`}
// and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
// request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
// `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
type TextDocumentCompletionRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CompletionParams `json:"params,omitempty"`
}

func NewTextDocumentCompletionRequest(id int, params CompletionParams) TextDocumentCompletionRequest {
	return TextDocumentCompletionRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentCompletionMethod, Params: params }
}

// Marshal r into TextDocumentCompletionRequest
func (r Request) TextDocumentCompletion() (v TextDocumentCompletionRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const CompletionItemResolveMethod = "completionItem/resolve"

// Request to resolve additional information for a given completion item.The request's
// parameter is of type {@link CompletionItem} the response
// is of type {@link CompletionItem} or a Thenable that resolves to such.
type CompletionItemResolveRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CompletionItem `json:"params,omitempty"`
}

func NewCompletionItemResolveRequest(id int, params CompletionItem) CompletionItemResolveRequest {
	return CompletionItemResolveRequest{Jsonrpc: "2.0", Id: id, Method: CompletionItemResolveMethod, Params: params }
}

// Marshal r into CompletionItemResolveRequest
func (r Request) CompletionItemResolve() (v CompletionItemResolveRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentHoverMethod = "textDocument/hover"

// Request to request hover information at a given text document position. The request's
// parameter is of type {@link TextDocumentPosition} the response is of
// type {@link Hover} or a Thenable that resolves to such.
type TextDocumentHoverRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params HoverParams `json:"params,omitempty"`
}

func NewTextDocumentHoverRequest(id int, params HoverParams) TextDocumentHoverRequest {
	return TextDocumentHoverRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentHoverMethod, Params: params }
}

// Marshal r into TextDocumentHoverRequest
func (r Request) TextDocumentHover() (v TextDocumentHoverRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentSignatureHelpMethod = "textDocument/signatureHelp"


type TextDocumentSignatureHelpRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params SignatureHelpParams `json:"params,omitempty"`
}

func NewTextDocumentSignatureHelpRequest(id int, params SignatureHelpParams) TextDocumentSignatureHelpRequest {
	return TextDocumentSignatureHelpRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentSignatureHelpMethod, Params: params }
}

// Marshal r into TextDocumentSignatureHelpRequest
func (r Request) TextDocumentSignatureHelp() (v TextDocumentSignatureHelpRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentDefinitionMethod = "textDocument/definition"

// A request to resolve the definition location of a symbol at a given text
// document position. The request's parameter is of type [TextDocumentPosition]
// (#TextDocumentPosition) the response is of either type {@link Definition}
// or a typed array of {@link DefinitionLink} or a Thenable that resolves
// to such.
type TextDocumentDefinitionRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DefinitionParams `json:"params,omitempty"`
}

func NewTextDocumentDefinitionRequest(id int, params DefinitionParams) TextDocumentDefinitionRequest {
	return TextDocumentDefinitionRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentDefinitionMethod, Params: params }
}

// Marshal r into TextDocumentDefinitionRequest
func (r Request) TextDocumentDefinition() (v TextDocumentDefinitionRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentReferencesMethod = "textDocument/references"

// A request to resolve project-wide references for the symbol denoted
// by the given text document position. The request's parameter is of
// type {@link ReferenceParams} the response is of type
// {@link Location Location[]} or a Thenable that resolves to such.
type TextDocumentReferencesRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ReferenceParams `json:"params,omitempty"`
}

func NewTextDocumentReferencesRequest(id int, params ReferenceParams) TextDocumentReferencesRequest {
	return TextDocumentReferencesRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentReferencesMethod, Params: params }
}

// Marshal r into TextDocumentReferencesRequest
func (r Request) TextDocumentReferences() (v TextDocumentReferencesRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentDocumentHighlightMethod = "textDocument/documentHighlight"

// Request to resolve a {@link DocumentHighlight} for a given
// text document position. The request's parameter is of type [TextDocumentPosition]
// (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
// (#DocumentHighlight) or a Thenable that resolves to such.
type TextDocumentDocumentHighlightRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentHighlightParams `json:"params,omitempty"`
}

func NewTextDocumentDocumentHighlightRequest(id int, params DocumentHighlightParams) TextDocumentDocumentHighlightRequest {
	return TextDocumentDocumentHighlightRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentDocumentHighlightMethod, Params: params }
}

// Marshal r into TextDocumentDocumentHighlightRequest
func (r Request) TextDocumentDocumentHighlight() (v TextDocumentDocumentHighlightRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentDocumentSymbolMethod = "textDocument/documentSymbol"

// A request to list all symbols found in a given text document. The request's
// parameter is of type {@link TextDocumentIdentifier} the
// response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
// that resolves to such.
type TextDocumentDocumentSymbolRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentSymbolParams `json:"params,omitempty"`
}

func NewTextDocumentDocumentSymbolRequest(id int, params DocumentSymbolParams) TextDocumentDocumentSymbolRequest {
	return TextDocumentDocumentSymbolRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentDocumentSymbolMethod, Params: params }
}

// Marshal r into TextDocumentDocumentSymbolRequest
func (r Request) TextDocumentDocumentSymbol() (v TextDocumentDocumentSymbolRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentCodeActionMethod = "textDocument/codeAction"

// A request to provide commands for the given text document and range.
type TextDocumentCodeActionRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CodeActionParams `json:"params,omitempty"`
}

func NewTextDocumentCodeActionRequest(id int, params CodeActionParams) TextDocumentCodeActionRequest {
	return TextDocumentCodeActionRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentCodeActionMethod, Params: params }
}

// Marshal r into TextDocumentCodeActionRequest
func (r Request) TextDocumentCodeAction() (v TextDocumentCodeActionRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const CodeActionResolveMethod = "codeAction/resolve"

// Request to resolve additional information for a given code action.The request's
// parameter is of type {@link CodeAction} the response
// is of type {@link CodeAction} or a Thenable that resolves to such.
type CodeActionResolveRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CodeAction `json:"params,omitempty"`
}

func NewCodeActionResolveRequest(id int, params CodeAction) CodeActionResolveRequest {
	return CodeActionResolveRequest{Jsonrpc: "2.0", Id: id, Method: CodeActionResolveMethod, Params: params }
}

// Marshal r into CodeActionResolveRequest
func (r Request) CodeActionResolve() (v CodeActionResolveRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceSymbolMethod = "workspace/symbol"

// A request to list project-wide symbols matching the query string given
// by the {@link WorkspaceSymbolParams}. The response is
// of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
// resolves to such.
// 
// @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
//  need to advertise support for WorkspaceSymbols via the client capability
//  `workspace.symbol.resolveSupport`.
// 
type WorkspaceSymbolRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params WorkspaceSymbolParams `json:"params,omitempty"`
}

func NewWorkspaceSymbolRequest(id int, params WorkspaceSymbolParams) WorkspaceSymbolRequest {
	return WorkspaceSymbolRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceSymbolMethod, Params: params }
}

// Marshal r into WorkspaceSymbolRequest
func (r Request) WorkspaceSymbol() (v WorkspaceSymbolRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceSymbolResolveMethod = "workspaceSymbol/resolve"

// A request to resolve the range inside the workspace
// symbol's location.
// 
// @since 3.17.0
type WorkspaceSymbolResolveRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params WorkspaceSymbol `json:"params,omitempty"`
}

func NewWorkspaceSymbolResolveRequest(id int, params WorkspaceSymbol) WorkspaceSymbolResolveRequest {
	return WorkspaceSymbolResolveRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceSymbolResolveMethod, Params: params }
}

// Marshal r into WorkspaceSymbolResolveRequest
func (r Request) WorkspaceSymbolResolve() (v WorkspaceSymbolResolveRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentCodeLensMethod = "textDocument/codeLens"

// A request to provide code lens for the given text document.
type TextDocumentCodeLensRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CodeLensParams `json:"params,omitempty"`
}

func NewTextDocumentCodeLensRequest(id int, params CodeLensParams) TextDocumentCodeLensRequest {
	return TextDocumentCodeLensRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentCodeLensMethod, Params: params }
}

// Marshal r into TextDocumentCodeLensRequest
func (r Request) TextDocumentCodeLens() (v TextDocumentCodeLensRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const CodeLensResolveMethod = "codeLens/resolve"

// A request to resolve a command for a given code lens.
type CodeLensResolveRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params CodeLens `json:"params,omitempty"`
}

func NewCodeLensResolveRequest(id int, params CodeLens) CodeLensResolveRequest {
	return CodeLensResolveRequest{Jsonrpc: "2.0", Id: id, Method: CodeLensResolveMethod, Params: params }
}

// Marshal r into CodeLensResolveRequest
func (r Request) CodeLensResolve() (v CodeLensResolveRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceCodeLensRefreshMethod = "workspace/codeLens/refresh"

// A request to refresh all code actions
// 
// @since 3.16.0
type WorkspaceCodeLensRefreshRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params any `json:"params,omitempty"`
}

func NewWorkspaceCodeLensRefreshRequest(id int, params any) WorkspaceCodeLensRefreshRequest {
	return WorkspaceCodeLensRefreshRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceCodeLensRefreshMethod, Params: params }
}

// Marshal r into WorkspaceCodeLensRefreshRequest
func (r Request) WorkspaceCodeLensRefresh() (v WorkspaceCodeLensRefreshRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentDocumentLinkMethod = "textDocument/documentLink"

// A request to provide document links
type TextDocumentDocumentLinkRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentLinkParams `json:"params,omitempty"`
}

func NewTextDocumentDocumentLinkRequest(id int, params DocumentLinkParams) TextDocumentDocumentLinkRequest {
	return TextDocumentDocumentLinkRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentDocumentLinkMethod, Params: params }
}

// Marshal r into TextDocumentDocumentLinkRequest
func (r Request) TextDocumentDocumentLink() (v TextDocumentDocumentLinkRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const DocumentLinkResolveMethod = "documentLink/resolve"

// Request to resolve additional information for a given document link. The request's
// parameter is of type {@link DocumentLink} the response
// is of type {@link DocumentLink} or a Thenable that resolves to such.
type DocumentLinkResolveRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentLink `json:"params,omitempty"`
}

func NewDocumentLinkResolveRequest(id int, params DocumentLink) DocumentLinkResolveRequest {
	return DocumentLinkResolveRequest{Jsonrpc: "2.0", Id: id, Method: DocumentLinkResolveMethod, Params: params }
}

// Marshal r into DocumentLinkResolveRequest
func (r Request) DocumentLinkResolve() (v DocumentLinkResolveRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentFormattingMethod = "textDocument/formatting"

// A request to to format a whole document.
type TextDocumentFormattingRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentFormattingParams `json:"params,omitempty"`
}

func NewTextDocumentFormattingRequest(id int, params DocumentFormattingParams) TextDocumentFormattingRequest {
	return TextDocumentFormattingRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentFormattingMethod, Params: params }
}

// Marshal r into TextDocumentFormattingRequest
func (r Request) TextDocumentFormatting() (v TextDocumentFormattingRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentRangeFormattingMethod = "textDocument/rangeFormatting"

// A request to to format a range in a document.
type TextDocumentRangeFormattingRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentRangeFormattingParams `json:"params,omitempty"`
}

func NewTextDocumentRangeFormattingRequest(id int, params DocumentRangeFormattingParams) TextDocumentRangeFormattingRequest {
	return TextDocumentRangeFormattingRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentRangeFormattingMethod, Params: params }
}

// Marshal r into TextDocumentRangeFormattingRequest
func (r Request) TextDocumentRangeFormatting() (v TextDocumentRangeFormattingRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentOnTypeFormattingMethod = "textDocument/onTypeFormatting"

// A request to format a document on type.
type TextDocumentOnTypeFormattingRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params DocumentOnTypeFormattingParams `json:"params,omitempty"`
}

func NewTextDocumentOnTypeFormattingRequest(id int, params DocumentOnTypeFormattingParams) TextDocumentOnTypeFormattingRequest {
	return TextDocumentOnTypeFormattingRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentOnTypeFormattingMethod, Params: params }
}

// Marshal r into TextDocumentOnTypeFormattingRequest
func (r Request) TextDocumentOnTypeFormatting() (v TextDocumentOnTypeFormattingRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentRenameMethod = "textDocument/rename"

// A request to rename a symbol.
type TextDocumentRenameRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params RenameParams `json:"params,omitempty"`
}

func NewTextDocumentRenameRequest(id int, params RenameParams) TextDocumentRenameRequest {
	return TextDocumentRenameRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentRenameMethod, Params: params }
}

// Marshal r into TextDocumentRenameRequest
func (r Request) TextDocumentRename() (v TextDocumentRenameRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const TextDocumentPrepareRenameMethod = "textDocument/prepareRename"

// A request to test and perform the setup necessary for a rename.
// 
// @since 3.16 - support for default behavior
type TextDocumentPrepareRenameRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params PrepareRenameParams `json:"params,omitempty"`
}

func NewTextDocumentPrepareRenameRequest(id int, params PrepareRenameParams) TextDocumentPrepareRenameRequest {
	return TextDocumentPrepareRenameRequest{Jsonrpc: "2.0", Id: id, Method: TextDocumentPrepareRenameMethod, Params: params }
}

// Marshal r into TextDocumentPrepareRenameRequest
func (r Request) TextDocumentPrepareRename() (v TextDocumentPrepareRenameRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceExecuteCommandMethod = "workspace/executeCommand"

// A request send from the client to the server to execute a command. The request might return
// a workspace edit which the client will apply to the workspace.
type WorkspaceExecuteCommandRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ExecuteCommandParams `json:"params,omitempty"`
}

func NewWorkspaceExecuteCommandRequest(id int, params ExecuteCommandParams) WorkspaceExecuteCommandRequest {
	return WorkspaceExecuteCommandRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceExecuteCommandMethod, Params: params }
}

// Marshal r into WorkspaceExecuteCommandRequest
func (r Request) WorkspaceExecuteCommand() (v WorkspaceExecuteCommandRequest) {
	json.Unmarshal(r.raw, &v)
	return
}

const WorkspaceApplyEditMethod = "workspace/applyEdit"

// A request sent from the server to the client to modified certain resources.
type WorkspaceApplyEditRequest struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int `json:"id"`
	Method string `json:"method"`
	Params ApplyWorkspaceEditParams `json:"params,omitempty"`
}

func NewWorkspaceApplyEditRequest(id int, params ApplyWorkspaceEditParams) WorkspaceApplyEditRequest {
	return WorkspaceApplyEditRequest{Jsonrpc: "2.0", Id: id, Method: WorkspaceApplyEditMethod, Params: params }
}

// Marshal r into WorkspaceApplyEditRequest
func (r Request) WorkspaceApplyEdit() (v WorkspaceApplyEditRequest) {
	json.Unmarshal(r.raw, &v)
	return
}
