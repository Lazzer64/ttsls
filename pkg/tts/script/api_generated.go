// Code generated by go generate; DO NOT EDIT.
package script

type Definition struct {
	Name, Kind, Short, Long string
}

func init() {
	Definitions[""]["Backgrounds"] = append(Definitions[""]["Backgrounds"], Definition{
	Name:  "Backgrounds",
	Kind:  "constant",
	Short: "```lua\nBackgrounds -- class\n```",
	Long:  "```lua\nBackgrounds -- class\n```\nThe Backgrounds class.\n\nmore: https://api.tabletopsimulator.com/backgrounds/",
},
	)
	Definitions[""]["bit32"] = append(Definitions[""]["bit32"], Definition{
	Name:  "bit32",
	Kind:  "constant",
	Short: "```lua\nbit32 -- class\n```",
	Long:  "```lua\nbit32 -- class\n```\nThe bit32 class.\n\nmore: https://www.lua.org/manual/5.2/manual.html#6.7",
},
	)
	Definitions[""]["coroutine"] = append(Definitions[""]["coroutine"], Definition{
	Name:  "coroutine",
	Kind:  "constant",
	Short: "```lua\ncoroutine -- class\n```",
	Long:  "```lua\ncoroutine -- class\n```\nThe coroutine class.\n\nmore: https://www.lua.org/manual/5.2/manual.html#6.2",
},
	)
	Definitions[""]["dynamic"] = append(Definitions[""]["dynamic"], Definition{
	Name:  "dynamic",
	Kind:  "constant",
	Short: "```lua\ndynamic -- class\n```",
	Long:  "```lua\ndynamic -- class\n```\nThe dynamic class.\n\nmore: http://www.moonsharp.org/additions.html",
},
	)
	Definitions[""]["Global"] = append(Definitions[""]["Global"], Definition{
	Name:  "Global",
	Kind:  "constant",
	Short: "```lua\nGlobal -- class\n```",
	Long:  "```lua\nGlobal -- class\n```\nA reference to the Global Script.\n\nmore: https://api.tabletopsimulator.com/object/",
},
	)
	Definitions[""]["Info"] = append(Definitions[""]["Info"], Definition{
	Name:  "Info",
	Kind:  "constant",
	Short: "```lua\nInfo -- class\n```",
	Long:  "```lua\nInfo -- class\n```\nThe Info class.\n\nmore: info",
},
	)
	Definitions[""]["JSON"] = append(Definitions[""]["JSON"], Definition{
	Name:  "JSON",
	Kind:  "constant",
	Short: "```lua\nJSON -- class\n```",
	Long:  "```lua\nJSON -- class\n```\nThe JSON class.\n\nmore: https://api.tabletopsimulator.com/json/",
},
	)
	Definitions[""]["Lighting"] = append(Definitions[""]["Lighting"], Definition{
	Name:  "Lighting",
	Kind:  "constant",
	Short: "```lua\nLighting -- class\n```",
	Long:  "```lua\nLighting -- class\n```\nThe Lighting class.\n\nmore: https://api.tabletopsimulator.com/lighting/",
},
	)
	Definitions[""]["math"] = append(Definitions[""]["math"], Definition{
	Name:  "math",
	Kind:  "constant",
	Short: "```lua\nmath -- class\n```",
	Long:  "```lua\nmath -- class\n```\nThe math class.\n\nmore: https://www.lua.org/manual/5.2/manual.html#6.6",
},
	)
	Definitions[""]["Notes"] = append(Definitions[""]["Notes"], Definition{
	Name:  "Notes",
	Kind:  "constant",
	Short: "```lua\nNotes -- class\n```",
	Long:  "```lua\nNotes -- class\n```\nThe Notes class.\n\nmore: https://api.tabletopsimulator.com/notes/",
},
	)
	Definitions[""]["os"] = append(Definitions[""]["os"], Definition{
	Name:  "os",
	Kind:  "constant",
	Short: "```lua\nos -- class\n```",
	Long:  "```lua\nos -- class\n```\nThe os class.\n\nmore: https://www.lua.org/manual/5.2/manual.html#6.9",
},
	)
	Definitions[""]["Physics"] = append(Definitions[""]["Physics"], Definition{
	Name:  "Physics",
	Kind:  "constant",
	Short: "```lua\nPhysics -- class\n```",
	Long:  "```lua\nPhysics -- class\n```\nThe Physics class.\n\nmore: https://api.tabletopsimulator.com/physics/",
},
	)
	Definitions[""]["Player"] = append(Definitions[""]["Player"], Definition{
	Name:  "Player",
	Kind:  "constant",
	Short: "```lua\nPlayer -- class\n```",
	Long:  "```lua\nPlayer -- class\n```\nThe Player class.\n\nmore: https://api.tabletopsimulator.com/player/manager/",
},
	)
	Definitions[""]["self"] = append(Definitions[""]["self"], Definition{
	Name:  "self",
	Kind:  "constant",
	Short: "```lua\nself -- class\n```",
	Long:  "```lua\nself -- class\n```\nA reference to this Object.\n\nmore: https://api.tabletopsimulator.com/object/",
},
	)
	Definitions[""]["string"] = append(Definitions[""]["string"], Definition{
	Name:  "string",
	Kind:  "constant",
	Short: "```lua\nstring -- class\n```",
	Long:  "```lua\nstring -- class\n```\nThe string class.\n\nmore: https://www.lua.org/manual/5.2/manual.html#6.4",
},
	)
	Definitions[""]["table"] = append(Definitions[""]["table"], Definition{
	Name:  "table",
	Kind:  "constant",
	Short: "```lua\ntable -- class\n```",
	Long:  "```lua\ntable -- class\n```\nThe table class.\n\nmore: https://www.lua.org/manual/5.2/manual.html#6.5",
},
	)
	Definitions[""]["Tables"] = append(Definitions[""]["Tables"], Definition{
	Name:  "Tables",
	Kind:  "constant",
	Short: "```lua\nTables -- class\n```",
	Long:  "```lua\nTables -- class\n```\nThe Tables class.\n\nmore: https://api.tabletopsimulator.com/tables/",
},
	)
	Definitions[""]["Time"] = append(Definitions[""]["Time"], Definition{
	Name:  "Time",
	Kind:  "constant",
	Short: "```lua\nTime -- class\n```",
	Long:  "```lua\nTime -- class\n```\nThe Time class.\n\nmore: https://api.tabletopsimulator.com/time/",
},
	)
	Definitions[""]["Turns"] = append(Definitions[""]["Turns"], Definition{
	Name:  "Turns",
	Kind:  "constant",
	Short: "```lua\nTurns -- class\n```",
	Long:  "```lua\nTurns -- class\n```\nThe Turns class.\n\nmore: https://api.tabletopsimulator.com/turns/",
},
	)
	Definitions[""]["UI"] = append(Definitions[""]["UI"], Definition{
	Name:  "UI",
	Kind:  "constant",
	Short: "```lua\nUI -- class\n```",
	Long:  "```lua\nUI -- class\n```\nThe UI class.\n\nmore: https://api.tabletopsimulator.com/ui/",
},
	)
	Definitions[""]["Wait"] = append(Definitions[""]["Wait"], Definition{
	Name:  "Wait",
	Kind:  "constant",
	Short: "```lua\nWait -- class\n```",
	Long:  "```lua\nWait -- class\n```\nThe Wait class.\n\nmore: https://api.tabletopsimulator.com/wait/",
},
	)
	Definitions[""]["WebRequest"] = append(Definitions[""]["WebRequest"], Definition{
	Name:  "WebRequest",
	Kind:  "constant",
	Short: "```lua\nWebRequest -- class\n```",
	Long:  "```lua\nWebRequest -- class\n```\nThe WebRequest class.\n\nmore: https://api.tabletopsimulator.com/webrequest/manager/",
},
	)
	Definitions[""]["addContextMenuItem"] = append(Definitions[""]["addContextMenuItem"], Definition{
	Name:  "addContextMenuItem",
	Kind:  "function",
	Short: "```lua\nfunction addContextMenuItem(label, f, keep_open, require_table) -- bool\n```",
	Long:  "```lua\nfunction addContextMenuItem(label, f, keep_open, require_table) -- bool\n```\nAdd a global context menu item.\nlabel: string\nf: function\nkeep_open: bool\nrequire_table: bool\n\n\nmore: https://api.tabletopsimulator.com/base/#addcontextmenuitem",
},
	)
	Definitions[""]["addHotkey"] = append(Definitions[""]["addHotkey"], Definition{
	Name:  "addHotkey",
	Kind:  "function",
	Short: "```lua\nfunction addHotkey(label, f, trigger_on_key_up) -- bool\n```",
	Long:  "```lua\nfunction addHotkey(label, f, trigger_on_key_up) -- bool\n```\nAdd a user-assignable hotkey.\nlabel: string\nf: function\ntrigger_on_key_up: bool\n\n\nmore: https://api.tabletopsimulator.com/base/#addhotkey",
},
	)
	Definitions[""]["broadcastToAll"] = append(Definitions[""]["broadcastToAll"], Definition{
	Name:  "broadcastToAll",
	Kind:  "function",
	Short: "```lua\nfunction broadcastToAll(message, text_color) -- bool\n```",
	Long:  "```lua\nfunction broadcastToAll(message, text_color) -- bool\n```\nPrints a message to the screen and chat window on all connected clients.\nmessage: string\ntext_color: Color\n\n\nmore: https://api.tabletopsimulator.com/base/#broadcasttoall",
},
	)
	Definitions[""]["broadcastToColor"] = append(Definitions[""]["broadcastToColor"], Definition{
	Name:  "broadcastToColor",
	Kind:  "function",
	Short: "```lua\nfunction broadcastToColor(message, player_color, text_color) -- bool\n```",
	Long:  "```lua\nfunction broadcastToColor(message, player_color, text_color) -- bool\n```\nPrints a private message to the screen and chat window to the player matching the player color.\nmessage: string\nplayer_color: string\ntext_color: Color\n\n\nmore: https://api.tabletopsimulator.com/base/#broadcasttocolor",
},
	)
	Definitions[""]["clearContextMenu"] = append(Definitions[""]["clearContextMenu"], Definition{
	Name:  "clearContextMenu",
	Kind:  "function",
	Short: "```lua\nfunction clearContextMenu() -- bool\n```",
	Long:  "```lua\nfunction clearContextMenu() -- bool\n```\nClears add global context menu items.\n\n\nmore: https://api.tabletopsimulator.com/base/#clearcontextmenu",
},
	)
	Definitions[""]["clearHotkeys"] = append(Definitions[""]["clearHotkeys"], Definition{
	Name:  "clearHotkeys",
	Kind:  "function",
	Short: "```lua\nfunction clearHotkeys() -- bool\n```",
	Long:  "```lua\nfunction clearHotkeys() -- bool\n```\nClears user assignable hotkeys.\n\n\nmore: https://api.tabletopsimulator.com/base/#clearhotkeys",
},
	)
	Definitions[""]["clearPixelPaint"] = append(Definitions[""]["clearPixelPaint"], Definition{
	Name:  "clearPixelPaint",
	Kind:  "function",
	Short: "```lua\nfunction clearPixelPaint() -- bool\n```",
	Long:  "```lua\nfunction clearPixelPaint() -- bool\n```\nClears all pixel paint.\n\n\nmore: https://api.tabletopsimulator.com/base/#clearpixelpaint",
},
	)
	Definitions[""]["clearVectorPaint"] = append(Definitions[""]["clearVectorPaint"], Definition{
	Name:  "clearVectorPaint",
	Kind:  "function",
	Short: "```lua\nfunction clearVectorPaint() -- bool\n```",
	Long:  "```lua\nfunction clearVectorPaint() -- bool\n```\nClears all vector paint.\n\n\nmore: https://api.tabletopsimulator.com/base/#clearvectorpaint",
},
	)
	Definitions[""]["color"] = append(Definitions[""]["color"], Definition{
	Name:  "color",
	Kind:  "function",
	Short: "```lua\nfunction color(red, green, blue, alpha) -- Color\n```",
	Long:  "```lua\nfunction color(red, green, blue, alpha) -- Color\n```\nCreates a Color table from rgb[a] values (alpha is optional).\nred: float\ngreen: float\nblue: float\nalpha: float\n\n\nmore: https://api.tabletopsimulator.com/object/#color",
},
	)
	Definitions[""]["copy"] = append(Definitions[""]["copy"], Definition{
	Name:  "copy",
	Kind:  "function",
	Short: "```lua\nfunction copy(objects) -- bool\n```",
	Long:  "```lua\nfunction copy(objects) -- bool\n```\nCopies a list of Objects.\nobjects: table\n\n\nmore: https://api.tabletopsimulator.com/base/#copy",
},
	)
	Definitions[""]["destroyObject"] = append(Definitions[""]["destroyObject"], Definition{
	Name:  "destroyObject",
	Kind:  "function",
	Short: "```lua\nfunction destroyObject(obj) -- bool\n```",
	Long:  "```lua\nfunction destroyObject(obj) -- bool\n```\nDestroys an Object.\nobj: Object\n\n\nmore: https://api.tabletopsimulator.com/base/#destroyobject",
},
	)
	Definitions[""]["flipTable"] = append(Definitions[""]["flipTable"], Definition{
	Name:  "flipTable",
	Kind:  "function",
	Short: "```lua\nfunction flipTable() -- bool\n```",
	Long:  "```lua\nfunction flipTable() -- bool\n```\nFlip the table in a fit of rage.\n\n\nmore: https://api.tabletopsimulator.com/base/#fliptable",
},
	)
	Definitions[""]["getObjects"] = append(Definitions[""]["getObjects"], Definition{
	Name:  "getObjects",
	Kind:  "function",
	Short: "```lua\nfunction getObjects() -- table\n```",
	Long:  "```lua\nfunction getObjects() -- table\n```\nReturns a table of all the spawned Objects in the game.\n\n\nmore: https://api.tabletopsimulator.com/base/#getobjects",
},
	)
	Definitions[""]["getObjectFromGUID"] = append(Definitions[""]["getObjectFromGUID"], Definition{
	Name:  "getObjectFromGUID",
	Kind:  "function",
	Short: "```lua\nfunction getObjectFromGUID(guid) -- Object\n```",
	Long:  "```lua\nfunction getObjectFromGUID(guid) -- Object\n```\nGets a reference to an Object from a GUID. Will return nil if the Object doesn't exist.\nguid: string\n\n\nmore: https://api.tabletopsimulator.com/base/#getobjectfromguid",
},
	)
	Definitions[""]["getObjectsWithAllTags"] = append(Definitions[""]["getObjectsWithAllTags"], Definition{
	Name:  "getObjectsWithAllTags",
	Kind:  "function",
	Short: "```lua\nfunction getObjectsWithAllTags(tags) -- table\n```",
	Long:  "```lua\nfunction getObjectsWithAllTags(tags) -- table\n```\nReturns Table of all Objects which have all of the specified tags attached.\ntags: table\n\n\nmore: https://api.tabletopsimulator.com/base/#getobjectswithalltags",
},
	)
	Definitions[""]["getObjectsWithAnyTags"] = append(Definitions[""]["getObjectsWithAnyTags"], Definition{
	Name:  "getObjectsWithAnyTags",
	Kind:  "function",
	Short: "```lua\nfunction getObjectsWithAnyTags(tags) -- table\n```",
	Long:  "```lua\nfunction getObjectsWithAnyTags(tags) -- table\n```\nReturns Table of all Objects which have at least one of the specified tags attached.\ntags: table\n\n\nmore: https://api.tabletopsimulator.com/base/#getobjectswithanytags",
},
	)
	Definitions[""]["getObjectsWithTag"] = append(Definitions[""]["getObjectsWithTag"], Definition{
	Name:  "getObjectsWithTag",
	Kind:  "function",
	Short: "```lua\nfunction getObjectsWithTag(tag) -- table\n```",
	Long:  "```lua\nfunction getObjectsWithTag(tag) -- table\n```\nReturns Table of all Objects which have the specified tag attached.\ntag: string\n\n\nmore: https://api.tabletopsimulator.com/base/#getobjectswithtag",
},
	)
	Definitions[""]["getSeatedPlayers"] = append(Definitions[""]["getSeatedPlayers"], Definition{
	Name:  "getSeatedPlayers",
	Kind:  "function",
	Short: "```lua\nfunction getSeatedPlayers() -- table\n```",
	Long:  "```lua\nfunction getSeatedPlayers() -- table\n```\nReturns an indexed Lua table of all the seated Player colors.\n\n\nmore: https://api.tabletopsimulator.com/base/#getseatedplayers",
},
	)
	Definitions[""]["log"] = append(Definitions[""]["log"], Definition{
	Name:  "log",
	Kind:  "function",
	Short: "```lua\nfunction log(message, tag, label) -- bool\n```",
	Long:  "```lua\nfunction log(message, tag, label) -- bool\n```\nOutputs a message to the system console. Specify a tag to identify it by class or subject, and label to prefix the value.\nmessage: any\ntag: string\nlabel: string\n\n\nmore: https://api.tabletopsimulator.com/base/#log",
},
	)
	Definitions[""]["logString"] = append(Definitions[""]["logString"], Definition{
	Name:  "logString",
	Kind:  "function",
	Short: "```lua\nfunction logString(message, tag, label) -- string\n```",
	Long:  "```lua\nfunction logString(message, tag, label) -- string\n```\nReturns the string which \"log\" would output.\nmessage: any\ntag: string\nlabel: string\n\n\nmore: https://api.tabletopsimulator.com/base/#logstring",
},
	)
	Definitions[""]["logStyle"] = append(Definitions[""]["logStyle"], Definition{
	Name:  "logStyle",
	Kind:  "function",
	Short: "```lua\nfunction logStyle(tag, color, prefix, postfix) -- bool\n```",
	Long:  "```lua\nfunction logStyle(tag, color, prefix, postfix) -- bool\n```\nSets the style options for the specified tag: the color it is displayed in and any prefix or postfix text.\ntag: string\ncolor: Color\nprefix: string\npostfix: string\n\n\nmore: https://api.tabletopsimulator.com/base/#logstyle",
},
	)
	Definitions[""]["group"] = append(Definitions[""]["group"], Definition{
	Name:  "group",
	Kind:  "function",
	Short: "```lua\nfunction group(objects) -- Object\n```",
	Long:  "```lua\nfunction group(objects) -- Object\n```\nGroups objects together into returned Object.\nobjects: table\n\n\nmore: https://api.tabletopsimulator.com/base/#group",
},
	)
	Definitions[""]["paste"] = append(Definitions[""]["paste"], Definition{
	Name:  "paste",
	Kind:  "function",
	Short: "```lua\nfunction paste(parameters) -- table\n```",
	Long:  "```lua\nfunction paste(parameters) -- table\n```\nPastes copied Objects and returns a table of references to the new Objects.\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/base/#paste",
},
	)
	Definitions[""]["print"] = append(Definitions[""]["print"], Definition{
	Name:  "print",
	Kind:  "function",
	Short: "```lua\nfunction print(message) -- void\n```",
	Long:  "```lua\nfunction print(message) -- void\n```\nPrints a message to the chat window only on the host.\nmessage: string\n\n\nmore: https://api.tabletopsimulator.com/base/#print",
},
	)
	Definitions[""]["printToAll"] = append(Definitions[""]["printToAll"], Definition{
	Name:  "printToAll",
	Kind:  "function",
	Short: "```lua\nfunction printToAll(message, text_color) -- bool\n```",
	Long:  "```lua\nfunction printToAll(message, text_color) -- bool\n```\nPrints a message to the chat window on all connected clients.\nmessage: string\ntext_color: Color\n\n\nmore: https://api.tabletopsimulator.com/base/#printtoall",
},
	)
	Definitions[""]["printToColor"] = append(Definitions[""]["printToColor"], Definition{
	Name:  "printToColor",
	Kind:  "function",
	Short: "```lua\nfunction printToColor(message, player_color, text_color) -- bool\n```",
	Long:  "```lua\nfunction printToColor(message, player_color, text_color) -- bool\n```\nPrints a message to the chat window of a specific Player.\nmessage: string\nplayer_color: string\ntext_color: Color\n\n\nmore: https://api.tabletopsimulator.com/base/#printtocolor",
},
	)
	Definitions[""]["sendExternalMessage"] = append(Definitions[""]["sendExternalMessage"], Definition{
	Name:  "sendExternalMessage",
	Kind:  "function",
	Short: "```lua\nfunction sendExternalMessage(table) -- bool\n```",
	Long:  "```lua\nfunction sendExternalMessage(table) -- bool\n```\nSends table to whatever is connected to the External Editor API.\ntable: table\n\n\nmore: https://api.tabletopsimulator.com/externaleditorapi/",
},
	)
	Definitions[""]["spawnObject"] = append(Definitions[""]["spawnObject"], Definition{
	Name:  "spawnObject",
	Kind:  "function",
	Short: "```lua\nfunction spawnObject(parameters) -- Object\n```",
	Long:  "```lua\nfunction spawnObject(parameters) -- Object\n```\nSpawns an Object and returns a reference to it.\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/base/#spawnobject",
},
	)
	Definitions[""]["spawnObjectData"] = append(Definitions[""]["spawnObjectData"], Definition{
	Name:  "spawnObjectData",
	Kind:  "function",
	Short: "```lua\nfunction spawnObjectData(parameters) -- Object\n```",
	Long:  "```lua\nfunction spawnObjectData(parameters) -- Object\n```\nSpawns an Object using an Object Data Table and returns a reference to it.\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/base/#spawnobjectdata",
},
	)
	Definitions[""]["spawnObjectJSON"] = append(Definitions[""]["spawnObjectJSON"], Definition{
	Name:  "spawnObjectJSON",
	Kind:  "function",
	Short: "```lua\nfunction spawnObjectJSON(parameters) -- Object\n```",
	Long:  "```lua\nfunction spawnObjectJSON(parameters) -- Object\n```\nSpawns an Object using a JSON string and returns a reference to it.\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/base/#spawnobjectjson",
},
	)
	Definitions[""]["startLuaCoroutine"] = append(Definitions[""]["startLuaCoroutine"], Definition{
	Name:  "startLuaCoroutine",
	Kind:  "function",
	Short: "```lua\nfunction startLuaCoroutine(func_owner, func_name) -- bool\n```",
	Long:  "```lua\nfunction startLuaCoroutine(func_owner, func_name) -- bool\n```\nStarts a Lua function as a coroutine.\nfunc_owner: Object\nfunc_name: string\n\n\nmore: https://api.tabletopsimulator.com/base/#startluacoroutine",
},
	)
	Definitions[""]["stringColorToRGB"] = append(Definitions[""]["stringColorToRGB"], Definition{
	Name:  "stringColorToRGB",
	Kind:  "function",
	Short: "```lua\nfunction stringColorToRGB(player_color) -- table\n```",
	Long:  "```lua\nfunction stringColorToRGB(player_color) -- table\n```\nConverts a color string (player colors) to its RGB values.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/base/#stringcolortorgb",
},
	)
	Definitions[""]["tonumber"] = append(Definitions[""]["tonumber"], Definition{
	Name:  "tonumber",
	Kind:  "function",
	Short: "```lua\nfunction tonumber(s) -- number\n```",
	Long:  "```lua\nfunction tonumber(s) -- number\n```\nWhen called with no base, tonumber tries to convert its argument to a number.\ns: string\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-tonumber",
},
	)
	Definitions[""]["tostring"] = append(Definitions[""]["tostring"], Definition{
	Name:  "tostring",
	Kind:  "function",
	Short: "```lua\nfunction tostring(x) -- number\n```",
	Long:  "```lua\nfunction tostring(x) -- number\n```\nReceives a value of any type and converts it to a string in a reasonable format.\nx: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-tostring",
},
	)
	Definitions[""]["vector"] = append(Definitions[""]["vector"], Definition{
	Name:  "vector",
	Kind:  "function",
	Short: "```lua\nfunction vector(x, y, z) -- Vector\n```",
	Long:  "```lua\nfunction vector(x, y, z) -- Vector\n```\nCreates a Vector table from x, y, z values.\nx: float\ny: float\nz: float\n\n\nmore: https://api.tabletopsimulator.com/object/#vector",
},
	)
	Definitions["Action"]["Copy"] = append(Definitions["Action"]["Copy"], Definition{
	Name:  "Copy",
	Kind:  "constant",
	Short: "```lua\nCopy -- Action\n```",
	Long:  "```lua\nCopy -- Action\n```\nCopy (or commence cloning) the targets.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["Cut"] = append(Definitions["Action"]["Cut"], Definition{
	Name:  "Cut",
	Kind:  "constant",
	Short: "```lua\nCut -- Action\n```",
	Long:  "```lua\nCut -- Action\n```\nCut (copy and delete) the targets.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["Delete"] = append(Definitions["Action"]["Delete"], Definition{
	Name:  "Delete",
	Kind:  "constant",
	Short: "```lua\nDelete -- Action\n```",
	Long:  "```lua\nDelete -- Action\n```\nDelete the targets.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["FlipIncrementalLeft"] = append(Definitions["Action"]["FlipIncrementalLeft"], Definition{
	Name:  "FlipIncrementalLeft",
	Kind:  "constant",
	Short: "```lua\nFlipIncrementalLeft -- Action\n```",
	Long:  "```lua\nFlipIncrementalLeft -- Action\n```\nIncrementally rotate the targets counter-clockwise around their flip axes, typically the scene's Z-axis.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["FlipIncrementalRight"] = append(Definitions["Action"]["FlipIncrementalRight"], Definition{
	Name:  "FlipIncrementalRight",
	Kind:  "constant",
	Short: "```lua\nFlipIncrementalRight -- Action\n```",
	Long:  "```lua\nFlipIncrementalRight -- Action\n```\nIncrementally rotate the targets clockwise around their flip axes, typically the scene's Z-axis.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["FlipOver"] = append(Definitions["Action"]["FlipOver"], Definition{
	Name:  "FlipOver",
	Kind:  "constant",
	Short: "```lua\nFlipOver -- Action\n```",
	Long:  "```lua\nFlipOver -- Action\n```\nRotate the targets 180 degrees around their flip axes, typically the scene's Z-axis i.e. toggle the targets between face up and face down.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["Group"] = append(Definitions["Action"]["Group"], Definition{
	Name:  "Group",
	Kind:  "constant",
	Short: "```lua\nGroup -- Action\n```",
	Long:  "```lua\nGroup -- Action\n```\nGroup the targets.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["Paste"] = append(Definitions["Action"]["Paste"], Definition{
	Name:  "Paste",
	Kind:  "constant",
	Short: "```lua\nPaste -- Action\n```",
	Long:  "```lua\nPaste -- Action\n```\nPaste (spawn) the targets.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["PickUp"] = append(Definitions["Action"]["PickUp"], Definition{
	Name:  "PickUp",
	Kind:  "constant",
	Short: "```lua\nPickUp -- Action\n```",
	Long:  "```lua\nPickUp -- Action\n```\nPick up the targets.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["Randomize"] = append(Definitions["Action"]["Randomize"], Definition{
	Name:  "Randomize",
	Kind:  "constant",
	Short: "```lua\nRandomize -- Action\n```",
	Long:  "```lua\nRandomize -- Action\n```\nRandomize the targets.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["RotateIncrementalLeft"] = append(Definitions["Action"]["RotateIncrementalLeft"], Definition{
	Name:  "RotateIncrementalLeft",
	Kind:  "constant",
	Short: "```lua\nRotateIncrementalLeft -- Action\n```",
	Long:  "```lua\nRotateIncrementalLeft -- Action\n```\nRotate the targets incrementally, typically counter-clockwise around the scene's Y-axis. Instead of being rotated exclusively around the Y-axis, dice will be rotated to the previous rotation value.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["RotateIncrementalRight"] = append(Definitions["Action"]["RotateIncrementalRight"], Definition{
	Name:  "RotateIncrementalRight",
	Kind:  "constant",
	Short: "```lua\nRotateIncrementalRight -- Action\n```",
	Long:  "```lua\nRotateIncrementalRight -- Action\n```\nRotate the targets incrementally, typically clockwise around the scene's Y-axis. Instead of being rotated exclusively around the Y-axis, dice will be rotated to the next rotation value.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["RotateOver"] = append(Definitions["Action"]["RotateOver"], Definition{
	Name:  "RotateOver",
	Kind:  "constant",
	Short: "```lua\nRotateOver -- Action\n```",
	Long:  "```lua\nRotateOver -- Action\n```\nRotate the targets 180 degrees around the scene's Y-axis.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["Select"] = append(Definitions["Action"]["Select"], Definition{
	Name:  "Select",
	Kind:  "constant",
	Short: "```lua\nSelect -- Action\n```",
	Long:  "```lua\nSelect -- Action\n```\nAdd the targets to the player's selection.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["Action"]["Under"] = append(Definitions["Action"]["Under"], Definition{
	Name:  "Under",
	Kind:  "constant",
	Short: "```lua\nUnder -- Action\n```",
	Long:  "```lua\nUnder -- Action\n```\nMove the targets underneath objects below them on table.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["AssetBundle"]["getLoopingEffectIndex"] = append(Definitions["AssetBundle"]["getLoopingEffectIndex"], Definition{
	Name:  "getLoopingEffectIndex",
	Kind:  "function",
	Short: "```lua\nfunction getLoopingEffectIndex() -- int\n```",
	Long:  "```lua\nfunction getLoopingEffectIndex() -- int\n```\nIndex of the currently looping effect. Indexes starts at 0.\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffectindex",
},
	)
	Definitions["AssetBundle"]["getLoopingEffects"] = append(Definitions["AssetBundle"]["getLoopingEffects"], Definition{
	Name:  "getLoopingEffects",
	Kind:  "function",
	Short: "```lua\nfunction getLoopingEffects() -- table\n```",
	Long:  "```lua\nfunction getLoopingEffects() -- table\n```\nReturns a Table with the keys \"index\" and \"name\" for each looping effect.\n\n\nreturn table: {\n  index: int\n  name: string\n}\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffects",
},
	)
	Definitions["AssetBundle"]["getTriggerEffects"] = append(Definitions["AssetBundle"]["getTriggerEffects"], Definition{
	Name:  "getTriggerEffects",
	Kind:  "function",
	Short: "```lua\nfunction getTriggerEffects() -- table\n```",
	Long:  "```lua\nfunction getTriggerEffects() -- table\n```\nReturns a Table with the keys \"index\" and \"name\" for each trigger effect.\n\n\nreturn table: {\n  index: int\n  name: string\n}\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#gettriggereffects",
},
	)
	Definitions["AssetBundle"]["playLoopingEffect"] = append(Definitions["AssetBundle"]["playLoopingEffect"], Definition{
	Name:  "playLoopingEffect",
	Kind:  "function",
	Short: "```lua\nfunction playLoopingEffect(index) -- bool\n```",
	Long:  "```lua\nfunction playLoopingEffect(index) -- bool\n```\nStarts playing a looping effect. Indexes starts at 0.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#playloopingeffect",
},
	)
	Definitions["AssetBundle"]["playTriggerEffect"] = append(Definitions["AssetBundle"]["playTriggerEffect"], Definition{
	Name:  "playTriggerEffect",
	Kind:  "function",
	Short: "```lua\nfunction playTriggerEffect(index) -- bool\n```",
	Long:  "```lua\nfunction playTriggerEffect(index) -- bool\n```\nStarts playing a trigger effect. Indexes starts at 0.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#playtriggereffect",
},
	)
	Definitions["Backgrounds"]["getBackground"] = append(Definitions["Backgrounds"]["getBackground"], Definition{
	Name:  "getBackground",
	Kind:  "function",
	Short: "```lua\nfunction getBackground() -- string\n```",
	Long:  "```lua\nfunction getBackground() -- string\n```\nReturns the current background name.\n\n\nmore: https://api.tabletopsimulator.com/backgrounds/#getbackground",
},
	)
	Definitions["Backgrounds"]["getCustomURL"] = append(Definitions["Backgrounds"]["getCustomURL"], Definition{
	Name:  "getCustomURL",
	Kind:  "function",
	Short: "```lua\nfunction getCustomURL() -- string\n```",
	Long:  "```lua\nfunction getCustomURL() -- string\n```\nReturns the image URL of the current custom background, or nil if the current background is not custom.\n\n\nmore: https://api.tabletopsimulator.com/backgrounds/#getcustomurl",
},
	)
	Definitions["Backgrounds"]["setBackground"] = append(Definitions["Backgrounds"]["setBackground"], Definition{
	Name:  "setBackground",
	Kind:  "function",
	Short: "```lua\nfunction setBackground(name) -- bool\n```",
	Long:  "```lua\nfunction setBackground(name) -- bool\n```\nReplaces the current background with the background matching the specified name.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/backgrounds/#setbackground",
},
	)
	Definitions["Backgrounds"]["setCustomURL"] = append(Definitions["Backgrounds"]["setCustomURL"], Definition{
	Name:  "setCustomURL",
	Kind:  "function",
	Short: "```lua\nfunction setCustomURL(url) -- bool\n```",
	Long:  "```lua\nfunction setCustomURL(url) -- bool\n```\nReplaces the current background with a custom background loaded from the specified url.\nurl: string\n\n\nmore: https://api.tabletopsimulator.com/backgrounds/#setcustomurl",
},
	)
	Definitions["Book"]["page_offset"] = append(Definitions["Book"]["page_offset"], Definition{
	Name:  "page_offset",
	Kind:  "property",
	Short: "```lua\npage_offset -- int\n```",
	Long:  "```lua\npage_offset -- int\n```\nThe page numbers displayed in the Custom PDF UI are offset by this amount.\n\nmore: https://api.tabletopsimulator.com/behavior/book/",
},
	)
	Definitions["Book"]["clearHighlight"] = append(Definitions["Book"]["clearHighlight"], Definition{
	Name:  "clearHighlight",
	Kind:  "function",
	Short: "```lua\nfunction clearHighlight() -- bool\n```",
	Long:  "```lua\nfunction clearHighlight() -- bool\n```\nClears the current highlight.\n\n\nmore: https://api.tabletopsimulator.com/behavior/book/#clearhighlight",
},
	)
	Definitions["Book"]["getPage"] = append(Definitions["Book"]["getPage"], Definition{
	Name:  "getPage",
	Kind:  "function",
	Short: "```lua\nfunction getPage(use_page_offset) -- int\n```",
	Long:  "```lua\nfunction getPage(use_page_offset) -- int\n```\nGets the current page of the PDF.\nuse_page_offset: bool\n\n\nmore: https://api.tabletopsimulator.com/behavior/book/#getpage",
},
	)
	Definitions["Book"]["setHighlight"] = append(Definitions["Book"]["setHighlight"], Definition{
	Name:  "setHighlight",
	Kind:  "function",
	Short: "```lua\nfunction setHighlight(x1, y1, x2, y2) -- bool\n```",
	Long:  "```lua\nfunction setHighlight(x1, y1, x2, y2) -- bool\n```\nSet highlight box on current page.\nx1: float\ny1: float\nx2: float\ny2: float\n\n\nmore: https://api.tabletopsimulator.com/behavior/book/#sethighlight",
},
	)
	Definitions["Book"]["setPage"] = append(Definitions["Book"]["setPage"], Definition{
	Name:  "setPage",
	Kind:  "function",
	Short: "```lua\nfunction setPage(page, use_page_offset) -- bool\n```",
	Long:  "```lua\nfunction setPage(page, use_page_offset) -- bool\n```\nSet current page.\npage: int\nuse_page_offset: bool\n\n\nmore: https://api.tabletopsimulator.com/behavior/book/#setpage",
},
	)
	Definitions["Browser"]["url"] = append(Definitions["Browser"]["url"], Definition{
	Name:  "url",
	Kind:  "property",
	Short: "```lua\nurl -- string\n```",
	Long:  "```lua\nurl -- string\n```\nURL which currently wants to display.\n\nmore: https://api.tabletopsimulator.com/behavior/browser/#url",
},
	)
	Definitions["Browser"]["pixel_width"] = append(Definitions["Browser"]["pixel_width"], Definition{
	Name:  "pixel_width",
	Kind:  "property",
	Short: "```lua\npixel_width -- int\n```",
	Long:  "```lua\npixel_width -- int\n```\nThe pixel width the browser is virtually rendering to.\n\nmore: https://api.tabletopsimulator.com/behavior/browser/#pixel_width",
},
	)
	Definitions["Clock"]["paused"] = append(Definitions["Clock"]["paused"], Definition{
	Name:  "paused",
	Kind:  "property",
	Short: "```lua\npaused -- bool\n```",
	Long:  "```lua\npaused -- bool\n```\nIf the Clock's timer is paused. Setting this value will pause or resume the timer.\n\nmore: https://api.tabletopsimulator.com/behavior/clock/#paused",
},
	)
	Definitions["Clock"]["getValue"] = append(Definitions["Clock"]["getValue"], Definition{
	Name:  "getValue",
	Kind:  "function",
	Short: "```lua\nfunction getValue() -- int\n```",
	Long:  "```lua\nfunction getValue() -- int\n```\nReturns the current value in stopwatch or timer mode as the number of seconds.\n\n\nmore: https://api.tabletopsimulator.com/behavior/clock/#getvalue",
},
	)
	Definitions["Clock"]["pauseStart"] = append(Definitions["Clock"]["pauseStart"], Definition{
	Name:  "pauseStart",
	Kind:  "function",
	Short: "```lua\nfunction pauseStart() -- bool\n```",
	Long:  "```lua\nfunction pauseStart() -- bool\n```\nToggle function for pausing and resuming a stopwatch or timer on the Clock.\n\n\nmore: https://api.tabletopsimulator.com/behavior/clock/#pausestart",
},
	)
	Definitions["Clock"]["setValue"] = append(Definitions["Clock"]["setValue"], Definition{
	Name:  "setValue",
	Kind:  "function",
	Short: "```lua\nfunction setValue(seconds) -- bool\n```",
	Long:  "```lua\nfunction setValue(seconds) -- bool\n```\nSwitches the clock to timer mode and sets the timer to the given value in seconds.\nseconds: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/clock/#setvalue",
},
	)
	Definitions["Clock"]["startStopwatch"] = append(Definitions["Clock"]["startStopwatch"], Definition{
	Name:  "startStopwatch",
	Kind:  "function",
	Short: "```lua\nfunction startStopwatch() -- bool\n```",
	Long:  "```lua\nfunction startStopwatch() -- bool\n```\nSwitches the Clock to stopwatch mode and begins the stopwatch from 0.\n\n\nmore: https://api.tabletopsimulator.com/behavior/clock/#startstopwatch",
},
	)
	Definitions["Clock"]["showCurrentTime"] = append(Definitions["Clock"]["showCurrentTime"], Definition{
	Name:  "showCurrentTime",
	Kind:  "function",
	Short: "```lua\nfunction showCurrentTime() -- bool\n```",
	Long:  "```lua\nfunction showCurrentTime() -- bool\n```\nSwitches the Clock back to displaying the current time.\n\n\nmore: https://api.tabletopsimulator.com/behavior/clock/#showcurrenttime",
},
	)
	Definitions["Color"]["Black"] = append(Definitions["Color"]["Black"], Definition{
	Name:  "Black",
	Kind:  "constant",
	Short: "```lua\nBlack -- Color\n```",
	Long:  "```lua\nBlack -- Color\n```\nThe Color of the Black player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Blue"] = append(Definitions["Color"]["Blue"], Definition{
	Name:  "Blue",
	Kind:  "constant",
	Short: "```lua\nBlue -- Color\n```",
	Long:  "```lua\nBlue -- Color\n```\nThe Color of the Blue player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Brown"] = append(Definitions["Color"]["Brown"], Definition{
	Name:  "Brown",
	Kind:  "constant",
	Short: "```lua\nBrown -- Color\n```",
	Long:  "```lua\nBrown -- Color\n```\nThe Color of the Brown player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Green"] = append(Definitions["Color"]["Green"], Definition{
	Name:  "Green",
	Kind:  "constant",
	Short: "```lua\nGreen -- Color\n```",
	Long:  "```lua\nGreen -- Color\n```\nThe Color of the Green player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Orange"] = append(Definitions["Color"]["Orange"], Definition{
	Name:  "Orange",
	Kind:  "constant",
	Short: "```lua\nOrange -- Color\n```",
	Long:  "```lua\nOrange -- Color\n```\nThe Color of the Orange player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Pink"] = append(Definitions["Color"]["Pink"], Definition{
	Name:  "Pink",
	Kind:  "constant",
	Short: "```lua\nPink -- Color\n```",
	Long:  "```lua\nPink -- Color\n```\nThe Color of the Pink player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Purple"] = append(Definitions["Color"]["Purple"], Definition{
	Name:  "Purple",
	Kind:  "constant",
	Short: "```lua\nPurple -- Color\n```",
	Long:  "```lua\nPurple -- Color\n```\nThe Color of the Purple player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Red"] = append(Definitions["Color"]["Red"], Definition{
	Name:  "Red",
	Kind:  "constant",
	Short: "```lua\nRed -- Color\n```",
	Long:  "```lua\nRed -- Color\n```\nThe Color of the Red player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Teal"] = append(Definitions["Color"]["Teal"], Definition{
	Name:  "Teal",
	Kind:  "constant",
	Short: "```lua\nTeal -- Color\n```",
	Long:  "```lua\nTeal -- Color\n```\nThe Color of the Teal player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["White"] = append(Definitions["Color"]["White"], Definition{
	Name:  "White",
	Kind:  "constant",
	Short: "```lua\nWhite -- Color\n```",
	Long:  "```lua\nWhite -- Color\n```\nThe Color of the White player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["Yellow"] = append(Definitions["Color"]["Yellow"], Definition{
	Name:  "Yellow",
	Kind:  "constant",
	Short: "```lua\nYellow -- Color\n```",
	Long:  "```lua\nYellow -- Color\n```\nThe Color of the Yellow player.\n\nmore: https://api.tabletopsimulator.com/color/",
},
	)
	Definitions["Color"]["list"] = append(Definitions["Color"]["list"], Definition{
	Name:  "list",
	Kind:  "property",
	Short: "```lua\nlist -- table\n```",
	Long:  "```lua\nlist -- table\n```\ntable of all named colors.\n\nmore: https://api.tabletopsimulator.com/color/#list",
},
	)
	Definitions["Color"]["add"] = append(Definitions["Color"]["add"], Definition{
	Name:  "add",
	Kind:  "function",
	Short: "```lua\nfunction add(name, color) -- bool\n```",
	Long:  "```lua\nfunction add(name, color) -- bool\n```\nAdd a color to the table of all named colors.\nname: string\ncolor: Color\n\n\nmore: https://api.tabletopsimulator.com/color/#add",
},
	)
	Definitions["Color"]["fromHex"] = append(Definitions["Color"]["fromHex"], Definition{
	Name:  "fromHex",
	Kind:  "function",
	Short: "```lua\nfunction fromHex(hex) -- Color\n```",
	Long:  "```lua\nfunction fromHex(hex) -- Color\n```\nReturns a new Color from a given hex string (#RRGGBBAA).  \"#\" and \"AA\" are optional.\nhex: string\n\n\nmore: https://api.tabletopsimulator.com/color/#fromhex",
},
	)
	Definitions["Color"]["fromString"] = append(Definitions["Color"]["fromString"], Definition{
	Name:  "fromString",
	Kind:  "function",
	Short: "```lua\nfunction fromString(player_color) -- Color\n```",
	Long:  "```lua\nfunction fromString(player_color) -- Color\n```\nReturns a new Color from a given player color string (\"Red\", \"White\", etc.).\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/color/#fromstring",
},
	)
	Definitions["Color"]["new"] = append(Definitions["Color"]["new"], Definition{
	Name:  "new",
	Kind:  "function",
	Short: "```lua\nfunction new(r, g, b, a) -- Color\n```",
	Long:  "```lua\nfunction new(r, g, b, a) -- Color\n```\nReturns a new Color.\nr: float\ng: float\nb: float\na: float\n\n\nmore: https://api.tabletopsimulator.com/color/#new",
},
	)
	Definitions["Component"]["game_object"] = append(Definitions["Component"]["game_object"], Definition{
	Name:  "game_object",
	Kind:  "property",
	Short: "```lua\ngame_object -- GameObject\n```",
	Long:  "```lua\ngame_object -- GameObject\n```\nThe GameObject the Component is attached to.\n\nmore: https://api.tabletopsimulator.com/components/component/#game_object",
},
	)
	Definitions["Component"]["name"] = append(Definitions["Component"]["name"], Definition{
	Name:  "name",
	Kind:  "property",
	Short: "```lua\nname -- string\n```",
	Long:  "```lua\nname -- string\n```\nThe name of the GameObject.\n\nmore: https://api.tabletopsimulator.com/components/component/#name",
},
	)
	Definitions["Component"]["get"] = append(Definitions["Component"]["get"], Definition{
	Name:  "get",
	Kind:  "function",
	Short: "```lua\nfunction get(name) -- any\n```",
	Long:  "```lua\nfunction get(name) -- any\n```\nObtains the value of a given Variable on a Component.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/object/component/#get",
},
	)
	Definitions["Component"]["getVars"] = append(Definitions["Component"]["getVars"], Definition{
	Name:  "getVars",
	Kind:  "function",
	Short: "```lua\nfunction getVars() -- table\n```",
	Long:  "```lua\nfunction getVars() -- table\n```\nReturns a table mapping Var names to their type.\n\n\nmore: https://api.tabletopsimulator.com/object/component/#getVars",
},
	)
	Definitions["Component"]["set"] = append(Definitions["Component"]["set"], Definition{
	Name:  "set",
	Kind:  "function",
	Short: "```lua\nfunction set(name, value) -- bool\n```",
	Long:  "```lua\nfunction set(name, value) -- bool\n```\nSets the Var of the specified `name` to the provided `value`.\nname: string\nvalue: any\n\n\nmore: https://api.tabletopsimulator.com/object/component/#set",
},
	)
	Definitions["Container"]["search"] = append(Definitions["Container"]["search"], Definition{
	Name:  "search",
	Kind:  "function",
	Short: "```lua\nfunction search(player, max_cards) -- void\n```",
	Long:  "```lua\nfunction search(player, max_cards) -- void\n```\nActivate search window for player, optionally limited to top N cards\nplayer: Player\nmax_cards: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/container/#search",
},
	)
	Definitions["Counter"]["clear"] = append(Definitions["Counter"]["clear"], Definition{
	Name:  "clear",
	Kind:  "function",
	Short: "```lua\nfunction clear() -- bool\n```",
	Long:  "```lua\nfunction clear() -- bool\n```\nResets the Counter value back to 0.\n\n\nmore: https://api.tabletopsimulator.com/behavior/counter/#clear",
},
	)
	Definitions["Counter"]["decrement"] = append(Definitions["Counter"]["decrement"], Definition{
	Name:  "decrement",
	Kind:  "function",
	Short: "```lua\nfunction decrement() -- bool\n```",
	Long:  "```lua\nfunction decrement() -- bool\n```\nDecrements the Counter's value by 1.\n\n\nmore: https://api.tabletopsimulator.com/behavior/counter/#decrement",
},
	)
	Definitions["Counter"]["getValue"] = append(Definitions["Counter"]["getValue"], Definition{
	Name:  "getValue",
	Kind:  "function",
	Short: "```lua\nfunction getValue() -- int\n```",
	Long:  "```lua\nfunction getValue() -- int\n```\nReturns the current value of the Counter.\n\n\nmore: https://api.tabletopsimulator.com/behavior/counter/#getvalue",
},
	)
	Definitions["Counter"]["increment"] = append(Definitions["Counter"]["increment"], Definition{
	Name:  "increment",
	Kind:  "function",
	Short: "```lua\nfunction increment() -- bool\n```",
	Long:  "```lua\nfunction increment() -- bool\n```\nIncrements the Counter's value by 1.\n\n\nmore: https://api.tabletopsimulator.com/behavior/counter/#increment",
},
	)
	Definitions["Counter"]["setValue"] = append(Definitions["Counter"]["setValue"], Definition{
	Name:  "setValue",
	Kind:  "function",
	Short: "```lua\nfunction setValue(seconds) -- bool\n```",
	Long:  "```lua\nfunction setValue(seconds) -- bool\n```\nSets the current value of the Counter.\nseconds: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/counter/#setvalue",
},
	)
	Definitions["GameObject"]["name"] = append(Definitions["GameObject"]["name"], Definition{
	Name:  "name",
	Kind:  "property",
	Short: "```lua\nname -- string\n```",
	Long:  "```lua\nname -- string\n```\nThe name of the GameObject.\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#name",
},
	)
	Definitions["GameObject"]["getChild"] = append(Definitions["GameObject"]["getChild"], Definition{
	Name:  "getChild",
	Kind:  "function",
	Short: "```lua\nfunction getChild(name) -- GameObject\n```",
	Long:  "```lua\nfunction getChild(name) -- GameObject\n```\nReturns a child GameObject matching the specified name.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getchild",
},
	)
	Definitions["GameObject"]["getChildren"] = append(Definitions["GameObject"]["getChildren"], Definition{
	Name:  "getChildren",
	Kind:  "function",
	Short: "```lua\nfunction getChildren() -- table\n```",
	Long:  "```lua\nfunction getChildren() -- table\n```\nReturns a table of all child GameObjects.\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getchildren",
},
	)
	Definitions["GameObject"]["getComponent"] = append(Definitions["GameObject"]["getComponent"], Definition{
	Name:  "getComponent",
	Kind:  "function",
	Short: "```lua\nfunction getComponent(name) -- Component\n```",
	Long:  "```lua\nfunction getComponent(name) -- Component\n```\nGet the named component of an object.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getcomponent",
},
	)
	Definitions["GameObject"]["getComponentInChildren"] = append(Definitions["GameObject"]["getComponentInChildren"], Definition{
	Name:  "getComponentInChildren",
	Kind:  "function",
	Short: "```lua\nfunction getComponentInChildren(name) -- Component\n```",
	Long:  "```lua\nfunction getComponentInChildren(name) -- Component\n```\nGet the named component of an object or its children.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getcomponentinchildren",
},
	)
	Definitions["GameObject"]["getComponents"] = append(Definitions["GameObject"]["getComponents"], Definition{
	Name:  "getComponents",
	Kind:  "function",
	Short: "```lua\nfunction getComponents(name) -- table\n```",
	Long:  "```lua\nfunction getComponents(name) -- table\n```\nGet all components of an object. `name` is optional.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getcomponents",
},
	)
	Definitions["GameObject"]["getComponentsInChildren"] = append(Definitions["GameObject"]["getComponentsInChildren"], Definition{
	Name:  "getComponentsInChildren",
	Kind:  "function",
	Short: "```lua\nfunction getComponentsInChildren(name) -- table\n```",
	Long:  "```lua\nfunction getComponentsInChildren(name) -- table\n```\nGet all components of an object or its children. `name` is optional.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getcomponentsinchildren",
},
	)
	Definitions["GameObject"]["getMaterials"] = append(Definitions["GameObject"]["getMaterials"], Definition{
	Name:  "getMaterials",
	Kind:  "function",
	Short: "```lua\nfunction getMaterials() -- table\n```",
	Long:  "```lua\nfunction getMaterials() -- table\n```\nGet all materials of an object.\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getmaterials",
},
	)
	Definitions["GameObject"]["getMaterialsInChildren"] = append(Definitions["GameObject"]["getMaterialsInChildren"], Definition{
	Name:  "getMaterialsInChildren",
	Kind:  "function",
	Short: "```lua\nfunction getMaterialsInChildren() -- table\n```",
	Long:  "```lua\nfunction getMaterialsInChildren() -- table\n```\nGet all materials of an object or its children.\n\n\nmore: https://api.tabletopsimulator.com/components/gameobject/#getcomponentsinchildren",
},
	)
	Definitions["Global"]["script_code"] = append(Definitions["Global"]["script_code"], Definition{
	Name:  "script_code",
	Kind:  "property",
	Short: "```lua\nscript_code -- string\n```",
	Long:  "```lua\nscript_code -- string\n```\nReturns the Global Lua script.\n\nmore: https://api.tabletopsimulator.com/object/#script_code",
},
	)
	Definitions["Global"]["script_state"] = append(Definitions["Global"]["script_state"], Definition{
	Name:  "script_state",
	Kind:  "property",
	Short: "```lua\nscript_state -- string\n```",
	Long:  "```lua\nscript_state -- string\n```\nReturns the Global saved Lua script state.\n\nmore: https://api.tabletopsimulator.com/object/#script_state",
},
	)
	Definitions["Global"]["addDecal"] = append(Definitions["Global"]["addDecal"], Definition{
	Name:  "addDecal",
	Kind:  "function",
	Short: "```lua\nfunction addDecal(decal) -- bool\n```",
	Long:  "```lua\nfunction addDecal(decal) -- bool\n```\nAdd a Decal onto the game world.\ndecal: table\n\n\nmore: https://api.tabletopsimulator.com/object/#adddecal",
},
	)
	Definitions["Global"]["call"] = append(Definitions["Global"]["call"], Definition{
	Name:  "call",
	Kind:  "function",
	Short: "```lua\nfunction call(function_name, parameters) -- any\n```",
	Long:  "```lua\nfunction call(function_name, parameters) -- any\n```\nCalls a Lua function owned by the Global Script and passes an optional table as parameters to the function.\nfunction_name: string\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/object/#call",
},
	)
	Definitions["Global"]["getDecals"] = append(Definitions["Global"]["getDecals"], Definition{
	Name:  "getDecals",
	Kind:  "function",
	Short: "```lua\nfunction getDecals() -- table\n```",
	Long:  "```lua\nfunction getDecals() -- table\n```\nReturns a table of sub-tables, each sub-table representing one decal.\n\n\nreturn table: {\n  name: string, (Name of decal)\n  url: string, (Filepath or URL of image)\n  position: Vector, (Position in world)\n  rotation: Vector, (Rotation in world)\n  scale: float, (1 is normal scale)\n}\n\nmore: https://api.tabletopsimulator.com/object/#getdecals",
},
	)
	Definitions["Global"]["getTable"] = append(Definitions["Global"]["getTable"], Definition{
	Name:  "getTable",
	Kind:  "function",
	Short: "```lua\nfunction getTable(table_name) -- table\n```",
	Long:  "```lua\nfunction getTable(table_name) -- table\n```\nGets a Lua table for this Object.\ntable_name: string\n\n\nmore: https://api.tabletopsimulator.com/object/#gettable",
},
	)
	Definitions["Global"]["getVar"] = append(Definitions["Global"]["getVar"], Definition{
	Name:  "getVar",
	Kind:  "function",
	Short: "```lua\nfunction getVar(variable_name) -- any\n```",
	Long:  "```lua\nfunction getVar(variable_name) -- any\n```\nGets a Lua variable for this Object.\nvariable_name: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getvar",
},
	)
	Definitions["Global"]["setDecals"] = append(Definitions["Global"]["setDecals"], Definition{
	Name:  "setDecals",
	Kind:  "function",
	Short: "```lua\nfunction setDecals(decals) -- bool\n```",
	Long:  "```lua\nfunction setDecals(decals) -- bool\n```\nSets which decals are on an object. This removes other decals already present; use an empty table to remove all decals.\ndecals: table\n\n\nmore: https://api.tabletopsimulator.com/object/#setdecals",
},
	)
	Definitions["Global"]["setHideFaceDown"] = append(Definitions["Global"]["setHideFaceDown"], Definition{
	Name:  "setHideFaceDown",
	Kind:  "function",
	Short: "```lua\nfunction setHideFaceDown(hide) -- bool\n```",
	Long:  "```lua\nfunction setHideFaceDown(hide) -- bool\n```\nSets whether face-down objects (which have the relevant property set) will be hidden.\nhide: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#sethidefacedown",
},
	)
	Definitions["Global"]["setLookingForPlayers"] = append(Definitions["Global"]["setLookingForPlayers"], Definition{
	Name:  "setLookingForPlayers",
	Kind:  "function",
	Short: "```lua\nfunction setLookingForPlayers(looking_for_players) -- bool\n```",
	Long:  "```lua\nfunction setLookingForPlayers(looking_for_players) -- bool\n```\nSets whether server will be listed as looking for players in server browser.\nlooking_for_players: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#setlookingforplayers",
},
	)
	Definitions["Global"]["setTable"] = append(Definitions["Global"]["setTable"], Definition{
	Name:  "setTable",
	Kind:  "function",
	Short: "```lua\nfunction setTable(table_name, the_table) -- bool\n```",
	Long:  "```lua\nfunction setTable(table_name, the_table) -- bool\n```\nSets a Lua table for this Object.\ntable_name: string\nthe_table: table\n\n\nmore: https://api.tabletopsimulator.com/object/#settable",
},
	)
	Definitions["Global"]["setVar"] = append(Definitions["Global"]["setVar"], Definition{
	Name:  "setVar",
	Kind:  "function",
	Short: "```lua\nfunction setVar(variable_name, value) -- bool\n```",
	Long:  "```lua\nfunction setVar(variable_name, value) -- bool\n```\nSets a Lua variable for this Object.\nvariable_name: string\nvalue: any\n\n\nmore: https://api.tabletopsimulator.com/object/#setvar",
},
	)
	Definitions["GlobalEvents"]["tryObjectEnterContainer"] = append(Definitions["GlobalEvents"]["tryObjectEnterContainer"], Definition{
	Name:  "tryObjectEnterContainer",
	Kind:  "event",
	Short: "```lua\nfunction tryObjectEnterContainer(container, object) -- bool\n```",
	Long:  "```lua\nfunction tryObjectEnterContainer(container, object) -- bool\n```\nAutomatically called when an Object attempts to enter any container.  If this function returns false the object will not be allowed in.\ncontainer: Object\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#tryobjectentercontainer",
},
	)
	Definitions["GlobalEvents"]["onBlindfold"] = append(Definitions["GlobalEvents"]["onBlindfold"], Definition{
	Name:  "onBlindfold",
	Kind:  "event",
	Short: "```lua\nfunction onBlindfold(player, blindfolded) -- void\n```",
	Long:  "```lua\nfunction onBlindfold(player, blindfolded) -- void\n```\nCalled when a player puts on or takes off their blindfold.\nplayer: Player\nblindfolded: bool\n\n\nmore: https://api.tabletopsimulator.com/events/#onblindfold",
},
	)
	Definitions["GlobalEvents"]["onChat"] = append(Definitions["GlobalEvents"]["onChat"], Definition{
	Name:  "onChat",
	Kind:  "event",
	Short: "```lua\nfunction onChat(message, player) -- void\n```",
	Long:  "```lua\nfunction onChat(message, player) -- void\n```\nThis function is called every time a player sends a chat message.  Return false to cancel that message.\nmessage: string\nplayer: Player\n\n\nmore: https://api.tabletopsimulator.com/events/#onchat",
},
	)
	Definitions["GlobalEvents"]["onExternalMessage"] = append(Definitions["GlobalEvents"]["onExternalMessage"], Definition{
	Name:  "onExternalMessage",
	Kind:  "event",
	Short: "```lua\nfunction onExternalMessage(message) -- bool\n```",
	Long:  "```lua\nfunction onExternalMessage(message) -- bool\n```\nThis function called when a message is received from the External Editor API.\nmessage: table\n\n\nmore: https://api.tabletopsimulator.com/externaleditorapi/",
},
	)
	Definitions["GlobalEvents"]["onFixedUpdate"] = append(Definitions["GlobalEvents"]["onFixedUpdate"], Definition{
	Name:  "onFixedUpdate",
	Kind:  "event",
	Short: "```lua\nfunction onFixedUpdate() -- void\n```",
	Long:  "```lua\nfunction onFixedUpdate() -- void\n```\nThis function is called, if it exists in your script, every physics tick which happens 90 times a second.\n\n\nmore: https://api.tabletopsimulator.com/events/#onfixedupdate",
},
	)
	Definitions["GlobalEvents"]["onLoad"] = append(Definitions["GlobalEvents"]["onLoad"], Definition{
	Name:  "onLoad",
	Kind:  "event",
	Short: "```lua\nfunction onLoad(save_state) -- void\n```",
	Long:  "```lua\nfunction onLoad(save_state) -- void\n```\nAutomatically called when a game save is finished loading every Object.\nsave_state: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onload",
},
	)
	Definitions["GlobalEvents"]["onObjectCollisionEnter"] = append(Definitions["GlobalEvents"]["onObjectCollisionEnter"], Definition{
	Name:  "onObjectCollisionEnter",
	Kind:  "event",
	Short: "```lua\nfunction onObjectCollisionEnter(object, info) -- void\n```",
	Long:  "```lua\nfunction onObjectCollisionEnter(object, info) -- void\n```\nAutomatically called when an Object collides with another Object.\nobject: Object\ninfo: table\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectcollisionenter",
},
	)
	Definitions["GlobalEvents"]["onObjectCollisionStay"] = append(Definitions["GlobalEvents"]["onObjectCollisionStay"], Definition{
	Name:  "onObjectCollisionStay",
	Kind:  "event",
	Short: "```lua\nfunction onObjectCollisionStay(object, info) -- void\n```",
	Long:  "```lua\nfunction onObjectCollisionStay(object, info) -- void\n```\nAutomatically called when an Object is touching another Object.\nobject: Object\ninfo: table\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectcollisionstay",
},
	)
	Definitions["GlobalEvents"]["onObjectCollisionExit"] = append(Definitions["GlobalEvents"]["onObjectCollisionExit"], Definition{
	Name:  "onObjectCollisionExit",
	Kind:  "event",
	Short: "```lua\nfunction onObjectCollisionExit(object, info) -- void\n```",
	Long:  "```lua\nfunction onObjectCollisionExit(object, info) -- void\n```\nAutomatically called when an Object stops touching another Object.\nobject: Object\ninfo: table\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectcollisionexit",
},
	)
	Definitions["GlobalEvents"]["onObjectDestroy"] = append(Definitions["GlobalEvents"]["onObjectDestroy"], Definition{
	Name:  "onObjectDestroy",
	Kind:  "event",
	Short: "```lua\nfunction onObjectDestroy(object) -- void\n```",
	Long:  "```lua\nfunction onObjectDestroy(object) -- void\n```\nAutomatically called when an Object is destroyed.\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectdestroy",
},
	)
	Definitions["GlobalEvents"]["onObjectDrop"] = append(Definitions["GlobalEvents"]["onObjectDrop"], Definition{
	Name:  "onObjectDrop",
	Kind:  "event",
	Short: "```lua\nfunction onObjectDrop(player_color, object) -- void\n```",
	Long:  "```lua\nfunction onObjectDrop(player_color, object) -- void\n```\nAutomatically called when an Object is dropped.\nplayer_color: string\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectdrop",
},
	)
	Definitions["GlobalEvents"]["onObjectEnterContainer"] = append(Definitions["GlobalEvents"]["onObjectEnterContainer"], Definition{
	Name:  "onObjectEnterContainer",
	Kind:  "event",
	Short: "```lua\nfunction onObjectEnterContainer(container, object) -- void\n```",
	Long:  "```lua\nfunction onObjectEnterContainer(container, object) -- void\n```\nAutomatically called when an Object enters any container(Deck, Bag, Chip Stack, etc).\ncontainer: Object\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectentercontainer",
},
	)
	Definitions["GlobalEvents"]["onObjectEnterScriptingZone"] = append(Definitions["GlobalEvents"]["onObjectEnterScriptingZone"], Definition{
	Name:  "onObjectEnterScriptingZone",
	Kind:  "event",
	Short: "```lua\nfunction onObjectEnterScriptingZone(zone, object) -- void\n```",
	Long:  "```lua\nfunction onObjectEnterScriptingZone(zone, object) -- void\n```\nAutomatically called when an Object enters a Scripting Zone.\nzone: Object\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectenterscriptingzone",
},
	)
	Definitions["GlobalEvents"]["onObjectEnterZone"] = append(Definitions["GlobalEvents"]["onObjectEnterZone"], Definition{
	Name:  "onObjectEnterZone",
	Kind:  "event",
	Short: "```lua\nfunction onObjectEnterZone(zone, object) -- void\n```",
	Long:  "```lua\nfunction onObjectEnterZone(zone, object) -- void\n```\nAutomatically called when an Object enters any Zone.\nzone: Object\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectenterzone",
},
	)
	Definitions["GlobalEvents"]["onObjectHover"] = append(Definitions["GlobalEvents"]["onObjectHover"], Definition{
	Name:  "onObjectHover",
	Kind:  "event",
	Short: "```lua\nfunction onObjectHover(player_color, object) -- void\n```",
	Long:  "```lua\nfunction onObjectHover(player_color, object) -- void\n```\nCalled when a player hovers their pointer over an object.\nplayer_color: string\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjecthover",
},
	)
	Definitions["GlobalEvents"]["onObjectLeaveContainer"] = append(Definitions["GlobalEvents"]["onObjectLeaveContainer"], Definition{
	Name:  "onObjectLeaveContainer",
	Kind:  "event",
	Short: "```lua\nfunction onObjectLeaveContainer(container, object) -- void\n```",
	Long:  "```lua\nfunction onObjectLeaveContainer(container, object) -- void\n```\nAutomatically called when an Object leaves any container(Deck, Bag, Chip Stack, etc).\ncontainer: Object\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectleavecontainer",
},
	)
	Definitions["GlobalEvents"]["onObjectLeaveScriptingZone"] = append(Definitions["GlobalEvents"]["onObjectLeaveScriptingZone"], Definition{
	Name:  "onObjectLeaveScriptingZone",
	Kind:  "event",
	Short: "```lua\nfunction onObjectLeaveScriptingZone(zone, object) -- void\n```",
	Long:  "```lua\nfunction onObjectLeaveScriptingZone(zone, object) -- void\n```\nAutomatically called when an Object leaves a Scripting Zone.\nzone: Object\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectleavescriptingzone",
},
	)
	Definitions["GlobalEvents"]["onObjectLeaveZone"] = append(Definitions["GlobalEvents"]["onObjectLeaveZone"], Definition{
	Name:  "onObjectLeaveZone",
	Kind:  "event",
	Short: "```lua\nfunction onObjectLeaveZone(zone, object) -- void\n```",
	Long:  "```lua\nfunction onObjectLeaveZone(zone, object) -- void\n```\nAutomatically called when an Object leaves any Zone.\nzone: Object\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectleavezone",
},
	)
	Definitions["GlobalEvents"]["onObjectLoopingEffect"] = append(Definitions["GlobalEvents"]["onObjectLoopingEffect"], Definition{
	Name:  "onObjectLoopingEffect",
	Kind:  "event",
	Short: "```lua\nfunction onObjectLoopingEffect(object, index) -- void\n```",
	Long:  "```lua\nfunction onObjectLoopingEffect(object, index) -- void\n```\nAutomatically called when an asset Object's loop is started.\nobject: Object\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectloopingeffect",
},
	)
	Definitions["GlobalEvents"]["onObjectNumberTyped"] = append(Definitions["GlobalEvents"]["onObjectNumberTyped"], Definition{
	Name:  "onObjectNumberTyped",
	Kind:  "event",
	Short: "```lua\nfunction onObjectNumberTyped(object, player_color, number_typed) -- void\n```",
	Long:  "```lua\nfunction onObjectNumberTyped(object, player_color, number_typed) -- void\n```\nCalled when a player hovers their pointer over an object and types a number.\nobject: Object\nplayer_color: string\nnumber_typed: int\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectnumbertyped",
},
	)
	Definitions["GlobalEvents"]["onObjectPeek"] = append(Definitions["GlobalEvents"]["onObjectPeek"], Definition{
	Name:  "onObjectPeek",
	Kind:  "event",
	Short: "```lua\nfunction onObjectPeek(object, player_color) -- void\n```",
	Long:  "```lua\nfunction onObjectPeek(object, player_color) -- void\n```\nAutomatically called when an Object is peeked.\nobject: Object\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectpeek",
},
	)
	Definitions["GlobalEvents"]["onObjectPickUp"] = append(Definitions["GlobalEvents"]["onObjectPickUp"], Definition{
	Name:  "onObjectPickUp",
	Kind:  "event",
	Short: "```lua\nfunction onObjectPickUp(player_color, object) -- void\n```",
	Long:  "```lua\nfunction onObjectPickUp(player_color, object) -- void\n```\nAutomatically called when an Object is picked up.\nplayer_color: string\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectpickup",
},
	)
	Definitions["GlobalEvents"]["onObjectRandomize"] = append(Definitions["GlobalEvents"]["onObjectRandomize"], Definition{
	Name:  "onObjectRandomize",
	Kind:  "event",
	Short: "```lua\nfunction onObjectRandomize(object, player_color) -- void\n```",
	Long:  "```lua\nfunction onObjectRandomize(object, player_color) -- void\n```\nAutomatically called when an asset Object is randomized by player_color.\nobject: Object\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectrandomize",
},
	)
	Definitions["GlobalEvents"]["tryObjectRandomize"] = append(Definitions["GlobalEvents"]["tryObjectRandomize"], Definition{
	Name:  "tryObjectRandomize",
	Kind:  "event",
	Short: "```lua\nfunction tryObjectRandomize(object, player_color) -- bool\n```",
	Long:  "```lua\nfunction tryObjectRandomize(object, player_color) -- bool\n```\nCalled when a player attempts to randomize an Object. Return false to prevent the Object being randomized.\nobject: Object\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#tryobjectrandomize",
},
	)
	Definitions["GlobalEvents"]["onObjectRotate"] = append(Definitions["GlobalEvents"]["onObjectRotate"], Definition{
	Name:  "onObjectRotate",
	Kind:  "event",
	Short: "```lua\nfunction onObjectRotate(object, spin, flip, player_color, old_spin, old_flip) -- void\n```",
	Long:  "```lua\nfunction onObjectRotate(object, spin, flip, player_color, old_spin, old_flip) -- void\n```\nAutomatically called after a player rotates an object.\nobject: Object\nspin: float\nflip: float\nplayer_color: string\nold_spin: float\nold_flip: float\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectrotate",
},
	)
	Definitions["GlobalEvents"]["tryObjectRotate"] = append(Definitions["GlobalEvents"]["tryObjectRotate"], Definition{
	Name:  "tryObjectRotate",
	Kind:  "event",
	Short: "```lua\nfunction tryObjectRotate(object, spin, flip, player_color, old_spin, old_flip) -- bool\n```",
	Long:  "```lua\nfunction tryObjectRotate(object, spin, flip, player_color, old_spin, old_flip) -- bool\n```\nAutomatically called when a player attempts to rotate an object.  If this function returns false the rotation will be cancelled.\nobject: Object\nspin: float\nflip: float\nplayer_color: string\nold_spin: float\nold_flip: float\n\n\nmore: https://api.tabletopsimulator.com/events/#tryobjectrotate",
},
	)
	Definitions["GlobalEvents"]["onObjectSearchStart"] = append(Definitions["GlobalEvents"]["onObjectSearchStart"], Definition{
	Name:  "onObjectSearchStart",
	Kind:  "event",
	Short: "```lua\nfunction onObjectSearchStart(object, player_color) -- void\n```",
	Long:  "```lua\nfunction onObjectSearchStart(object, player_color) -- void\n```\nAutomatically called when player_color starts searching asset object.\nobject: Object\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectsearchstart",
},
	)
	Definitions["GlobalEvents"]["onObjectSearchEnd"] = append(Definitions["GlobalEvents"]["onObjectSearchEnd"], Definition{
	Name:  "onObjectSearchEnd",
	Kind:  "event",
	Short: "```lua\nfunction onObjectSearchEnd(object, player_color) -- void\n```",
	Long:  "```lua\nfunction onObjectSearchEnd(object, player_color) -- void\n```\nAutomatically called when player_color stops searching asset object.\nobject: Object\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectsearchend",
},
	)
	Definitions["GlobalEvents"]["onObjectSpawn"] = append(Definitions["GlobalEvents"]["onObjectSpawn"], Definition{
	Name:  "onObjectSpawn",
	Kind:  "event",
	Short: "```lua\nfunction onObjectSpawn(object) -- void\n```",
	Long:  "```lua\nfunction onObjectSpawn(object) -- void\n```\nAutomatically called when an Object is spawned.\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectspawn",
},
	)
	Definitions["GlobalEvents"]["onObjectStateChange"] = append(Definitions["GlobalEvents"]["onObjectStateChange"], Definition{
	Name:  "onObjectStateChange",
	Kind:  "event",
	Short: "```lua\nfunction onObjectStateChange(object, old_guid) -- void\n```",
	Long:  "```lua\nfunction onObjectStateChange(object, old_guid) -- void\n```\nCalled when an object changes state.\nobject: Object\nold_guid: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjectstatechanged",
},
	)
	Definitions["GlobalEvents"]["onObjectTriggerEffect"] = append(Definitions["GlobalEvents"]["onObjectTriggerEffect"], Definition{
	Name:  "onObjectTriggerEffect",
	Kind:  "event",
	Short: "```lua\nfunction onObjectTriggerEffect(object, index) -- void\n```",
	Long:  "```lua\nfunction onObjectTriggerEffect(object, index) -- void\n```\nAutomatically called when an asset Object is triggered.\nobject: Object\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/events/#onobjecttriggereffect",
},
	)
	Definitions["GlobalEvents"]["onPlayerAction"] = append(Definitions["GlobalEvents"]["onPlayerAction"], Definition{
	Name:  "onPlayerAction",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerAction(player, action, targets) -- bool\n```",
	Long:  "```lua\nfunction onPlayerAction(player, action, targets) -- bool\n```\nCalled when a player attempts to perform an action. Return false to prevent the action's default behavior.\nplayer: Player\naction: Action\ntargets: table\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction",
},
	)
	Definitions["GlobalEvents"]["onPlayerChangeColor"] = append(Definitions["GlobalEvents"]["onPlayerChangeColor"], Definition{
	Name:  "onPlayerChangeColor",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerChangeColor(player_color) -- void\n```",
	Long:  "```lua\nfunction onPlayerChangeColor(player_color) -- void\n```\nAutomatically called when a Player changes color.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayerchangecolor",
},
	)
	Definitions["GlobalEvents"]["onPlayerChangeTeam"] = append(Definitions["GlobalEvents"]["onPlayerChangeTeam"], Definition{
	Name:  "onPlayerChangeTeam",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerChangeTeam(player_color, team) -- void\n```",
	Long:  "```lua\nfunction onPlayerChangeTeam(player_color, team) -- void\n```\nAutomatically called when a Player changes team.\nplayer_color: string\nteam: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayerchangeteam",
},
	)
	Definitions["GlobalEvents"]["onPlayerChatTyping"] = append(Definitions["GlobalEvents"]["onPlayerChatTyping"], Definition{
	Name:  "onPlayerChatTyping",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerChatTyping() -- void\n```",
	Long:  "```lua\nfunction onPlayerChatTyping() -- void\n```\nAutomatically called when a Player starts or stops typing.\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayerchattyping",
},
	)
	Definitions["GlobalEvents"]["onPlayerConnect"] = append(Definitions["GlobalEvents"]["onPlayerConnect"], Definition{
	Name:  "onPlayerConnect",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerConnect(player_id) -- void\n```",
	Long:  "```lua\nfunction onPlayerConnect(player_id) -- void\n```\nAutomatically called when a Player connects.\nplayer_id: int\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayerconnect",
},
	)
	Definitions["GlobalEvents"]["onPlayerDisconnect"] = append(Definitions["GlobalEvents"]["onPlayerDisconnect"], Definition{
	Name:  "onPlayerDisconnect",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerDisconnect(player_id) -- void\n```",
	Long:  "```lua\nfunction onPlayerDisconnect(player_id) -- void\n```\nAutomatically called when a Player disconnects.\nplayer_id: int\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayerdisconnect",
},
	)
	Definitions["GlobalEvents"]["onPlayerPing"] = append(Definitions["GlobalEvents"]["onPlayerPing"], Definition{
	Name:  "onPlayerPing",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerPing(player_color, position, object) -- void\n```",
	Long:  "```lua\nfunction onPlayerPing(player_color, position, object) -- void\n```\nAutomatically called when a player pings the table.\nplayer_color: string\nposition: Vector\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayerping",
},
	)
	Definitions["GlobalEvents"]["onPlayerTurn"] = append(Definitions["GlobalEvents"]["onPlayerTurn"], Definition{
	Name:  "onPlayerTurn",
	Kind:  "event",
	Short: "```lua\nfunction onPlayerTurn(next_player, prev_player) -- void\n```",
	Long:  "```lua\nfunction onPlayerTurn(next_player, prev_player) -- void\n```\nAutomatically called at the end of a Player's turn.\nnext_player: Player\nprev_player: Player\n\n\nmore: https://api.tabletopsimulator.com/events/#onplayerturn",
},
	)
	Definitions["GlobalEvents"]["onSave"] = append(Definitions["GlobalEvents"]["onSave"], Definition{
	Name:  "onSave",
	Kind:  "event",
	Short: "```lua\nfunction onSave() -- void\n```",
	Long:  "```lua\nfunction onSave() -- void\n```\nAutomatically called when the game saves (including auto-save for Rewinding).\n\n\nmore: https://api.tabletopsimulator.com/events/#onsave",
},
	)
	Definitions["GlobalEvents"]["onScriptingButtonDown"] = append(Definitions["GlobalEvents"]["onScriptingButtonDown"], Definition{
	Name:  "onScriptingButtonDown",
	Kind:  "event",
	Short: "```lua\nfunction onScriptingButtonDown(index, player_color) -- void\n```",
	Long:  "```lua\nfunction onScriptingButtonDown(index, player_color) -- void\n```\nAutomatically called when a player presses down one of the scripting button hotkeys.\nindex: int\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onscriptingbuttondown",
},
	)
	Definitions["GlobalEvents"]["onScriptingButtonUp"] = append(Definitions["GlobalEvents"]["onScriptingButtonUp"], Definition{
	Name:  "onScriptingButtonUp",
	Kind:  "event",
	Short: "```lua\nfunction onScriptingButtonUp(index, player_color) -- void\n```",
	Long:  "```lua\nfunction onScriptingButtonUp(index, player_color) -- void\n```\nAutomatically called when a player releases one of the scripting button hotkeys.\nindex: int\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onscriptingbuttonup",
},
	)
	Definitions["GlobalEvents"]["onUpdate"] = append(Definitions["GlobalEvents"]["onUpdate"], Definition{
	Name:  "onUpdate",
	Kind:  "event",
	Short: "```lua\nfunction onUpdate() -- void\n```",
	Long:  "```lua\nfunction onUpdate() -- void\n```\nAutomatically called once every frame.\n\n\nmore: https://api.tabletopsimulator.com/events/#onupdate",
},
	)
	Definitions["GlobalEvents"]["onZoneGroupSort"] = append(Definitions["GlobalEvents"]["onZoneGroupSort"], Definition{
	Name:  "onZoneGroupSort",
	Kind:  "event",
	Short: "```lua\nfunction onZoneGroupSort(zone, group, reversed) -- void\n```",
	Long:  "```lua\nfunction onZoneGroupSort(zone, group, reversed) -- void\n```\nCalled when a group is sorted in LayoutZone zone.  Return the table sorted how you want, or false to use the zone's default sort.\nzone: Object\ngroup: table\nreversed: bool\n\n\nmore: https://api.tabletopsimulator.com/events/#onzonegroupsort",
},
	)
	Definitions["Grid"]["type"] = append(Definitions["Grid"]["type"], Definition{
	Name:  "type",
	Kind:  "property",
	Short: "```lua\ntype -- int\n```",
	Long:  "```lua\ntype -- int\n```\nThe type of the grid. 1 = Rectangles, 2 = Horizontal hexes, 3 = Vertical hexes.\n\nmore: https://api.tabletopsimulator.com/grid/#type",
},
	)
	Definitions["Grid"]["show_lines"] = append(Definitions["Grid"]["show_lines"], Definition{
	Name:  "show_lines",
	Kind:  "property",
	Short: "```lua\nshow_lines -- bool\n```",
	Long:  "```lua\nshow_lines -- bool\n```\nVisibility of the grid lines.\n\nmore: https://api.tabletopsimulator.com/grid/#show_lines",
},
	)
	Definitions["Grid"]["color"] = append(Definitions["Grid"]["color"], Definition{
	Name:  "color",
	Kind:  "property",
	Short: "```lua\ncolor -- Color\n```",
	Long:  "```lua\ncolor -- Color\n```\nColor of the grid lines.\n\nmore: https://api.tabletopsimulator.com/grid/#color",
},
	)
	Definitions["Grid"]["opacity"] = append(Definitions["Grid"]["opacity"], Definition{
	Name:  "opacity",
	Kind:  "property",
	Short: "```lua\nopacity -- float\n```",
	Long:  "```lua\nopacity -- float\n```\nOpacity of the grid lines.\n\nmore: https://api.tabletopsimulator.com/grid/#opacity",
},
	)
	Definitions["Grid"]["thick_lines"] = append(Definitions["Grid"]["thick_lines"], Definition{
	Name:  "thick_lines",
	Kind:  "property",
	Short: "```lua\nthick_lines -- bool\n```",
	Long:  "```lua\nthick_lines -- bool\n```\nThickness of the grid lines. false = Thin, true = Thick.\n\nmore: https://api.tabletopsimulator.com/grid/#thick_lines",
},
	)
	Definitions["Grid"]["snapping"] = append(Definitions["Grid"]["snapping"], Definition{
	Name:  "snapping",
	Kind:  "property",
	Short: "```lua\nsnapping -- int\n```",
	Long:  "```lua\nsnapping -- int\n```\nMethod of snapping objects to the grid. 1 = Off, 2 = Lines, 3 = Center, 4 = Both.\n\nmore: https://api.tabletopsimulator.com/grid/#snapping",
},
	)
	Definitions["Grid"]["offsetX"] = append(Definitions["Grid"]["offsetX"], Definition{
	Name:  "offsetX",
	Kind:  "property",
	Short: "```lua\noffsetX -- float\n```",
	Long:  "```lua\noffsetX -- float\n```\nX offset of the grid origin.\n\nmore: https://api.tabletopsimulator.com/grid/#offsetx",
},
	)
	Definitions["Grid"]["offsetY"] = append(Definitions["Grid"]["offsetY"], Definition{
	Name:  "offsetY",
	Kind:  "property",
	Short: "```lua\noffsetY -- float\n```",
	Long:  "```lua\noffsetY -- float\n```\nY offset of the grid origin.\n\nmore: https://api.tabletopsimulator.com/grid/#offsety",
},
	)
	Definitions["Grid"]["sizeX"] = append(Definitions["Grid"]["sizeX"], Definition{
	Name:  "sizeX",
	Kind:  "property",
	Short: "```lua\nsizeX -- float\n```",
	Long:  "```lua\nsizeX -- float\n```\nWidth of the grid cells.\n\nmore: https://api.tabletopsimulator.com/grid/#sizex",
},
	)
	Definitions["Grid"]["sizeY"] = append(Definitions["Grid"]["sizeY"], Definition{
	Name:  "sizeY",
	Kind:  "property",
	Short: "```lua\nsizeY -- float\n```",
	Long:  "```lua\nsizeY -- float\n```\nHeight of the grid cells.\n\nmore: https://api.tabletopsimulator.com/grid/#sizey",
},
	)
	Definitions["Hands"]["enable"] = append(Definitions["Hands"]["enable"], Definition{
	Name:  "enable",
	Kind:  "property",
	Short: "```lua\nenable -- bool\n```",
	Long:  "```lua\nenable -- bool\n```\nWhether hand zones are enabled i.e. hold objects.\n\nmore: https://api.tabletopsimulator.com/hands/#enable",
},
	)
	Definitions["Hands"]["disable_unused"] = append(Definitions["Hands"]["disable_unused"], Definition{
	Name:  "disable_unused",
	Kind:  "property",
	Short: "```lua\ndisable_unused -- bool\n```",
	Long:  "```lua\ndisable_unused -- bool\n```\nWhether hands zones belonging to a color without a seated player should be disabled.\n\nmore: https://api.tabletopsimulator.com/hands/#disable_unused",
},
	)
	Definitions["Hands"]["hiding"] = append(Definitions["Hands"]["hiding"], Definition{
	Name:  "hiding",
	Kind:  "property",
	Short: "```lua\nhiding -- int\n```",
	Long:  "```lua\nhiding -- int\n```\nDetermines which hand contents are hidden from which players.\n\nmore: https://api.tabletopsimulator.com/hands/#hiding",
},
	)
	Definitions["Hands"]["getHands"] = append(Definitions["Hands"]["getHands"], Definition{
	Name:  "getHands",
	Kind:  "function",
	Short: "```lua\nfunction getHands() -- table\n```",
	Long:  "```lua\nfunction getHands() -- table\n```\nReturns a table of all Hand Zone Objects in the game.\n\n\nmore: https://api.tabletopsimulator.com/hands/#gethands",
},
	)
	Definitions["Info"]["complexity"] = append(Definitions["Info"]["complexity"], Definition{
	Name:  "complexity",
	Kind:  "property",
	Short: "```lua\ncomplexity -- string\n```",
	Long:  "```lua\ncomplexity -- string\n```\nThe complexity of the current game/mod.\n\nmore: https://api.tabletopsimulator.com/info/#complexity",
},
	)
	Definitions["Info"]["name"] = append(Definitions["Info"]["name"], Definition{
	Name:  "name",
	Kind:  "property",
	Short: "```lua\nname -- string\n```",
	Long:  "```lua\nname -- string\n```\nName of the current game/mod.\n\nmore: https://api.tabletopsimulator.com/info/#name",
},
	)
	Definitions["Info"]["number_of_players"] = append(Definitions["Info"]["number_of_players"], Definition{
	Name:  "number_of_players",
	Kind:  "property",
	Short: "```lua\nnumber_of_players -- table\n```",
	Long:  "```lua\nnumber_of_players -- table\n```\nThe number of players the current game/mod allows.\n\nmore: https://api.tabletopsimulator.com/info/#number_of_players",
},
	)
	Definitions["Info"]["playing_time"] = append(Definitions["Info"]["playing_time"], Definition{
	Name:  "playing_time",
	Kind:  "property",
	Short: "```lua\nplaying_time -- table\n```",
	Long:  "```lua\nplaying_time -- table\n```\nThe amount of time the current game/mod takes.\n\nmore: https://api.tabletopsimulator.com/info/#playing_time",
},
	)
	Definitions["Info"]["tags"] = append(Definitions["Info"]["tags"], Definition{
	Name:  "tags",
	Kind:  "property",
	Short: "```lua\ntags -- table\n```",
	Long:  "```lua\ntags -- table\n```\nThe tags associated with the current game/mod.\n\nmore: https://api.tabletopsimulator.com/info/#tags",
},
	)
	Definitions["Info"]["type"] = append(Definitions["Info"]["type"], Definition{
	Name:  "type",
	Kind:  "property",
	Short: "```lua\ntype -- string\n```",
	Long:  "```lua\ntype -- string\n```\nThe category of the current mod.\n\nmore: https://api.tabletopsimulator.com/info/#type",
},
	)
	Definitions["JSON"]["decode"] = append(Definitions["JSON"]["decode"], Definition{
	Name:  "decode",
	Kind:  "function",
	Short: "```lua\nfunction decode(json_string) -- any\n```",
	Long:  "```lua\nfunction decode(json_string) -- any\n```\nDecodes a valid JSON string into a Lua string, number, or table.\njson_string: string\n\n\nmore: https://api.tabletopsimulator.com/json/#decode",
},
	)
	Definitions["JSON"]["encode"] = append(Definitions["JSON"]["encode"], Definition{
	Name:  "encode",
	Kind:  "function",
	Short: "```lua\nfunction encode(variable) -- string\n```",
	Long:  "```lua\nfunction encode(variable) -- string\n```\nEncodes a Lua string, number, or table into a valid JSON string. This will not work with Object references.\nvariable: any\n\n\nmore: https://api.tabletopsimulator.com/json/#encode",
},
	)
	Definitions["JSON"]["encode_pretty"] = append(Definitions["JSON"]["encode_pretty"], Definition{
	Name:  "encode_pretty",
	Kind:  "function",
	Short: "```lua\nfunction encode_pretty(variable) -- string\n```",
	Long:  "```lua\nfunction encode_pretty(variable) -- string\n```\nEncodes a Lua string, number, or table into a valid JSON string formatted with indents (Human readable). This will not work with Object references.\nvariable: any\n\n\nmore: https://api.tabletopsimulator.com/json/#encode_pretty",
},
	)
	Definitions["LayoutZone"]["getOptions"] = append(Definitions["LayoutZone"]["getOptions"], Definition{
	Name:  "getOptions",
	Kind:  "function",
	Short: "```lua\nfunction getOptions() -- table\n```",
	Long:  "```lua\nfunction getOptions() -- table\n```\nReturns the LayoutZone options.\n\n\nmore: https://api.tabletopsimulator.com/behavior/layoutzone/#getoptions",
},
	)
	Definitions["LayoutZone"]["layout"] = append(Definitions["LayoutZone"]["layout"], Definition{
	Name:  "layout",
	Kind:  "function",
	Short: "```lua\nfunction layout() -- bool\n```",
	Long:  "```lua\nfunction layout() -- bool\n```\nLays out the zone.\n\n\nmore: https://api.tabletopsimulator.com/behavior/layoutzone/#layout",
},
	)
	Definitions["LayoutZone"]["setOptions"] = append(Definitions["LayoutZone"]["setOptions"], Definition{
	Name:  "setOptions",
	Kind:  "function",
	Short: "```lua\nfunction setOptions(options) -- table\n```",
	Long:  "```lua\nfunction setOptions(options) -- table\n```\nSets the LayoutZone options.\noptions: table\n\n\nmore: https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions",
},
	)
	Definitions["Lighting"]["ambient_type"] = append(Definitions["Lighting"]["ambient_type"], Definition{
	Name:  "ambient_type",
	Kind:  "property",
	Short: "```lua\nambient_type -- int\n```",
	Long:  "```lua\nambient_type -- int\n```\nThe source of the ambient light. 1 = Background, 2 = Gradient.\n\nmore: https://api.tabletopsimulator.com/lighting/#ambient_type",
},
	)
	Definitions["Lighting"]["ambient_intensity"] = append(Definitions["Lighting"]["ambient_intensity"], Definition{
	Name:  "ambient_intensity",
	Kind:  "property",
	Short: "```lua\nambient_intensity -- float\n```",
	Long:  "```lua\nambient_intensity -- float\n```\nThe strength of the ambient light either from the background or gradient. Range is 0-4.\n\nmore: https://api.tabletopsimulator.com/lighting/#ambient_intensity",
},
	)
	Definitions["Lighting"]["light_intensity"] = append(Definitions["Lighting"]["light_intensity"], Definition{
	Name:  "light_intensity",
	Kind:  "property",
	Short: "```lua\nlight_intensity -- float\n```",
	Long:  "```lua\nlight_intensity -- float\n```\nThe strength of the directional light shining down in the scene. Range is 0-4.\n\nmore: https://api.tabletopsimulator.com/lighting/#light_intensity",
},
	)
	Definitions["Lighting"]["lut_contribution"] = append(Definitions["Lighting"]["lut_contribution"], Definition{
	Name:  "lut_contribution",
	Kind:  "property",
	Short: "```lua\nlut_contribution -- float\n```",
	Long:  "```lua\nlut_contribution -- float\n```\nHow much the LUT contributes to the light.\n\nmore: https://api.tabletopsimulator.com/lighting/#lut_contribution",
},
	)
	Definitions["Lighting"]["lut_index"] = append(Definitions["Lighting"]["lut_index"], Definition{
	Name:  "lut_index",
	Kind:  "property",
	Short: "```lua\nlut_index -- int\n```",
	Long:  "```lua\nlut_index -- int\n```\nThe LUT index of the light.\n\nmore: https://api.tabletopsimulator.com/lighting/#lut_index",
},
	)
	Definitions["Lighting"]["lut_url"] = append(Definitions["Lighting"]["lut_url"], Definition{
	Name:  "lut_url",
	Kind:  "property",
	Short: "```lua\nlut_url -- string\n```",
	Long:  "```lua\nlut_url -- string\n```\nThe LUT URL for the light.\n\nmore: https://api.tabletopsimulator.com/lighting/#lut_url",
},
	)
	Definitions["Lighting"]["reflection_intensity"] = append(Definitions["Lighting"]["reflection_intensity"], Definition{
	Name:  "reflection_intensity",
	Kind:  "property",
	Short: "```lua\nreflection_intensity -- float\n```",
	Long:  "```lua\nreflection_intensity -- float\n```\nThe strength of the reflections from the background. Range is 0-1.\n\nmore: https://api.tabletopsimulator.com/lighting/#reflection_intensity",
},
	)
	Definitions["Lighting"]["apply"] = append(Definitions["Lighting"]["apply"], Definition{
	Name:  "apply",
	Kind:  "function",
	Short: "```lua\nfunction apply() -- bool\n```",
	Long:  "```lua\nfunction apply() -- bool\n```\nApplies all changed made to the Lighting class. This must be called for these changes to take affect.\n\n\nmore: https://api.tabletopsimulator.com/lighting/#apply",
},
	)
	Definitions["Lighting"]["getAmbientEquatorColor"] = append(Definitions["Lighting"]["getAmbientEquatorColor"], Definition{
	Name:  "getAmbientEquatorColor",
	Kind:  "function",
	Short: "```lua\nfunction getAmbientEquatorColor() -- Color\n```",
	Long:  "```lua\nfunction getAmbientEquatorColor() -- Color\n```\nReturns the Color of the gradient equator.\n\n\nmore: https://api.tabletopsimulator.com/lighting/#getambientequatorcolor",
},
	)
	Definitions["Lighting"]["getAmbientGroundColor"] = append(Definitions["Lighting"]["getAmbientGroundColor"], Definition{
	Name:  "getAmbientGroundColor",
	Kind:  "function",
	Short: "```lua\nfunction getAmbientGroundColor() -- Color\n```",
	Long:  "```lua\nfunction getAmbientGroundColor() -- Color\n```\nReturns the Color of the gradient ground.\n\n\nmore: https://api.tabletopsimulator.com/lighting/#getambientgroundcolor",
},
	)
	Definitions["Lighting"]["getAmbientSkyColor"] = append(Definitions["Lighting"]["getAmbientSkyColor"], Definition{
	Name:  "getAmbientSkyColor",
	Kind:  "function",
	Short: "```lua\nfunction getAmbientSkyColor() -- Color\n```",
	Long:  "```lua\nfunction getAmbientSkyColor() -- Color\n```\nReturns the Color of the gradient sky.\n\n\nmore: https://api.tabletopsimulator.com/lighting/#getambientskycolor",
},
	)
	Definitions["Lighting"]["getLightColor"] = append(Definitions["Lighting"]["getLightColor"], Definition{
	Name:  "getLightColor",
	Kind:  "function",
	Short: "```lua\nfunction getLightColor() -- Color\n```",
	Long:  "```lua\nfunction getLightColor() -- Color\n```\nReturns the Color of the directional light.\n\n\nmore: https://api.tabletopsimulator.com/lighting/#getlightcolor",
},
	)
	Definitions["Lighting"]["setAmbientEquatorColor"] = append(Definitions["Lighting"]["setAmbientEquatorColor"], Definition{
	Name:  "setAmbientEquatorColor",
	Kind:  "function",
	Short: "```lua\nfunction setAmbientEquatorColor(color) -- bool\n```",
	Long:  "```lua\nfunction setAmbientEquatorColor(color) -- bool\n```\nSets the Color of the gradient equator.\ncolor: Color\n\n\nmore: https://api.tabletopsimulator.com/lighting/#setambientequatorcolor",
},
	)
	Definitions["Lighting"]["setAmbientGroundColor"] = append(Definitions["Lighting"]["setAmbientGroundColor"], Definition{
	Name:  "setAmbientGroundColor",
	Kind:  "function",
	Short: "```lua\nfunction setAmbientGroundColor(color) -- bool\n```",
	Long:  "```lua\nfunction setAmbientGroundColor(color) -- bool\n```\nSets the Color of the ambient ground.\ncolor: Color\n\n\nmore: https://api.tabletopsimulator.com/lighting/#setambientgroundcolor",
},
	)
	Definitions["Lighting"]["setAmbientSkyColor"] = append(Definitions["Lighting"]["setAmbientSkyColor"], Definition{
	Name:  "setAmbientSkyColor",
	Kind:  "function",
	Short: "```lua\nfunction setAmbientSkyColor(color) -- bool\n```",
	Long:  "```lua\nfunction setAmbientSkyColor(color) -- bool\n```\nSets the Color of the gradient sky.\ncolor: Color\n\n\nmore: https://api.tabletopsimulator.com/lighting/#setambientskycolor",
},
	)
	Definitions["Lighting"]["setLightColor"] = append(Definitions["Lighting"]["setLightColor"], Definition{
	Name:  "setLightColor",
	Kind:  "function",
	Short: "```lua\nfunction setLightColor(color) -- bool\n```",
	Long:  "```lua\nfunction setLightColor(color) -- bool\n```\nSets the Color of the directional light.\ncolor: Color\n\n\nmore: https://api.tabletopsimulator.com/lighting/#setlightcolor",
},
	)
	Definitions["Material"]["game_object"] = append(Definitions["Material"]["game_object"], Definition{
	Name:  "game_object",
	Kind:  "property",
	Short: "```lua\ngame_object -- GameObject\n```",
	Long:  "```lua\ngame_object -- GameObject\n```\nThe GameObject the Material is attached to.\n\nmore: https://api.tabletopsimulator.com/components/material/#game_object",
},
	)
	Definitions["Material"]["shader"] = append(Definitions["Material"]["shader"], Definition{
	Name:  "shader",
	Kind:  "property",
	Short: "```lua\nshader -- string\n```",
	Long:  "```lua\nshader -- string\n```\nThe name of the Shader used by the Material.\n\nmore: https://api.tabletopsimulator.com/components/material/#shader",
},
	)
	Definitions["Material"]["get"] = append(Definitions["Material"]["get"], Definition{
	Name:  "get",
	Kind:  "function",
	Short: "```lua\nfunction get(name) -- any\n```",
	Long:  "```lua\nfunction get(name) -- any\n```\nObtains the value of a given Variable on the Material.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/components/material/#get",
},
	)
	Definitions["Material"]["getVars"] = append(Definitions["Material"]["getVars"], Definition{
	Name:  "getVars",
	Kind:  "function",
	Short: "```lua\nfunction getVars() -- table\n```",
	Long:  "```lua\nfunction getVars() -- table\n```\nReturns a table mapping Var names to their type.\n\n\nmore: https://api.tabletopsimulator.com/components/material/#getVars",
},
	)
	Definitions["Material"]["set"] = append(Definitions["Material"]["set"], Definition{
	Name:  "set",
	Kind:  "function",
	Short: "```lua\nfunction set(name, value) -- bool\n```",
	Long:  "```lua\nfunction set(name, value) -- bool\n```\nSets the Var of the specified `name` to the provided `value`.\nname: string\nvalue: any\n\n\nmore: https://api.tabletopsimulator.com/components/material/#set",
},
	)
	Definitions["MusicPlayer"]["repeat_track"] = append(Definitions["MusicPlayer"]["repeat_track"], Definition{
	Name:  "repeat_track",
	Kind:  "property",
	Short: "```lua\nrepeat_track -- bool\n```",
	Long:  "```lua\nrepeat_track -- bool\n```\nIf the current audio clip should be repeated.\n\nmore: https://api.tabletopsimulator.com/musicplayer/#repeattrack",
},
	)
	Definitions["MusicPlayer"]["shuffle"] = append(Definitions["MusicPlayer"]["shuffle"], Definition{
	Name:  "shuffle",
	Kind:  "property",
	Short: "```lua\nshuffle -- bool\n```",
	Long:  "```lua\nshuffle -- bool\n```\nIf the playlist should be shuffled.\n\nmore: https://api.tabletopsimulator.com/musicplayer/#shuffle",
},
	)
	Definitions["MusicPlayer"]["playlistIndex"] = append(Definitions["MusicPlayer"]["playlistIndex"], Definition{
	Name:  "playlistIndex",
	Kind:  "property",
	Short: "```lua\nplaylistIndex -- int\n```",
	Long:  "```lua\nplaylistIndex -- int\n```\nCurrent index of the playlist, or -1 if nothing is playing.\n\nmore: https://api.tabletopsimulator.com/musicplayer/#playlistindex",
},
	)
	Definitions["MusicPlayer"]["loaded"] = append(Definitions["MusicPlayer"]["loaded"], Definition{
	Name:  "loaded",
	Kind:  "property",
	Short: "```lua\nloaded -- bool\n```",
	Long:  "```lua\nloaded -- bool\n```\nIf the all the players have loaded the current audio clip.\n\nmore: https://api.tabletopsimulator.com/musicplayer/#loaded",
},
	)
	Definitions["MusicPlayer"]["player_status"] = append(Definitions["MusicPlayer"]["player_status"], Definition{
	Name:  "player_status",
	Kind:  "property",
	Short: "```lua\nplayer_status -- string\n```",
	Long:  "```lua\nplayer_status -- string\n```\nStatus of the music player, one of: \"Stop\", \"Play\", \"Loading\", \"Ready\".\n\nmore: https://api.tabletopsimulator.com/musicplayer/#playerstatus",
},
	)
	Definitions["MusicPlayer"]["play"] = append(Definitions["MusicPlayer"]["play"], Definition{
	Name:  "play",
	Kind:  "function",
	Short: "```lua\nfunction play() -- bool\n```",
	Long:  "```lua\nfunction play() -- bool\n```\nPlays currently loaded audioclip. Returns true if the music player is playing, otherwise returns false.\n\n\nmore: https://api.tabletopsimulator.com/musicplayer/#play",
},
	)
	Definitions["MusicPlayer"]["pause"] = append(Definitions["MusicPlayer"]["pause"], Definition{
	Name:  "pause",
	Kind:  "function",
	Short: "```lua\nfunction pause() -- bool\n```",
	Long:  "```lua\nfunction pause() -- bool\n```\nPauses currently playing audioclip. Returns true if the music player is paused, otherwise returns false.\n\n\nmore: https://api.tabletopsimulator.com/musicplayer/#pause",
},
	)
	Definitions["MusicPlayer"]["skipForward"] = append(Definitions["MusicPlayer"]["skipForward"], Definition{
	Name:  "skipForward",
	Kind:  "function",
	Short: "```lua\nfunction skipForward() -- bool\n```",
	Long:  "```lua\nfunction skipForward() -- bool\n```\nSkips to the next audioclip in playlist if possible. Returns true if skip was successful, otherwise returns false.\n\n\nmore: https://api.tabletopsimulator.com/musicplayer/#skipforward",
},
	)
	Definitions["MusicPlayer"]["skipBackward"] = append(Definitions["MusicPlayer"]["skipBackward"], Definition{
	Name:  "skipBackward",
	Kind:  "function",
	Short: "```lua\nfunction skipBackward() -- bool\n```",
	Long:  "```lua\nfunction skipBackward() -- bool\n```\nSkips to the previous audioclip in playlist if possible. Returns true if skip was successful, otherwise returns false.\n\n\nmore: https://api.tabletopsimulator.com/musicplayer/#skipbackward",
},
	)
	Definitions["MusicPlayer"]["getCurrentAudioClip"] = append(Definitions["MusicPlayer"]["getCurrentAudioClip"], Definition{
	Name:  "getCurrentAudioClip",
	Kind:  "function",
	Short: "```lua\nfunction getCurrentAudioClip() -- table\n```",
	Long:  "```lua\nfunction getCurrentAudioClip() -- table\n```\nReturns a table of URL and Title for the currently loaded audio clip.\n\n\nmore: https://api.tabletopsimulator.com/musicplayer/#getcurrentaudioclip",
},
	)
	Definitions["MusicPlayer"]["setCurrentAudioClip"] = append(Definitions["MusicPlayer"]["setCurrentAudioClip"], Definition{
	Name:  "setCurrentAudioClip",
	Kind:  "function",
	Short: "```lua\nfunction setCurrentAudioClip(clip) -- bool\n```",
	Long:  "```lua\nfunction setCurrentAudioClip(clip) -- bool\n```\nSets the audio clip to load.\nclip: table\n\n\nmore: https://api.tabletopsimulator.com/musicplayer/#setcurrentaudioclip",
},
	)
	Definitions["MusicPlayer"]["getPlaylist"] = append(Definitions["MusicPlayer"]["getPlaylist"], Definition{
	Name:  "getPlaylist",
	Kind:  "function",
	Short: "```lua\nfunction getPlaylist() -- table\n```",
	Long:  "```lua\nfunction getPlaylist() -- table\n```\nReturns a table of tables (URL and Title) for the current playlist.\n\n\nreturn table: {\n  url: string\n  title: string\n}\n\nmore: https://api.tabletopsimulator.com/musicplayer/#getplaylist",
},
	)
	Definitions["MusicPlayer"]["setPlaylist"] = append(Definitions["MusicPlayer"]["setPlaylist"], Definition{
	Name:  "setPlaylist",
	Kind:  "function",
	Short: "```lua\nfunction setPlaylist(playlist) -- bool\n```",
	Long:  "```lua\nfunction setPlaylist(playlist) -- bool\n```\nSets the current playlist.\nplaylist: table\n\n\nmore: https://api.tabletopsimulator.com/musicplayer/#setplaylist",
},
	)
	Definitions["Notes"]["addNotebookTab"] = append(Definitions["Notes"]["addNotebookTab"], Definition{
	Name:  "addNotebookTab",
	Kind:  "function",
	Short: "```lua\nfunction addNotebookTab(tab) -- int\n```",
	Long:  "```lua\nfunction addNotebookTab(tab) -- int\n```\nAdds a new Tab to the Notebook and returns the index of the newly added Tab.\ntab: table\n\n\nmore: https://api.tabletopsimulator.com/base/#addnotebooktab",
},
	)
	Definitions["Notes"]["editNotebookTab"] = append(Definitions["Notes"]["editNotebookTab"], Definition{
	Name:  "editNotebookTab",
	Kind:  "function",
	Short: "```lua\nfunction editNotebookTab(tab) -- bool\n```",
	Long:  "```lua\nfunction editNotebookTab(tab) -- bool\n```\nEdits an existing Tab on the Notebook.\ntab: table\n\n\nmore: https://api.tabletopsimulator.com/base/#editnotebooktab",
},
	)
	Definitions["Notes"]["getNotebookTabs"] = append(Definitions["Notes"]["getNotebookTabs"], Definition{
	Name:  "getNotebookTabs",
	Kind:  "function",
	Short: "```lua\nfunction getNotebookTabs() -- table\n```",
	Long:  "```lua\nfunction getNotebookTabs() -- table\n```\nReturns a table of tables of all of the Tabs in the Notebook.\n\n\nreturn table: {\n  index: int\n  title: string\n  body: string\n  color: string\n}\n\nmore: https://api.tabletopsimulator.com/base/#getnotebooktabs",
},
	)
	Definitions["Notes"]["getNotes"] = append(Definitions["Notes"]["getNotes"], Definition{
	Name:  "getNotes",
	Kind:  "function",
	Short: "```lua\nfunction getNotes() -- string\n```",
	Long:  "```lua\nfunction getNotes() -- string\n```\nReturns the current on-screen notes as a string.\n\n\nmore: https://api.tabletopsimulator.com/base/#getnotes",
},
	)
	Definitions["Notes"]["removeNotebookTab"] = append(Definitions["Notes"]["removeNotebookTab"], Definition{
	Name:  "removeNotebookTab",
	Kind:  "function",
	Short: "```lua\nfunction removeNotebookTab(index) -- bool\n```",
	Long:  "```lua\nfunction removeNotebookTab(index) -- bool\n```\nRemoves a Tab from the Notebook at a given index.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/base/#removenotebooktab",
},
	)
	Definitions["Notes"]["setNotes"] = append(Definitions["Notes"]["setNotes"], Definition{
	Name:  "setNotes",
	Kind:  "function",
	Short: "```lua\nfunction setNotes(notes) -- bool\n```",
	Long:  "```lua\nfunction setNotes(notes) -- bool\n```\nSets the current on-screen notes. BBCOde is allowed for styling.\nnotes: string\n\n\nmore: https://api.tabletopsimulator.com/base/#setnotes",
},
	)
	Definitions["Object"]["alt_view_angle"] = append(Definitions["Object"]["alt_view_angle"], Definition{
	Name:  "alt_view_angle",
	Kind:  "property",
	Short: "```lua\nalt_view_angle -- Vector\n```",
	Long:  "```lua\nalt_view_angle -- Vector\n```\nWhen non-zero, the Alt view will use the specified Euler angle to look at the object.\n\nmore: https://api.tabletopsimulator.com/object/#alt_view_angle",
},
	)
	Definitions["Object"]["angular_drag"] = append(Definitions["Object"]["angular_drag"], Definition{
	Name:  "angular_drag",
	Kind:  "property",
	Short: "```lua\nangular_drag -- float\n```",
	Long:  "```lua\nangular_drag -- float\n```\nThe Object's angular drag.\n\nmore: https://api.tabletopsimulator.com/object/#angular_drag",
},
	)
	Definitions["Object"]["AssetBundle"] = append(Definitions["Object"]["AssetBundle"], Definition{
	Name:  "AssetBundle",
	Kind:  "property",
	Short: "```lua\nAssetBundle -- AssetBundle\n```",
	Long:  "```lua\nAssetBundle -- AssetBundle\n```\nA reference to the AssetBundle class attached to this Object, or nil. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#assetbundle",
},
	)
	Definitions["Object"]["auto_raise"] = append(Definitions["Object"]["auto_raise"], Definition{
	Name:  "auto_raise",
	Kind:  "property",
	Short: "```lua\nauto_raise -- bool\n```",
	Long:  "```lua\nauto_raise -- bool\n```\nShould this Object automatically raise above other Objects when held?\n\nmore: https://api.tabletopsimulator.com/object/#auto_raise",
},
	)
	Definitions["Object"]["bounciness"] = append(Definitions["Object"]["bounciness"], Definition{
	Name:  "bounciness",
	Kind:  "property",
	Short: "```lua\nbounciness -- float\n```",
	Long:  "```lua\nbounciness -- float\n```\nThe Object's bounciness.\n\nmore: https://api.tabletopsimulator.com/object/#bounciness",
},
	)
	Definitions["Object"]["Clock"] = append(Definitions["Object"]["Clock"], Definition{
	Name:  "Clock",
	Kind:  "property",
	Short: "```lua\nClock -- Clock\n```",
	Long:  "```lua\nClock -- Clock\n```\nA reference to the Clock class attached to this Object. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#clock",
},
	)
	Definitions["Object"]["Counter"] = append(Definitions["Object"]["Counter"], Definition{
	Name:  "Counter",
	Kind:  "property",
	Short: "```lua\nCounter -- Counter\n```",
	Long:  "```lua\nCounter -- Counter\n```\nA reference to the Counter class attached to this Object. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#counter",
},
	)
	Definitions["Object"]["drag"] = append(Definitions["Object"]["drag"], Definition{
	Name:  "drag",
	Kind:  "property",
	Short: "```lua\ndrag -- float\n```",
	Long:  "```lua\ndrag -- float\n```\nThe Object's drag.\n\nmore: https://api.tabletopsimulator.com/object/#drag",
},
	)
	Definitions["Object"]["drag_selectable"] = append(Definitions["Object"]["drag_selectable"], Definition{
	Name:  "drag_selectable",
	Kind:  "property",
	Short: "```lua\ndrag_selectable -- bool\n```",
	Long:  "```lua\ndrag_selectable -- bool\n```\nWhether the Object may be selected with the drag-selection box.\n\nmore: https://api.tabletopsimulator.com/object/#drag_selectable",
},
	)
	Definitions["Object"]["dynamic_friction"] = append(Definitions["Object"]["dynamic_friction"], Definition{
	Name:  "dynamic_friction",
	Kind:  "property",
	Short: "```lua\ndynamic_friction -- float\n```",
	Long:  "```lua\ndynamic_friction -- float\n```\nThe Object's dynamic friction.\n\nmore: https://api.tabletopsimulator.com/object/#dynamic_friction",
},
	)
	Definitions["Object"]["gizmo_selectable"] = append(Definitions["Object"]["gizmo_selectable"], Definition{
	Name:  "gizmo_selectable",
	Kind:  "property",
	Short: "```lua\ngizmo_selectable -- bool\n```",
	Long:  "```lua\ngizmo_selectable -- bool\n```\nWhether the Object may be selected using the gizmo.\n\nmore: https://api.tabletopsimulator.com/object/#gizmo_selectable",
},
	)
	Definitions["Object"]["grid_projection"] = append(Definitions["Object"]["grid_projection"], Definition{
	Name:  "grid_projection",
	Kind:  "property",
	Short: "```lua\ngrid_projection -- bool\n```",
	Long:  "```lua\ngrid_projection -- bool\n```\nShould the grid project onto this object.\n\nmore: https://api.tabletopsimulator.com/object/#grid_projection",
},
	)
	Definitions["Object"]["guid"] = append(Definitions["Object"]["guid"], Definition{
	Name:  "guid",
	Kind:  "property",
	Short: "```lua\nguid -- string\n```",
	Long:  "```lua\nguid -- string\n```\nThe Object's guid. This is the same as the getGUID function. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#guid",
},
	)
	Definitions["Object"]["held_by_color"] = append(Definitions["Object"]["held_by_color"], Definition{
	Name:  "held_by_color",
	Kind:  "property",
	Short: "```lua\nheld_by_color -- string\n```",
	Long:  "```lua\nheld_by_color -- string\n```\nThe color of the Player currently holding the Object. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#held_by_color",
},
	)
	Definitions["Object"]["held_flip_index"] = append(Definitions["Object"]["held_flip_index"], Definition{
	Name:  "held_flip_index",
	Kind:  "property",
	Short: "```lua\nheld_flip_index -- int\n```",
	Long:  "```lua\nheld_flip_index -- int\n```\n0-23 value. Changes when a Player hits flip or alt + rotate.\n\nmore: https://api.tabletopsimulator.com/object/#held_flip_index",
},
	)
	Definitions["Object"]["held_position_offset"] = append(Definitions["Object"]["held_position_offset"], Definition{
	Name:  "held_position_offset",
	Kind:  "property",
	Short: "```lua\nheld_position_offset -- Vector\n```",
	Long:  "```lua\nheld_position_offset -- Vector\n```\nPosition offset from pointer\n\nmore: https://api.tabletopsimulator.com/object/#held_position_offset",
},
	)
	Definitions["Object"]["held_reduce_force"] = append(Definitions["Object"]["held_reduce_force"], Definition{
	Name:  "held_reduce_force",
	Kind:  "property",
	Short: "```lua\nheld_reduce_force -- bool\n```",
	Long:  "```lua\nheld_reduce_force -- bool\n```\nWhen the Object collides with something while moving this is automatically enabled and reduces the movement force.\n\nmore: https://api.tabletopsimulator.com/object/#held_reduce_force",
},
	)
	Definitions["Object"]["held_rotation_offset"] = append(Definitions["Object"]["held_rotation_offset"], Definition{
	Name:  "held_rotation_offset",
	Kind:  "property",
	Short: "```lua\nheld_rotation_offset -- Vector\n```",
	Long:  "```lua\nheld_rotation_offset -- Vector\n```\nRotation offset from pointer.\n\nmore: https://api.tabletopsimulator.com/object/#held_rotation_offset",
},
	)
	Definitions["Object"]["hide_when_face_down"] = append(Definitions["Object"]["hide_when_face_down"], Definition{
	Name:  "hide_when_face_down",
	Kind:  "property",
	Short: "```lua\nhide_when_face_down -- bool\n```",
	Long:  "```lua\nhide_when_face_down -- bool\n```\nHides the face of the object if it is face-down.\n\nmore: https://api.tabletopsimulator.com/object/#hide_when_face_down",
},
	)
	Definitions["Object"]["held_spin_index"] = append(Definitions["Object"]["held_spin_index"], Definition{
	Name:  "held_spin_index",
	Kind:  "property",
	Short: "```lua\nheld_spin_index -- int\n```",
	Long:  "```lua\nheld_spin_index -- int\n```\n0-23 value. Changes when a Player rotates the Object.\n\nmore: https://api.tabletopsimulator.com/object/#held_spin_index",
},
	)
	Definitions["Object"]["hide_when_face_down"] = append(Definitions["Object"]["hide_when_face_down"], Definition{
	Name:  "hide_when_face_down",
	Kind:  "property",
	Short: "```lua\nhide_when_face_down -- bool\n```",
	Long:  "```lua\nhide_when_face_down -- bool\n```\nHide the Object when face-down, as if it were in a hand zone.\n\nmore: https://api.tabletopsimulator.com/object/#hide_when_face_down",
},
	)
	Definitions["Object"]["ignore_fog_of_war"] = append(Definitions["Object"]["ignore_fog_of_war"], Definition{
	Name:  "ignore_fog_of_war",
	Kind:  "property",
	Short: "```lua\nignore_fog_of_war -- bool\n```",
	Long:  "```lua\nignore_fog_of_war -- bool\n```\nIf true then the object is always visible inside fog-of-war.\n\nmore: https://api.tabletopsimulator.com/object/#ignore_fog_of_war",
},
	)
	Definitions["Object"]["interactable"] = append(Definitions["Object"]["interactable"], Definition{
	Name:  "interactable",
	Kind:  "property",
	Short: "```lua\ninteractable -- bool\n```",
	Long:  "```lua\ninteractable -- bool\n```\nCan players interact with this Object? If false, only Lua Scripts can interact with this Object.\n\nmore: https://api.tabletopsimulator.com/object/#interactable",
},
	)
	Definitions["Object"]["is_face_down"] = append(Definitions["Object"]["is_face_down"], Definition{
	Name:  "is_face_down",
	Kind:  "property",
	Short: "```lua\nis_face_down -- bool\n```",
	Long:  "```lua\nis_face_down -- bool\n```\nTrue if the object is roughly face-down.\n\nmore: https://api.tabletopsimulator.com/object/#is_face_down",
},
	)
	Definitions["Object"]["LayoutZone"] = append(Definitions["Object"]["LayoutZone"], Definition{
	Name:  "LayoutZone",
	Kind:  "property",
	Short: "```lua\nLayoutZone -- LayoutZone\n```",
	Long:  "```lua\nLayoutZone -- LayoutZone\n```\nAccess the object's LayoutZone behaviour if it has one.\n\nmore: https://api.tabletopsimulator.com/behavior/layoutzone/",
},
	)
	Definitions["Object"]["loading_custom"] = append(Definitions["Object"]["loading_custom"], Definition{
	Name:  "loading_custom",
	Kind:  "property",
	Short: "```lua\nloading_custom -- bool\n```",
	Long:  "```lua\nloading_custom -- bool\n```\nIndicates if the assets of a custom element are being loaded.\n\nmore: https://api.tabletopsimulator.com/object/#loading_custom",
},
	)
	Definitions["Object"]["locked"] = append(Definitions["Object"]["locked"], Definition{
	Name:  "locked",
	Kind:  "property",
	Short: "```lua\nlocked -- bool\n```",
	Long:  "```lua\nlocked -- bool\n```\nIf the object is frozen in place (preventing physics interactions).\n\nmore: https://api.tabletopsimulator.com/object/#locked",
},
	)
	Definitions["Object"]["mass"] = append(Definitions["Object"]["mass"], Definition{
	Name:  "mass",
	Kind:  "property",
	Short: "```lua\nmass -- float\n```",
	Long:  "```lua\nmass -- float\n```\nThe Object's mass.\n\nmore: https://api.tabletopsimulator.com/object/#mass",
},
	)
	Definitions["Object"]["max_typed_number"] = append(Definitions["Object"]["max_typed_number"], Definition{
	Name:  "max_typed_number",
	Kind:  "property",
	Short: "```lua\nmax_typed_number -- int\n```",
	Long:  "```lua\nmax_typed_number -- int\n```\nDetermines the maximum number of digits which a user may type whilst hovering over the object.\n\nmore: https://api.tabletopsimulator.com/object/#max_typed_number",
},
	)
	Definitions["Object"]["measure_movement"] = append(Definitions["Object"]["measure_movement"], Definition{
	Name:  "measure_movement",
	Kind:  "property",
	Short: "```lua\nmeasure_movement -- bool\n```",
	Long:  "```lua\nmeasure_movement -- bool\n```\nMeasure Tool will automatically be used when moving the Object.\n\nmore: https://api.tabletopsimulator.com/object/#measure_movement",
},
	)
	Definitions["Object"]["memo"] = append(Definitions["Object"]["memo"], Definition{
	Name:  "memo",
	Kind:  "property",
	Short: "```lua\nmemo -- string\n```",
	Long:  "```lua\nmemo -- string\n```\nA string where you may persist user-data associated with the object.\n\nmore: https://api.tabletopsimulator.com/object/#memo",
},
	)
	Definitions["Object"]["name"] = append(Definitions["Object"]["name"], Definition{
	Name:  "name",
	Kind:  "property",
	Short: "```lua\nname -- string\n```",
	Long:  "```lua\nname -- string\n```\nThe Object's formated name or nickname if applicable. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#name",
},
	)
	Definitions["Object"]["pick_up_position"] = append(Definitions["Object"]["pick_up_position"], Definition{
	Name:  "pick_up_position",
	Kind:  "property",
	Short: "```lua\npick_up_position -- Vector\n```",
	Long:  "```lua\npick_up_position -- Vector\n```\nThe position of the Object when it was picked up. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#pick_up_position",
},
	)
	Definitions["Object"]["pick_up_rotation"] = append(Definitions["Object"]["pick_up_rotation"], Definition{
	Name:  "pick_up_rotation",
	Kind:  "property",
	Short: "```lua\npick_up_rotation -- Vector\n```",
	Long:  "```lua\npick_up_rotation -- Vector\n```\nThe rotation of the Object when it was picked up. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#pick_up_rotation",
},
	)
	Definitions["Object"]["remainder"] = append(Definitions["Object"]["remainder"], Definition{
	Name:  "remainder",
	Kind:  "property",
	Short: "```lua\nremainder -- Object\n```",
	Long:  "```lua\nremainder -- Object\n```\nIf takeObject has left only one item in this container, this will refer to that item.\n\nmore: https://api.tabletopsimulator.com/object/#remainder",
},
	)
	Definitions["Object"]["resting"] = append(Definitions["Object"]["resting"], Definition{
	Name:  "resting",
	Kind:  "property",
	Short: "```lua\nresting -- bool\n```",
	Long:  "```lua\nresting -- bool\n```\nReturns true if this Object is not moving. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#resting",
},
	)
	Definitions["Object"]["RPGFigurine"] = append(Definitions["Object"]["RPGFigurine"], Definition{
	Name:  "RPGFigurine",
	Kind:  "property",
	Short: "```lua\nRPGFigurine -- RPGFigurine\n```",
	Long:  "```lua\nRPGFigurine -- RPGFigurine\n```\nA reference to the RPGFigurine class attached to this Object. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#rpgfigurine",
},
	)
	Definitions["Object"]["script_code"] = append(Definitions["Object"]["script_code"], Definition{
	Name:  "script_code",
	Kind:  "property",
	Short: "```lua\nscript_code -- string\n```",
	Long:  "```lua\nscript_code -- string\n```\nReturns the Lua script on this Object.\n\nmore: https://api.tabletopsimulator.com/object/#script_code",
},
	)
	Definitions["Object"]["script_state"] = append(Definitions["Object"]["script_state"], Definition{
	Name:  "script_state",
	Kind:  "property",
	Short: "```lua\nscript_state -- string\n```",
	Long:  "```lua\nscript_state -- string\n```\nReturns the saved Lua script state on the Object.\n\nmore: https://api.tabletopsimulator.com/object/#script_state",
},
	)
	Definitions["Object"]["spawning"] = append(Definitions["Object"]["spawning"], Definition{
	Name:  "spawning",
	Kind:  "property",
	Short: "```lua\nspawning -- bool\n```",
	Long:  "```lua\nspawning -- bool\n```\nIndicates if any object is currently in the process of spawning.\n\nmore: https://api.tabletopsimulator.com/object/#spawning",
},
	)
	Definitions["Object"]["static_friction"] = append(Definitions["Object"]["static_friction"], Definition{
	Name:  "static_friction",
	Kind:  "property",
	Short: "```lua\nstatic_friction -- float\n```",
	Long:  "```lua\nstatic_friction -- float\n```\nThe Object's static friction.\n\nmore: https://api.tabletopsimulator.com/object/#static_friction",
},
	)
	Definitions["Object"]["sticky"] = append(Definitions["Object"]["sticky"], Definition{
	Name:  "sticky",
	Kind:  "property",
	Short: "```lua\nsticky -- bool\n```",
	Long:  "```lua\nsticky -- bool\n```\nShould Objects on top of this Object stick to this Object when this Object is picked up?\n\nmore: https://api.tabletopsimulator.com/object/#sticky",
},
	)
	Definitions["Object"]["tooltip"] = append(Definitions["Object"]["tooltip"], Definition{
	Name:  "tooltip",
	Kind:  "property",
	Short: "```lua\ntooltip -- bool\n```",
	Long:  "```lua\ntooltip -- bool\n```\nShould Object show tooltips when hovering over it.\n\nmore: https://api.tabletopsimulator.com/object/#tooltip",
},
	)
	Definitions["Object"]["type"] = append(Definitions["Object"]["type"], Definition{
	Name:  "type",
	Kind:  "property",
	Short: "```lua\ntype -- string\n```",
	Long:  "```lua\ntype -- string\n```\nThe Object's type. Read Only.\n\nmore: https://api.tabletopsimulator.com/object/#type",
},
	)
	Definitions["Object"]["TextTool"] = append(Definitions["Object"]["TextTool"], Definition{
	Name:  "TextTool",
	Kind:  "property",
	Short: "```lua\nTextTool -- TextTool\n```",
	Long:  "```lua\nTextTool -- TextTool\n```\nA reference to the TextTool class attached to this Object. Read only.\n\nmore: https://api.tabletopsimulator.com/object/#texttool",
},
	)
	Definitions["Object"]["use_gravity"] = append(Definitions["Object"]["use_gravity"], Definition{
	Name:  "use_gravity",
	Kind:  "property",
	Short: "```lua\nuse_gravity -- bool\n```",
	Long:  "```lua\nuse_gravity -- bool\n```\nDoes gravity affect this Object?\n\nmore: https://api.tabletopsimulator.com/object/#use_gravity",
},
	)
	Definitions["Object"]["use_grid"] = append(Definitions["Object"]["use_grid"], Definition{
	Name:  "use_grid",
	Kind:  "property",
	Short: "```lua\nuse_grid -- bool\n```",
	Long:  "```lua\nuse_grid -- bool\n```\nShould this Object snap to grid points?\n\nmore: https://api.tabletopsimulator.com/object/#use_grid",
},
	)
	Definitions["Object"]["use_hands"] = append(Definitions["Object"]["use_hands"], Definition{
	Name:  "use_hands",
	Kind:  "property",
	Short: "```lua\nuse_hands -- bool\n```",
	Long:  "```lua\nuse_hands -- bool\n```\nShould this Object go into player hands?\n\nmore: https://api.tabletopsimulator.com/object/#use_hands",
},
	)
	Definitions["Object"]["use_rotation_value_flip"] = append(Definitions["Object"]["use_rotation_value_flip"], Definition{
	Name:  "use_rotation_value_flip",
	Kind:  "property",
	Short: "```lua\nuse_rotation_value_flip -- bool\n```",
	Long:  "```lua\nuse_rotation_value_flip -- bool\n```\nWhen true the object will flip between its rotation values on a flip action.\n\nmore: https://api.tabletopsimulator.com/object/#use_rotation_value_flip",
},
	)
	Definitions["Object"]["use_snap_points"] = append(Definitions["Object"]["use_snap_points"], Definition{
	Name:  "use_snap_points",
	Kind:  "property",
	Short: "```lua\nuse_snap_points -- bool\n```",
	Long:  "```lua\nuse_snap_points -- bool\n```\nShould this Object snap to snap points?\n\nmore: https://api.tabletopsimulator.com/object/#use_snap_points",
},
	)
	Definitions["Object"]["value"] = append(Definitions["Object"]["value"], Definition{
	Name:  "value",
	Kind:  "property",
	Short: "```lua\nvalue -- int\n```",
	Long:  "```lua\nvalue -- int\n```\nA numeric value associated with the object, which when non-zero, will be displayed when hovering over the object.\n\nmore: https://api.tabletopsimulator.com/object/#value",
},
	)
	Definitions["Object"]["addAttachment"] = append(Definitions["Object"]["addAttachment"], Definition{
	Name:  "addAttachment",
	Kind:  "function",
	Short: "```lua\nfunction addAttachment(object) -- bool\n```",
	Long:  "```lua\nfunction addAttachment(object) -- bool\n```\nThe Object supplied as param is destroyed and becomes a dummy Object child.\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/object/#addattachment",
},
	)
	Definitions["Object"]["addContextMenuItem"] = append(Definitions["Object"]["addContextMenuItem"], Definition{
	Name:  "addContextMenuItem",
	Kind:  "function",
	Short: "```lua\nfunction addContextMenuItem(label, f, keep_open) -- bool\n```",
	Long:  "```lua\nfunction addContextMenuItem(label, f, keep_open) -- bool\n```\nAdd a context menu item onto the object.\nlabel: string\nf: function\nkeep_open: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#addcontextmenuitem",
},
	)
	Definitions["Object"]["addDecal"] = append(Definitions["Object"]["addDecal"], Definition{
	Name:  "addDecal",
	Kind:  "function",
	Short: "```lua\nfunction addDecal(decal) -- bool\n```",
	Long:  "```lua\nfunction addDecal(decal) -- bool\n```\nAdd a Decal onto the object.\ndecal: table\n\n\nmore: https://api.tabletopsimulator.com/object/#adddecal",
},
	)
	Definitions["Object"]["addForce"] = append(Definitions["Object"]["addForce"], Definition{
	Name:  "addForce",
	Kind:  "function",
	Short: "```lua\nfunction addForce(force_vector, force_type) -- bool\n```",
	Long:  "```lua\nfunction addForce(force_vector, force_type) -- bool\n```\nAdds a force vector to the Object.\nforce_vector: Vector\nforce_type: int\n\n\nmore: https://api.tabletopsimulator.com/object/#addforce",
},
	)
	Definitions["Object"]["addTag"] = append(Definitions["Object"]["addTag"], Definition{
	Name:  "addTag",
	Kind:  "function",
	Short: "```lua\nfunction addTag(tag) -- bool\n```",
	Long:  "```lua\nfunction addTag(tag) -- bool\n```\nAdds a tag to the Object.\ntag: string\n\n\nmore: https://api.tabletopsimulator.com/object/#addtag",
},
	)
	Definitions["Object"]["addToPlayerSelection"] = append(Definitions["Object"]["addToPlayerSelection"], Definition{
	Name:  "addToPlayerSelection",
	Kind:  "function",
	Short: "```lua\nfunction addToPlayerSelection(player_color) -- bool\n```",
	Long:  "```lua\nfunction addToPlayerSelection(player_color) -- bool\n```\nAdd object to player's selection\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/object/#addtoplayerselection",
},
	)
	Definitions["Object"]["addTorque"] = append(Definitions["Object"]["addTorque"], Definition{
	Name:  "addTorque",
	Kind:  "function",
	Short: "```lua\nfunction addTorque(torque_vector, force_type) -- bool\n```",
	Long:  "```lua\nfunction addTorque(torque_vector, force_type) -- bool\n```\nAdds a torque vector to the Object.\ntorque_vector: Vector\nforce_type: int\n\n\nmore: https://api.tabletopsimulator.com/object/#addtorque",
},
	)
	Definitions["Object"]["attachHider"] = append(Definitions["Object"]["attachHider"], Definition{
	Name:  "attachHider",
	Kind:  "function",
	Short: "```lua\nfunction attachHider(hider, enabled, players) -- bool\n```",
	Long:  "```lua\nfunction attachHider(hider, enabled, players) -- bool\n```\nAttaches a hider to the object (or removes it if enabled is false).\nhider: string\nenabled: bool\nplayers: table\n\n\nmore: https://api.tabletopsimulator.com/object/#attachhider",
},
	)
	Definitions["Object"]["attachInvisibleHider"] = append(Definitions["Object"]["attachInvisibleHider"], Definition{
	Name:  "attachInvisibleHider",
	Kind:  "function",
	Short: "```lua\nfunction attachInvisibleHider(hider, enabled, players) -- bool\n```",
	Long:  "```lua\nfunction attachInvisibleHider(hider, enabled, players) -- bool\n```\nAttaches an invisible hider to the object (or removes it if enabled is false).\nhider: string\nenabled: bool\nplayers: table\n\n\nmore: https://api.tabletopsimulator.com/object/#attachhider",
},
	)
	Definitions["Object"]["call"] = append(Definitions["Object"]["call"], Definition{
	Name:  "call",
	Kind:  "function",
	Short: "```lua\nfunction call(function_name, parameters) -- any\n```",
	Long:  "```lua\nfunction call(function_name, parameters) -- any\n```\nCalls a Lua function owned by this Object and passes an optional table as parameters to the function.\nfunction_name: string\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/object/#call",
},
	)
	Definitions["Object"]["clearButtons"] = append(Definitions["Object"]["clearButtons"], Definition{
	Name:  "clearButtons",
	Kind:  "function",
	Short: "```lua\nfunction clearButtons() -- bool\n```",
	Long:  "```lua\nfunction clearButtons() -- bool\n```\nClears all 3D UI buttons on this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#clearbuttons",
},
	)
	Definitions["Object"]["clearContextMenu"] = append(Definitions["Object"]["clearContextMenu"], Definition{
	Name:  "clearContextMenu",
	Kind:  "function",
	Short: "```lua\nfunction clearContextMenu() -- bool\n```",
	Long:  "```lua\nfunction clearContextMenu() -- bool\n```\nClears all added context menu items on this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#clearcontextmenu",
},
	)
	Definitions["Object"]["clearInputs"] = append(Definitions["Object"]["clearInputs"], Definition{
	Name:  "clearInputs",
	Kind:  "function",
	Short: "```lua\nfunction clearInputs() -- bool\n```",
	Long:  "```lua\nfunction clearInputs() -- bool\n```\nClears all 3D UI text inputs on this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#clearinputs",
},
	)
	Definitions["Object"]["clone"] = append(Definitions["Object"]["clone"], Definition{
	Name:  "clone",
	Kind:  "function",
	Short: "```lua\nfunction clone(parameters) -- Object\n```",
	Long:  "```lua\nfunction clone(parameters) -- Object\n```\nCopies and pastes this Object. Returns a reference to the newly spawned Object.\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/object/#clone",
},
	)
	Definitions["Object"]["createButton"] = append(Definitions["Object"]["createButton"], Definition{
	Name:  "createButton",
	Kind:  "function",
	Short: "```lua\nfunction createButton(button) -- bool\n```",
	Long:  "```lua\nfunction createButton(button) -- bool\n```\nCreates a 3D UI button on this Object.\nbutton: table\n\n\nmore: https://api.tabletopsimulator.com/object/#createbutton",
},
	)
	Definitions["Object"]["createInput"] = append(Definitions["Object"]["createInput"], Definition{
	Name:  "createInput",
	Kind:  "function",
	Short: "```lua\nfunction createInput(input) -- bool\n```",
	Long:  "```lua\nfunction createInput(input) -- bool\n```\nCreates a 3D UI text input on this Object. If input_function returns a string it overrides the input contents.\ninput: table\n\n\nmore: https://api.tabletopsimulator.com/object/#createinput",
},
	)
	Definitions["Object"]["cut"] = append(Definitions["Object"]["cut"], Definition{
	Name:  "cut",
	Kind:  "function",
	Short: "```lua\nfunction cut(index) -- table\n```",
	Long:  "```lua\nfunction cut(index) -- table\n```\nCuts a deck at the given card index and returns created objects.  If no index provided cuts deck in half.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/object/#cut",
},
	)
	Definitions["Object"]["deal"] = append(Definitions["Object"]["deal"], Definition{
	Name:  "deal",
	Kind:  "function",
	Short: "```lua\nfunction deal(number, player_color, hand_index) -- bool\n```",
	Long:  "```lua\nfunction deal(number, player_color, hand_index) -- bool\n```\nDeals to player's hand. If no player_color supplied it will deal to all seated players.\nnumber: int\nplayer_color: string\nhand_index: int\n\n\nmore: https://api.tabletopsimulator.com/object/#deal",
},
	)
	Definitions["Object"]["dealToColorWithOffset"] = append(Definitions["Object"]["dealToColorWithOffset"], Definition{
	Name:  "dealToColorWithOffset",
	Kind:  "function",
	Short: "```lua\nfunction dealToColorWithOffset(offset, flip, player_color) -- Object\n```",
	Long:  "```lua\nfunction dealToColorWithOffset(offset, flip, player_color) -- Object\n```\nDeals a Card to a player with an offset from their hand.\noffset: Vector\nflip: bool\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/object/#dealtocolorwithoffset",
},
	)
	Definitions["Object"]["destroyAttachment"] = append(Definitions["Object"]["destroyAttachment"], Definition{
	Name:  "destroyAttachment",
	Kind:  "function",
	Short: "```lua\nfunction destroyAttachment(index) -- bool\n```",
	Long:  "```lua\nfunction destroyAttachment(index) -- bool\n```\nDestroys an attachment with the given index.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/object/#destroyattachment",
},
	)
	Definitions["Object"]["destroyAttachments"] = append(Definitions["Object"]["destroyAttachments"], Definition{
	Name:  "destroyAttachments",
	Kind:  "function",
	Short: "```lua\nfunction destroyAttachments() -- bool\n```",
	Long:  "```lua\nfunction destroyAttachments() -- bool\n```\nDestroys all attachments.\n\n\nmore: https://api.tabletopsimulator.com/object/#destroyattachments",
},
	)
	Definitions["Object"]["destruct"] = append(Definitions["Object"]["destruct"], Definition{
	Name:  "destruct",
	Kind:  "function",
	Short: "```lua\nfunction destruct() -- bool\n```",
	Long:  "```lua\nfunction destruct() -- bool\n```\nDestroys this Object. Mainly so you can call self.destruct().\n\n\nmore: https://api.tabletopsimulator.com/object/#destruct",
},
	)
	Definitions["Object"]["drop"] = append(Definitions["Object"]["drop"], Definition{
	Name:  "drop",
	Kind:  "function",
	Short: "```lua\nfunction drop() -- bool\n```",
	Long:  "```lua\nfunction drop() -- bool\n```\nIf held the object will be dropped.\n\n\nmore: https://api.tabletopsimulator.com/object/#drop",
},
	)
	Definitions["Object"]["editButton"] = append(Definitions["Object"]["editButton"], Definition{
	Name:  "editButton",
	Kind:  "function",
	Short: "```lua\nfunction editButton(button) -- bool\n```",
	Long:  "```lua\nfunction editButton(button) -- bool\n```\nEdits a 3D UI button on this Object based on its index.\nbutton: table\n\n\nmore: https://api.tabletopsimulator.com/object/#editbutton",
},
	)
	Definitions["Object"]["editInput"] = append(Definitions["Object"]["editInput"], Definition{
	Name:  "editInput",
	Kind:  "function",
	Short: "```lua\nfunction editInput(input) -- bool\n```",
	Long:  "```lua\nfunction editInput(input) -- bool\n```\nEdits a 3D UI input on this Object based on its index.\ninput: table\n\n\nmore: https://api.tabletopsimulator.com/object/#editinput",
},
	)
	Definitions["Object"]["flip"] = append(Definitions["Object"]["flip"], Definition{
	Name:  "flip",
	Kind:  "function",
	Short: "```lua\nfunction flip() -- bool\n```",
	Long:  "```lua\nfunction flip() -- bool\n```\nFlips this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#flip",
},
	)
	Definitions["Object"]["getAngularVelocity"] = append(Definitions["Object"]["getAngularVelocity"], Definition{
	Name:  "getAngularVelocity",
	Kind:  "function",
	Short: "```lua\nfunction getAngularVelocity() -- table\n```",
	Long:  "```lua\nfunction getAngularVelocity() -- table\n```\nReturns the current angular velocity vector of the Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getangularvelocity",
},
	)
	Definitions["Object"]["getAttachments"] = append(Definitions["Object"]["getAttachments"], Definition{
	Name:  "getAttachments",
	Kind:  "function",
	Short: "```lua\nfunction getAttachments() -- table\n```",
	Long:  "```lua\nfunction getAttachments() -- table\n```\nReturns a table in the same format as getObjects() for containers.\n\n\nreturn table: {\n  name: string\n  description: string\n  guid: string\n  index: int\n  lua_script: string\n  lua_script_state: string\n}\n\nmore: https://api.tabletopsimulator.com/object/#getattachments",
},
	)
	Definitions["Object"]["getTags"] = append(Definitions["Object"]["getTags"], Definition{
	Name:  "getTags",
	Kind:  "function",
	Short: "```lua\nfunction getTags() -- table\n```",
	Long:  "```lua\nfunction getTags() -- table\n```\nReturns the tags attached to the Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#gettags",
},
	)
	Definitions["Object"]["getBounds"] = append(Definitions["Object"]["getBounds"], Definition{
	Name:  "getBounds",
	Kind:  "function",
	Short: "```lua\nfunction getBounds() -- table\n```",
	Long:  "```lua\nfunction getBounds() -- table\n```\nReturns the world space axis aligned Bounds of the Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getbounds",
},
	)
	Definitions["Object"]["getBoundsNormalized"] = append(Definitions["Object"]["getBoundsNormalized"], Definition{
	Name:  "getBoundsNormalized",
	Kind:  "function",
	Short: "```lua\nfunction getBoundsNormalized() -- table\n```",
	Long:  "```lua\nfunction getBoundsNormalized() -- table\n```\nReturns the world space axis aligned Bounds of the Object's colliders at zero rotation.\n\n\nmore: https://api.tabletopsimulator.com/object/#getboundsnormalized",
},
	)
	Definitions["Object"]["getButtons"] = append(Definitions["Object"]["getButtons"], Definition{
	Name:  "getButtons",
	Kind:  "function",
	Short: "```lua\nfunction getButtons() -- table\n```",
	Long:  "```lua\nfunction getButtons() -- table\n```\nGets a list of all the 3D UI buttons on this Object.\n\n\nreturn table: {\n  index: int\n  click_function: string\n  function_owner: Object\n  label: string\n  position: Vector\n  rotation: Vector\n  scale: Vector\n  width: int\n  height: int\n  font_size: int\n  color: Color\n  font_color: Color\n}\n\nmore: https://api.tabletopsimulator.com/object/#getbuttons",
},
	)
	Definitions["Object"]["getColorTint"] = append(Definitions["Object"]["getColorTint"], Definition{
	Name:  "getColorTint",
	Kind:  "function",
	Short: "```lua\nfunction getColorTint() -- Color\n```",
	Long:  "```lua\nfunction getColorTint() -- Color\n```\nReturns the color tint for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getcolortint",
},
	)
	Definitions["Object"]["getChild"] = append(Definitions["Object"]["getChild"], Definition{
	Name:  "getChild",
	Kind:  "function",
	Short: "```lua\nfunction getChild(name) -- GameObject\n```",
	Long:  "```lua\nfunction getChild(name) -- GameObject\n```\nReturns a child GameObject matching the specified name.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getchild",
},
	)
	Definitions["Object"]["getChildren"] = append(Definitions["Object"]["getChildren"], Definition{
	Name:  "getChildren",
	Kind:  "function",
	Short: "```lua\nfunction getChildren() -- table\n```",
	Long:  "```lua\nfunction getChildren() -- table\n```\nReturns a table of all child GameObjects.\n\n\nmore: https://api.tabletopsimulator.com/object/#getchildren",
},
	)
	Definitions["Object"]["getComponent"] = append(Definitions["Object"]["getComponent"], Definition{
	Name:  "getComponent",
	Kind:  "function",
	Short: "```lua\nfunction getComponent(name) -- Component\n```",
	Long:  "```lua\nfunction getComponent(name) -- Component\n```\nGet the named component of an object.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getcomponent",
},
	)
	Definitions["Object"]["getComponentInChildren"] = append(Definitions["Object"]["getComponentInChildren"], Definition{
	Name:  "getComponentInChildren",
	Kind:  "function",
	Short: "```lua\nfunction getComponentInChildren(name) -- Component\n```",
	Long:  "```lua\nfunction getComponentInChildren(name) -- Component\n```\nGet the named component of an object or its children.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getcomponentinchildren",
},
	)
	Definitions["Object"]["getComponents"] = append(Definitions["Object"]["getComponents"], Definition{
	Name:  "getComponents",
	Kind:  "function",
	Short: "```lua\nfunction getComponents(name) -- table\n```",
	Long:  "```lua\nfunction getComponents(name) -- table\n```\nGet all components of an object. `name` is optional.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getcomponents",
},
	)
	Definitions["Object"]["getComponentsInChildren"] = append(Definitions["Object"]["getComponentsInChildren"], Definition{
	Name:  "getComponentsInChildren",
	Kind:  "function",
	Short: "```lua\nfunction getComponentsInChildren(name) -- table\n```",
	Long:  "```lua\nfunction getComponentsInChildren(name) -- table\n```\nGet all components of an object or its children. `name` is optional.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getcomponentsinchildren",
},
	)
	Definitions["Object"]["getComponentVar"] = append(Definitions["Object"]["getComponentVar"], Definition{
	Name:  "getComponentVar",
	Kind:  "function",
	Short: "```lua\nfunction getComponentVar(component_name, variable_name) -- any\n```",
	Long:  "```lua\nfunction getComponentVar(component_name, variable_name) -- any\n```\nGet the current value of a component of an object.\ncomponent_name: string\nvariable_name: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getcomponentvar",
},
	)
	Definitions["Object"]["getCustomObject"] = append(Definitions["Object"]["getCustomObject"], Definition{
	Name:  "getCustomObject",
	Kind:  "function",
	Short: "```lua\nfunction getCustomObject() -- table\n```",
	Long:  "```lua\nfunction getCustomObject() -- table\n```\nReturns the custom parameters on a Custom Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getcustomobject",
},
	)
	Definitions["Object"]["getData"] = append(Definitions["Object"]["getData"], Definition{
	Name:  "getData",
	Kind:  "function",
	Short: "```lua\nfunction getData() -- table\n```",
	Long:  "```lua\nfunction getData() -- table\n```\nReturns a table data structure representation of the object. Works with spawnObjectData.\n\n\nmore: https://api.tabletopsimulator.com/object/#getdata",
},
	)
	Definitions["Object"]["getDecals"] = append(Definitions["Object"]["getDecals"], Definition{
	Name:  "getDecals",
	Kind:  "function",
	Short: "```lua\nfunction getDecals() -- table\n```",
	Long:  "```lua\nfunction getDecals() -- table\n```\nReturns a table of sub-tables, each sub-table representing one decal.\n\n\nreturn table: {\n  name: string, (Name of decal)\n  url: string, (Filepath or URL of image)\n  position: Vector, (Position on Object)\n  rotation: Vector, (Rotation relative to Object)\n  scale: float, (1 is normal scale)\n}\n\nmore: https://api.tabletopsimulator.com/object/#getdecals",
},
	)
	Definitions["Object"]["getDescription"] = append(Definitions["Object"]["getDescription"], Definition{
	Name:  "getDescription",
	Kind:  "function",
	Short: "```lua\nfunction getDescription() -- string\n```",
	Long:  "```lua\nfunction getDescription() -- string\n```\nGets the description for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getdescription",
},
	)
	Definitions["Object"]["getFogOfWarReveal"] = append(Definitions["Object"]["getFogOfWarReveal"], Definition{
	Name:  "getFogOfWarReveal",
	Kind:  "function",
	Short: "```lua\nfunction getFogOfWarReveal() -- table\n```",
	Long:  "```lua\nfunction getFogOfWarReveal() -- table\n```\nReturns the fog-of-war reveal settings for this Object: {bool reveal, string color, float range}.\n\n\nmore: https://api.tabletopsimulator.com/object/#getfogofwarreveal",
},
	)
	Definitions["Object"]["getGMNotes"] = append(Definitions["Object"]["getGMNotes"], Definition{
	Name:  "getGMNotes",
	Kind:  "function",
	Short: "```lua\nfunction getGMNotes() -- string\n```",
	Long:  "```lua\nfunction getGMNotes() -- string\n```\nReturns the GM notes attached to this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getgmnotes",
},
	)
	Definitions["Object"]["getGUID"] = append(Definitions["Object"]["getGUID"], Definition{
	Name:  "getGUID",
	Kind:  "function",
	Short: "```lua\nfunction getGUID() -- string\n```",
	Long:  "```lua\nfunction getGUID() -- string\n```\nReturns the GUID that belongs to this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getguid",
},
	)
	Definitions["Object"]["getInputs"] = append(Definitions["Object"]["getInputs"], Definition{
	Name:  "getInputs",
	Kind:  "function",
	Short: "```lua\nfunction getInputs() -- table\n```",
	Long:  "```lua\nfunction getInputs() -- table\n```\nGets a list of all the 3D UI inputs on this Object.\n\n\nreturn table: {\n  index: int\n  click_function: string\n  function_owner: Object\n  label: string\n  position: table\n  rotation: table\n  scale: table\n  width: int\n  height: int\n  font_size: int\n  color: Color\n  font_color: Color\n  tooltip: string\n  alignment: int, (1 = Automatic, 2 = Left, 3 = Center, 4 = Right, 5 = Justified)\n  value: string\n  validation: int, (1 = None, 2 = Integer, 3 = Float, 4 = Alphanumeric, 5 = Username, 6 = Name)\n  tab: int, (1 = None, 2 = Select Next, 3 = Indent)\n}\n\nmore: https://api.tabletopsimulator.com/object/#getinputs",
},
	)
	Definitions["Object"]["getJoints"] = append(Definitions["Object"]["getJoints"], Definition{
	Name:  "getJoints",
	Kind:  "function",
	Short: "```lua\nfunction getJoints() -- table\n```",
	Long:  "```lua\nfunction getJoints() -- table\n```\nReturns information on any joints attached from this Object.\n\n\nreturn table: {\n  type: string, (One of: \"Fixed\", \"Hinge\" [H], \"Spring\" [S])\n  joint_object_guid: string, (GUID of attached object)\n  collision: bool, (Is collision enabled?)\n  break_force: float, (Force required to break joint)\n  break_torque: float, (Torque required to break joint)\n  axis: Vector, ([H] Axis of rotation)\n  anchor: Vector, ([H] Position of anchor)\n  connector_anchor: Vector, ([H] Position on connected Object)\n  motor_force: float, ([H] Option A: Force of rotation)\n  motor_velocity: float, ([H] Option B: Velocity of rotaton)\n  motor_free_spin: bool, (If enabled the motor will only accelerate but never slow down)\n  spring: float, (Force used to keep objects together)\n  damper: float, (Force used to dampen spring)\n  max_distance: float, (Maximum distance objects may be apart)\n  min_distance: float, (Minimum distance objects may be apart)\n}\n\nmore: https://api.tabletopsimulator.com/object/#getjoints",
},
	)
	Definitions["Object"]["getJSON"] = append(Definitions["Object"]["getJSON"], Definition{
	Name:  "getJSON",
	Kind:  "function",
	Short: "```lua\nfunction getJSON(indented) -- string\n```",
	Long:  "```lua\nfunction getJSON(indented) -- string\n```\nReturns a serialization of the JSON string which represents this item.\nindented: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#get-functions",
},
	)
	Definitions["Object"]["getLock"] = append(Definitions["Object"]["getLock"], Definition{
	Name:  "getLock",
	Kind:  "function",
	Short: "```lua\nfunction getLock() -- bool\n```",
	Long:  "```lua\nfunction getLock() -- bool\n```\nGet the lock status of this object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getlock",
},
	)
	Definitions["Object"]["getLoopingEffectIndex"] = append(Definitions["Object"]["getLoopingEffectIndex"], Definition{
	Name:  "getLoopingEffectIndex",
	Kind:  "function",
	Short: "```lua\nfunction getLoopingEffectIndex() -- int\n```",
	Long:  "```lua\nfunction getLoopingEffectIndex() -- int\n```\nReturns the index of the currently looping effect.\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffectindex",
},
	)
	Definitions["Object"]["getLoopingEffects"] = append(Definitions["Object"]["getLoopingEffects"], Definition{
	Name:  "getLoopingEffects",
	Kind:  "function",
	Short: "```lua\nfunction getLoopingEffects() -- table\n```",
	Long:  "```lua\nfunction getLoopingEffects() -- table\n```\nReturns a table with the keys \"index\" and \"name\" for each looping effect.\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffects",
},
	)
	Definitions["Object"]["getLuaScript"] = append(Definitions["Object"]["getLuaScript"], Definition{
	Name:  "getLuaScript",
	Kind:  "function",
	Short: "```lua\nfunction getLuaScript() -- string\n```",
	Long:  "```lua\nfunction getLuaScript() -- string\n```\nReturns the Lua script for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getluascript",
},
	)
	Definitions["Object"]["getMaterials"] = append(Definitions["Object"]["getMaterials"], Definition{
	Name:  "getMaterials",
	Kind:  "function",
	Short: "```lua\nfunction getMaterials() -- table\n```",
	Long:  "```lua\nfunction getMaterials() -- table\n```\nGet all materials of an object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getmaterials",
},
	)
	Definitions["Object"]["getMaterialsInChildren"] = append(Definitions["Object"]["getMaterialsInChildren"], Definition{
	Name:  "getMaterialsInChildren",
	Kind:  "function",
	Short: "```lua\nfunction getMaterialsInChildren() -- table\n```",
	Long:  "```lua\nfunction getMaterialsInChildren() -- table\n```\nGet all materials of an object or its children.\n\n\nmore: https://api.tabletopsimulator.com/object/#getcomponentsinchildren",
},
	)
	Definitions["Object"]["getName"] = append(Definitions["Object"]["getName"], Definition{
	Name:  "getName",
	Kind:  "function",
	Short: "```lua\nfunction getName() -- string\n```",
	Long:  "```lua\nfunction getName() -- string\n```\nReturns the nickname for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getname",
},
	)
	Definitions["Object"]["getObjects"] = append(Definitions["Object"]["getObjects"], Definition{
	Name:  "getObjects",
	Kind:  "function",
	Short: "```lua\nfunction getObjects() -- table\n```",
	Long:  "```lua\nfunction getObjects() -- table\n```\nBag or Deck: Returns all the Objects inside of this container.\n\n\nreturn table: {\n  name: string\n  description: string\n  guid: string\n  index: int\n  lua_script: string\n  lua_script_state: string\n}\n\nmore: https://api.tabletopsimulator.com/object/#getobjects-containers",
},
	)
	Definitions["Object"]["getObjects"] = append(Definitions["Object"]["getObjects"], Definition{
	Name:  "getObjects",
	Kind:  "function",
	Short: "```lua\nfunction getObjects(ignore_tags) -- table\n```",
	Long:  "```lua\nfunction getObjects(ignore_tags) -- table\n```\nZone: Returns all the Objects inside of this zone.\nignore_tags: bool\n\n\nreturn table: {\n  object: Object\n}\n\nmore: https://api.tabletopsimulator.com/object/#getobjects-zones",
},
	)
	Definitions["Object"]["getPosition"] = append(Definitions["Object"]["getPosition"], Definition{
	Name:  "getPosition",
	Kind:  "function",
	Short: "```lua\nfunction getPosition() -- table\n```",
	Long:  "```lua\nfunction getPosition() -- table\n```\nGets the position for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getposition",
},
	)
	Definitions["Object"]["getPositionSmooth"] = append(Definitions["Object"]["getPositionSmooth"], Definition{
	Name:  "getPositionSmooth",
	Kind:  "function",
	Short: "```lua\nfunction getPositionSmooth() -- table\n```",
	Long:  "```lua\nfunction getPositionSmooth() -- table\n```\nGets the current smooth-move target position for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getpositionsmooth",
},
	)
	Definitions["Object"]["getQuantity"] = append(Definitions["Object"]["getQuantity"], Definition{
	Name:  "getQuantity",
	Kind:  "function",
	Short: "```lua\nfunction getQuantity() -- int\n```",
	Long:  "```lua\nfunction getQuantity() -- int\n```\nReturns the number of Objects in a stack.\n\n\nmore: https://api.tabletopsimulator.com/object/#getquantity",
},
	)
	Definitions["Object"]["getRotation"] = append(Definitions["Object"]["getRotation"], Definition{
	Name:  "getRotation",
	Kind:  "function",
	Short: "```lua\nfunction getRotation() -- table\n```",
	Long:  "```lua\nfunction getRotation() -- table\n```\nGets the rotation of this Object in degrees.\n\n\nmore: https://api.tabletopsimulator.com/object/#getrotation",
},
	)
	Definitions["Object"]["getRotationSmooth"] = append(Definitions["Object"]["getRotationSmooth"], Definition{
	Name:  "getRotationSmooth",
	Kind:  "function",
	Short: "```lua\nfunction getRotationSmooth() -- table\n```",
	Long:  "```lua\nfunction getRotationSmooth() -- table\n```\nGets the current smooth-move target rotation for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getrotationsmooth",
},
	)
	Definitions["Object"]["getRotationValue"] = append(Definitions["Object"]["getRotationValue"], Definition{
	Name:  "getRotationValue",
	Kind:  "function",
	Short: "```lua\nfunction getRotationValue() -- int\n```",
	Long:  "```lua\nfunction getRotationValue() -- int\n```\nReturns the rotation value for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getrotationvalue",
},
	)
	Definitions["Object"]["getRotationValues"] = append(Definitions["Object"]["getRotationValues"], Definition{
	Name:  "getRotationValues",
	Kind:  "function",
	Short: "```lua\nfunction getRotationValues() -- table\n```",
	Long:  "```lua\nfunction getRotationValues() -- table\n```\nReturns the rotation values for this Object. List of tables with Keys: \"value\" and \"rotation\".\n\n\nreturn table: {\n  value: int\n  rotation: Vector\n}\n\nmore: https://api.tabletopsimulator.com/object/#getrotationvalues",
},
	)
	Definitions["Object"]["getScale"] = append(Definitions["Object"]["getScale"], Definition{
	Name:  "getScale",
	Kind:  "function",
	Short: "```lua\nfunction getScale() -- table\n```",
	Long:  "```lua\nfunction getScale() -- table\n```\nGets the scale for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getscale",
},
	)
	Definitions["Object"]["getSelectingPlayers"] = append(Definitions["Object"]["getSelectingPlayers"], Definition{
	Name:  "getSelectingPlayers",
	Kind:  "function",
	Short: "```lua\nfunction getSelectingPlayers() -- table\n```",
	Long:  "```lua\nfunction getSelectingPlayers() -- table\n```\nReturns a table of the Players currently selecting the Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getselectingplayers",
},
	)
	Definitions["Object"]["getSnapPoints"] = append(Definitions["Object"]["getSnapPoints"], Definition{
	Name:  "getSnapPoints",
	Kind:  "function",
	Short: "```lua\nfunction getSnapPoints() -- table\n```",
	Long:  "```lua\nfunction getSnapPoints() -- table\n```\nReturns the snap points attached to the Object.\n\n\nreturn table: {\n  position: Vector\n  rotation: Vector\n  rotation_snap: bool\n}\n\nmore: https://api.tabletopsimulator.com/object/#getsnappoints",
},
	)
	Definitions["Object"]["getStateId"] = append(Definitions["Object"]["getStateId"], Definition{
	Name:  "getStateId",
	Kind:  "function",
	Short: "```lua\nfunction getStateId() -- int\n```",
	Long:  "```lua\nfunction getStateId() -- int\n```\nReturns id of the active state for this object. Will return -1 if the object has no states.\n\n\nmore: https://api.tabletopsimulator.com/object/#getstateid",
},
	)
	Definitions["Object"]["getStates"] = append(Definitions["Object"]["getStates"], Definition{
	Name:  "getStates",
	Kind:  "function",
	Short: "```lua\nfunction getStates() -- table\n```",
	Long:  "```lua\nfunction getStates() -- table\n```\nReturns a table with the keys \"name\", \"guid\", and \"id\".\n\n\nreturn table: {\n  name: string\n  description: string\n  guid: string\n  id: int\n  lua_script: string\n  lua_script_state: string\n}\n\nmore: https://api.tabletopsimulator.com/object/#getstates",
},
	)
	Definitions["Object"]["getTable"] = append(Definitions["Object"]["getTable"], Definition{
	Name:  "getTable",
	Kind:  "function",
	Short: "```lua\nfunction getTable(table_name) -- table\n```",
	Long:  "```lua\nfunction getTable(table_name) -- table\n```\nGets a Lua table for this Object.\ntable_name: string\n\n\nmore: https://api.tabletopsimulator.com/object/#gettable",
},
	)
	Definitions["Object"]["getTransformForward"] = append(Definitions["Object"]["getTransformForward"], Definition{
	Name:  "getTransformForward",
	Kind:  "function",
	Short: "```lua\nfunction getTransformForward() -- table\n```",
	Long:  "```lua\nfunction getTransformForward() -- table\n```\nGets the forward direction of this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#gettransformforward",
},
	)
	Definitions["Object"]["getTransformRight"] = append(Definitions["Object"]["getTransformRight"], Definition{
	Name:  "getTransformRight",
	Kind:  "function",
	Short: "```lua\nfunction getTransformRight() -- table\n```",
	Long:  "```lua\nfunction getTransformRight() -- table\n```\nGets the right direction of this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#gettransformright",
},
	)
	Definitions["Object"]["getTransformUp"] = append(Definitions["Object"]["getTransformUp"], Definition{
	Name:  "getTransformUp",
	Kind:  "function",
	Short: "```lua\nfunction getTransformUp() -- table\n```",
	Long:  "```lua\nfunction getTransformUp() -- table\n```\nGets the up direction of this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#gettransformup",
},
	)
	Definitions["Object"]["getTriggerEffects"] = append(Definitions["Object"]["getTriggerEffects"], Definition{
	Name:  "getTriggerEffects",
	Kind:  "function",
	Short: "```lua\nfunction getTriggerEffects() -- table\n```",
	Long:  "```lua\nfunction getTriggerEffects() -- table\n```\nReturns a table with the keys \"index\" and \"name\" for each trigger effect.\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#gettriggereffects",
},
	)
	Definitions["Object"]["getValue"] = append(Definitions["Object"]["getValue"], Definition{
	Name:  "getValue",
	Kind:  "function",
	Short: "```lua\nfunction getValue() -- int\n```",
	Long:  "```lua\nfunction getValue() -- int\n```\nReturns the value for this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getvalue",
},
	)
	Definitions["Object"]["getVar"] = append(Definitions["Object"]["getVar"], Definition{
	Name:  "getVar",
	Kind:  "function",
	Short: "```lua\nfunction getVar(variable_name) -- any\n```",
	Long:  "```lua\nfunction getVar(variable_name) -- any\n```\nGets a Lua variable for this Object.\nvariable_name: string\n\n\nmore: https://api.tabletopsimulator.com/object/#getvar",
},
	)
	Definitions["Object"]["getVectorLines"] = append(Definitions["Object"]["getVectorLines"], Definition{
	Name:  "getVectorLines",
	Kind:  "function",
	Short: "```lua\nfunction getVectorLines() -- table\n```",
	Long:  "```lua\nfunction getVectorLines() -- table\n```\nReturns the vector lines on this Object.\n\n\nreturn table: {\n  points: table\n  color: Color\n  thickness: float\n  rotation: Vector\n}\n\nmore: https://api.tabletopsimulator.com/object/#getvectorlines",
},
	)
	Definitions["Object"]["getVelocity"] = append(Definitions["Object"]["getVelocity"], Definition{
	Name:  "getVelocity",
	Kind:  "function",
	Short: "```lua\nfunction getVelocity() -- table\n```",
	Long:  "```lua\nfunction getVelocity() -- table\n```\nReturns the current velocity vector of the Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#getvelocity",
},
	)
	Definitions["Object"]["getVisualBoundsNormalized"] = append(Definitions["Object"]["getVisualBoundsNormalized"], Definition{
	Name:  "getVisualBoundsNormalized",
	Kind:  "function",
	Short: "```lua\nfunction getVisualBoundsNormalized() -- table\n```",
	Long:  "```lua\nfunction getVisualBoundsNormalized() -- table\n```\nReturns the world space axis aligned Bounds of the Object's renderers at zero rotation.\n\n\nmore: https://api.tabletopsimulator.com/object/#getvisualboundsnormalized",
},
	)
	Definitions["Object"]["getZones"] = append(Definitions["Object"]["getZones"], Definition{
	Name:  "getZones",
	Kind:  "function",
	Short: "```lua\nfunction getZones() -- table\n```",
	Long:  "```lua\nfunction getZones() -- table\n```\nReturns all the Zones which the object is currently inside.\n\n\nmore: https://api.tabletopsimulator.com/object/#getzones",
},
	)
	Definitions["Object"]["hasAnyTag"] = append(Definitions["Object"]["hasAnyTag"], Definition{
	Name:  "hasAnyTag",
	Kind:  "function",
	Short: "```lua\nfunction hasAnyTag() -- bool\n```",
	Long:  "```lua\nfunction hasAnyTag() -- bool\n```\nReturns whether the Object has any tag attached to it.\n\n\nmore: https://api.tabletopsimulator.com/object/#hasanytag",
},
	)
	Definitions["Object"]["hasMatchingTag"] = append(Definitions["Object"]["hasMatchingTag"], Definition{
	Name:  "hasMatchingTag",
	Kind:  "function",
	Short: "```lua\nfunction hasMatchingTag(object) -- bool\n```",
	Long:  "```lua\nfunction hasMatchingTag(object) -- bool\n```\nReturns whether the Object and the specified other Object share at least one tag.\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/object/#hasmatchingtag",
},
	)
	Definitions["Object"]["hasTag"] = append(Definitions["Object"]["hasTag"], Definition{
	Name:  "hasTag",
	Kind:  "function",
	Short: "```lua\nfunction hasTag(tag) -- bool\n```",
	Long:  "```lua\nfunction hasTag(tag) -- bool\n```\nReturns whether the Object has the specified tag attached.\ntag: string\n\n\nmore: https://api.tabletopsimulator.com/object/#hastag",
},
	)
	Definitions["Object"]["highlightOff"] = append(Definitions["Object"]["highlightOff"], Definition{
	Name:  "highlightOff",
	Kind:  "function",
	Short: "```lua\nfunction highlightOff() -- bool\n```",
	Long:  "```lua\nfunction highlightOff() -- bool\n```\nStop highlighting this object.\n\n\nmore: https://api.tabletopsimulator.com/object/#highlightoff",
},
	)
	Definitions["Object"]["highlightOn"] = append(Definitions["Object"]["highlightOn"], Definition{
	Name:  "highlightOn",
	Kind:  "function",
	Short: "```lua\nfunction highlightOn(color, duration) -- bool\n```",
	Long:  "```lua\nfunction highlightOn(color, duration) -- bool\n```\nHighlight this object with color for an optional duration. Color values are between 0 and 1.\ncolor: Color\nduration: float\n\n\nmore: https://api.tabletopsimulator.com/object/#highlighton",
},
	)
	Definitions["Object"]["isSmoothMoving"] = append(Definitions["Object"]["isSmoothMoving"], Definition{
	Name:  "isSmoothMoving",
	Kind:  "function",
	Short: "```lua\nfunction isSmoothMoving() -- bool\n```",
	Long:  "```lua\nfunction isSmoothMoving() -- bool\n```\nIs the object smoothly moving from our smooth functions.\n\n\nmore: https://api.tabletopsimulator.com/object/#issmoothmoving",
},
	)
	Definitions["Object"]["isDestroyed"] = append(Definitions["Object"]["isDestroyed"], Definition{
	Name:  "isDestroyed",
	Kind:  "function",
	Short: "```lua\nfunction isDestroyed() -- bool\n```",
	Long:  "```lua\nfunction isDestroyed() -- bool\n```\nReturns true if the Object is (or will be) destroyed.\n\n\nmore: https://api.tabletopsimulator.com/object/#isdestroyed",
},
	)
	Definitions["Object"]["jointTo"] = append(Definitions["Object"]["jointTo"], Definition{
	Name:  "jointTo",
	Kind:  "function",
	Short: "```lua\nfunction jointTo(join) -- bool\n```",
	Long:  "```lua\nfunction jointTo(join) -- bool\n```\nJoints objects together.\njoin: table\n\n\nmore: https://api.tabletopsimulator.com/object/#jointto",
},
	)
	Definitions["Object"]["playLoopingEffect"] = append(Definitions["Object"]["playLoopingEffect"], Definition{
	Name:  "playLoopingEffect",
	Kind:  "function",
	Short: "```lua\nfunction playLoopingEffect(index) -- void\n```",
	Long:  "```lua\nfunction playLoopingEffect(index) -- void\n```\nStarts playing a looping effect. Index starts at 0.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#playloopingeffect",
},
	)
	Definitions["Object"]["playTriggerEffect"] = append(Definitions["Object"]["playTriggerEffect"], Definition{
	Name:  "playTriggerEffect",
	Kind:  "function",
	Short: "```lua\nfunction playTriggerEffect(index) -- void\n```",
	Long:  "```lua\nfunction playTriggerEffect(index) -- void\n```\nStarts playing a trigger effect. Index starts at 0.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/assetbundle/#playtriggereffect",
},
	)
	Definitions["Object"]["positionToLocal"] = append(Definitions["Object"]["positionToLocal"], Definition{
	Name:  "positionToLocal",
	Kind:  "function",
	Short: "```lua\nfunction positionToLocal(vector) -- table\n```",
	Long:  "```lua\nfunction positionToLocal(vector) -- table\n```\nConverts the world position to a local position of this Object.\nvector: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#positiontolocal",
},
	)
	Definitions["Object"]["positionToWorld"] = append(Definitions["Object"]["positionToWorld"], Definition{
	Name:  "positionToWorld",
	Kind:  "function",
	Short: "```lua\nfunction positionToWorld(vector) -- table\n```",
	Long:  "```lua\nfunction positionToWorld(vector) -- table\n```\nConverts the local position of this Object to a world position.\nvector: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#positiontoworld",
},
	)
	Definitions["Object"]["putObject"] = append(Definitions["Object"]["putObject"], Definition{
	Name:  "putObject",
	Kind:  "function",
	Short: "```lua\nfunction putObject(object) -- Object\n```",
	Long:  "```lua\nfunction putObject(object) -- Object\n```\nAdd this object to the current object. Works for stacking chips, decks, and bags.\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/object/#putobject",
},
	)
	Definitions["Object"]["randomize"] = append(Definitions["Object"]["randomize"], Definition{
	Name:  "randomize",
	Kind:  "function",
	Short: "```lua\nfunction randomize() -- bool\n```",
	Long:  "```lua\nfunction randomize() -- bool\n```\nSame as pressing the \"R\" key on an Object. Shuffles deck/bag, rolls dice/coin, lifts any other object up in the air.\n\n\nmore: https://api.tabletopsimulator.com/object/#randomize",
},
	)
	Definitions["Object"]["randomize"] = append(Definitions["Object"]["randomize"], Definition{
	Name:  "randomize",
	Kind:  "function",
	Short: "```lua\nfunction randomize(player) -- bool\n```",
	Long:  "```lua\nfunction randomize(player) -- bool\n```\nSame as pressing the \"R\" key on an Object. Triggers onObjectRandomize as if specified player hit it.\nplayer: string\n\n\nmore: https://api.tabletopsimulator.com/object/#randomize",
},
	)
	Definitions["Object"]["registerCollisions"] = append(Definitions["Object"]["registerCollisions"], Definition{
	Name:  "registerCollisions",
	Kind:  "function",
	Short: "```lua\nfunction registerCollisions(include_stay_events) -- bool\n```",
	Long:  "```lua\nfunction registerCollisions(include_stay_events) -- bool\n```\nRegisters object to be checked for collisions: required for onObjectCollisionEnter etc.\ninclude_stay_events: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#registercollisions",
},
	)
	Definitions["Object"]["reload"] = append(Definitions["Object"]["reload"], Definition{
	Name:  "reload",
	Kind:  "function",
	Short: "```lua\nfunction reload() -- table\n```",
	Long:  "```lua\nfunction reload() -- table\n```\nReloads this object by destroying and spawning it place. Returns the newly spawned object. Very useful if using setCustomObject().\n\n\nmore: https://api.tabletopsimulator.com/object/#reload",
},
	)
	Definitions["Object"]["removeAttachment"] = append(Definitions["Object"]["removeAttachment"], Definition{
	Name:  "removeAttachment",
	Kind:  "function",
	Short: "```lua\nfunction removeAttachment(index) -- Object\n```",
	Long:  "```lua\nfunction removeAttachment(index) -- Object\n```\nRemoves a child with the given index. Use getAttachments() to find out the index property.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/object/#removeattachment",
},
	)
	Definitions["Object"]["removeAttachments"] = append(Definitions["Object"]["removeAttachments"], Definition{
	Name:  "removeAttachments",
	Kind:  "function",
	Short: "```lua\nfunction removeAttachments() -- table\n```",
	Long:  "```lua\nfunction removeAttachments() -- table\n```\nDetaches the children of this Object. Returns a table of object references.\n\n\nmore: https://api.tabletopsimulator.com/object/#removeattachments",
},
	)
	Definitions["Object"]["removeButton"] = append(Definitions["Object"]["removeButton"], Definition{
	Name:  "removeButton",
	Kind:  "function",
	Short: "```lua\nfunction removeButton(index) -- bool\n```",
	Long:  "```lua\nfunction removeButton(index) -- bool\n```\nRemoves a 3D UI button from this Object by its index.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/object/#removebutton",
},
	)
	Definitions["Object"]["removeInput"] = append(Definitions["Object"]["removeInput"], Definition{
	Name:  "removeInput",
	Kind:  "function",
	Short: "```lua\nfunction removeInput(index) -- bool\n```",
	Long:  "```lua\nfunction removeInput(index) -- bool\n```\nRemoves a 3D UI text input from this Object by its index.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/object/#removeinput",
},
	)
	Definitions["Object"]["removeFromPlayerSelection"] = append(Definitions["Object"]["removeFromPlayerSelection"], Definition{
	Name:  "removeFromPlayerSelection",
	Kind:  "function",
	Short: "```lua\nfunction removeFromPlayerSelection(player_color) -- bool\n```",
	Long:  "```lua\nfunction removeFromPlayerSelection(player_color) -- bool\n```\nRemove object from player's selection\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/object/#removefromplayerselection",
},
	)
	Definitions["Object"]["removeTag"] = append(Definitions["Object"]["removeTag"], Definition{
	Name:  "removeTag",
	Kind:  "function",
	Short: "```lua\nfunction removeTag(tag) -- bool\n```",
	Long:  "```lua\nfunction removeTag(tag) -- bool\n```\nRemoves the specified tag from the Object.\ntag: string\n\n\nmore: https://api.tabletopsimulator.com/object/#removetag",
},
	)
	Definitions["Object"]["reset"] = append(Definitions["Object"]["reset"], Definition{
	Name:  "reset",
	Kind:  "function",
	Short: "```lua\nfunction reset() -- bool\n```",
	Long:  "```lua\nfunction reset() -- bool\n```\nResets this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#reset",
},
	)
	Definitions["Object"]["roll"] = append(Definitions["Object"]["roll"], Definition{
	Name:  "roll",
	Kind:  "function",
	Short: "```lua\nfunction roll() -- bool\n```",
	Long:  "```lua\nfunction roll() -- bool\n```\nRolls this Object. Works on Dice and Coins.\n\n\nmore: https://api.tabletopsimulator.com/object/#roll",
},
	)
	Definitions["Object"]["rotate"] = append(Definitions["Object"]["rotate"], Definition{
	Name:  "rotate",
	Kind:  "function",
	Short: "```lua\nfunction rotate(rotation) -- bool\n```",
	Long:  "```lua\nfunction rotate(rotation) -- bool\n```\nSmoothly rotates this Object with the given offset in degrees.\nrotation: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#rotate",
},
	)
	Definitions["Object"]["scale"] = append(Definitions["Object"]["scale"], Definition{
	Name:  "scale",
	Kind:  "function",
	Short: "```lua\nfunction scale(scale) -- bool\n```",
	Long:  "```lua\nfunction scale(scale) -- bool\n```\nScales this Object by the given amount.\nscale: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#scale",
},
	)
	Definitions["Object"]["scale"] = append(Definitions["Object"]["scale"], Definition{
	Name:  "scale",
	Kind:  "function",
	Short: "```lua\nfunction scale(scale) -- bool\n```",
	Long:  "```lua\nfunction scale(scale) -- bool\n```\nScales this Object in all axes by the given amount.\nscale: float\n\n\nmore: https://api.tabletopsimulator.com/object/#scale",
},
	)
	Definitions["Object"]["setAngularVelocity"] = append(Definitions["Object"]["setAngularVelocity"], Definition{
	Name:  "setAngularVelocity",
	Kind:  "function",
	Short: "```lua\nfunction setAngularVelocity(vector) -- bool\n```",
	Long:  "```lua\nfunction setAngularVelocity(vector) -- bool\n```\nSets the angular velocity of the object.\nvector: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#setangularvelocity",
},
	)
	Definitions["Object"]["setColorTint"] = append(Definitions["Object"]["setColorTint"], Definition{
	Name:  "setColorTint",
	Kind:  "function",
	Short: "```lua\nfunction setColorTint(color) -- bool\n```",
	Long:  "```lua\nfunction setColorTint(color) -- bool\n```\nSets the color tint for this Object.\ncolor: Color\n\n\nmore: https://api.tabletopsimulator.com/object/#setcolortint",
},
	)
	Definitions["Object"]["setComponentVar"] = append(Definitions["Object"]["setComponentVar"], Definition{
	Name:  "setComponentVar",
	Kind:  "function",
	Short: "```lua\nfunction setComponentVar(component_name, variable_name, value) -- bool\n```",
	Long:  "```lua\nfunction setComponentVar(component_name, variable_name, value) -- bool\n```\nSet the current value of a component of an object.\ncomponent_name: string\nvariable_name: string\nvalue: any\n\n\nmore: https://api.tabletopsimulator.com/object/#setcomponentvar",
},
	)
	Definitions["Object"]["setCustomObject"] = append(Definitions["Object"]["setCustomObject"], Definition{
	Name:  "setCustomObject",
	Kind:  "function",
	Short: "```lua\nfunction setCustomObject(custom_object) -- bool\n```",
	Long:  "```lua\nfunction setCustomObject(custom_object) -- bool\n```\nUsed to create a Custom Object.\ncustom_object: table\n\n\nmore: https://api.tabletopsimulator.com/object/#setcustomobject",
},
	)
	Definitions["Object"]["setDecals"] = append(Definitions["Object"]["setDecals"], Definition{
	Name:  "setDecals",
	Kind:  "function",
	Short: "```lua\nfunction setDecals(decals) -- bool\n```",
	Long:  "```lua\nfunction setDecals(decals) -- bool\n```\nSets which decals are on an object. This removes other decals already present; use an empty table to remove all decals.\ndecals: table\n\n\nmore: https://api.tabletopsimulator.com/object/#setdecals",
},
	)
	Definitions["Object"]["setDescription"] = append(Definitions["Object"]["setDescription"], Definition{
	Name:  "setDescription",
	Kind:  "function",
	Short: "```lua\nfunction setDescription(description) -- bool\n```",
	Long:  "```lua\nfunction setDescription(description) -- bool\n```\nSets the description for this Object.\ndescription: string\n\n\nmore: https://api.tabletopsimulator.com/object/#setdescription",
},
	)
	Definitions["Object"]["setFogOfWarReveal"] = append(Definitions["Object"]["setFogOfWarReveal"], Definition{
	Name:  "setFogOfWarReveal",
	Kind:  "function",
	Short: "```lua\nfunction setFogOfWarReveal(fog_setting) -- bool\n```",
	Long:  "```lua\nfunction setFogOfWarReveal(fog_setting) -- bool\n```\nSets whether the object reveals fog-of-war: {bool reveal, string color, float range}\nfog_setting: table\n\n\nmore: https://api.tabletopsimulator.com/object/#setfogofwarreveal",
},
	)
	Definitions["Object"]["setGMNotes"] = append(Definitions["Object"]["setGMNotes"], Definition{
	Name:  "setGMNotes",
	Kind:  "function",
	Short: "```lua\nfunction setGMNotes(notes) -- bool\n```",
	Long:  "```lua\nfunction setGMNotes(notes) -- bool\n```\nSets the GM notes attached to this Object.\nnotes: string\n\n\nmore: https://api.tabletopsimulator.com/object/#setgmnotes",
},
	)
	Definitions["Object"]["setHiddenFrom"] = append(Definitions["Object"]["setHiddenFrom"], Definition{
	Name:  "setHiddenFrom",
	Kind:  "function",
	Short: "```lua\nfunction setHiddenFrom(players) -- bool\n```",
	Long:  "```lua\nfunction setHiddenFrom(players) -- bool\n```\nHides the object from the specified players as if it were in a hand zone.\nplayers: table\n\n\nmore: https://api.tabletopsimulator.com/object/#sethiddenfrom",
},
	)
	Definitions["Object"]["setInvisibleTo"] = append(Definitions["Object"]["setInvisibleTo"], Definition{
	Name:  "setInvisibleTo",
	Kind:  "function",
	Short: "```lua\nfunction setInvisibleTo(players) -- bool\n```",
	Long:  "```lua\nfunction setInvisibleTo(players) -- bool\n```\nMakes the object invisible to the specified players.\nplayers: table\n\n\nmore: https://api.tabletopsimulator.com/object/#seinvisibleto",
},
	)
	Definitions["Object"]["setLock"] = append(Definitions["Object"]["setLock"], Definition{
	Name:  "setLock",
	Kind:  "function",
	Short: "```lua\nfunction setLock(lock) -- bool\n```",
	Long:  "```lua\nfunction setLock(lock) -- bool\n```\nSet the lock status of an object.\nlock: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#setlock",
},
	)
	Definitions["Object"]["setLuaScript"] = append(Definitions["Object"]["setLuaScript"], Definition{
	Name:  "setLuaScript",
	Kind:  "function",
	Short: "```lua\nfunction setLuaScript(script) -- bool\n```",
	Long:  "```lua\nfunction setLuaScript(script) -- bool\n```\nSets the Lua script for this Object.\nscript: string\n\n\nmore: https://api.tabletopsimulator.com/object/#setluascript",
},
	)
	Definitions["Object"]["setName"] = append(Definitions["Object"]["setName"], Definition{
	Name:  "setName",
	Kind:  "function",
	Short: "```lua\nfunction setName(nickname) -- bool\n```",
	Long:  "```lua\nfunction setName(nickname) -- bool\n```\nSets the nickname for this Object.\nnickname: string\n\n\nmore: https://api.tabletopsimulator.com/object/#setname",
},
	)
	Definitions["Object"]["setPosition"] = append(Definitions["Object"]["setPosition"], Definition{
	Name:  "setPosition",
	Kind:  "function",
	Short: "```lua\nfunction setPosition(position) -- bool\n```",
	Long:  "```lua\nfunction setPosition(position) -- bool\n```\nSets the world space position for this Object.\nposition: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#setposition",
},
	)
	Definitions["Object"]["setPositionSmooth"] = append(Definitions["Object"]["setPositionSmooth"], Definition{
	Name:  "setPositionSmooth",
	Kind:  "function",
	Short: "```lua\nfunction setPositionSmooth(position, collide, fast) -- bool\n```",
	Long:  "```lua\nfunction setPositionSmooth(position, collide, fast) -- bool\n```\nSmoothly moves this Object from its current position to a given world space position.\nposition: Vector\ncollide: bool\nfast: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#setpositionsmooth",
},
	)
	Definitions["Object"]["setRotation"] = append(Definitions["Object"]["setRotation"], Definition{
	Name:  "setRotation",
	Kind:  "function",
	Short: "```lua\nfunction setRotation(rotation) -- bool\n```",
	Long:  "```lua\nfunction setRotation(rotation) -- bool\n```\nSets the rotation of this Object in degrees.\nrotation: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#setrotation",
},
	)
	Definitions["Object"]["setRotationSmooth"] = append(Definitions["Object"]["setRotationSmooth"], Definition{
	Name:  "setRotationSmooth",
	Kind:  "function",
	Short: "```lua\nfunction setRotationSmooth(rotation, collide, fast) -- bool\n```",
	Long:  "```lua\nfunction setRotationSmooth(rotation, collide, fast) -- bool\n```\nSmoothly rotates this Object to the given orientation in degrees.\nrotation: Vector\ncollide: bool\nfast: bool\n\n\nmore: https://api.tabletopsimulator.com/object/#setrotationsmooth",
},
	)
	Definitions["Object"]["setRotationValues"] = append(Definitions["Object"]["setRotationValues"], Definition{
	Name:  "setRotationValues",
	Kind:  "function",
	Short: "```lua\nfunction setRotationValues(rotation_values) -- bool\n```",
	Long:  "```lua\nfunction setRotationValues(rotation_values) -- bool\n```\nSets the rotation values of this Object: {{int value, Vector rotation}, ...}\nrotation_values: table\n\n\nmore: https://api.tabletopsimulator.com/object/#setrotationvalues",
},
	)
	Definitions["Object"]["setScale"] = append(Definitions["Object"]["setScale"], Definition{
	Name:  "setScale",
	Kind:  "function",
	Short: "```lua\nfunction setScale(scale) -- bool\n```",
	Long:  "```lua\nfunction setScale(scale) -- bool\n```\nSets the scale for this Object.\nscale: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#setscale",
},
	)
	Definitions["Object"]["setSnapPoints"] = append(Definitions["Object"]["setSnapPoints"], Definition{
	Name:  "setSnapPoints",
	Kind:  "function",
	Short: "```lua\nfunction setSnapPoints(snap_points) -- bool\n```",
	Long:  "```lua\nfunction setSnapPoints(snap_points) -- bool\n```\nSets the snap points attached to this Object: {{Vector position, Vector rotation, bool rotation_snap}, ...}\nsnap_points: table\n\n\nmore: https://api.tabletopsimulator.com/object/#setsnappoints",
},
	)
	Definitions["Object"]["setState"] = append(Definitions["Object"]["setState"], Definition{
	Name:  "setState",
	Kind:  "function",
	Short: "```lua\nfunction setState(state) -- Object\n```",
	Long:  "```lua\nfunction setState(state) -- Object\n```\nSets the State on this Object and returns reference to the new State.\nstate: int\n\n\nmore: https://api.tabletopsimulator.com/object/#setstate",
},
	)
	Definitions["Object"]["setTable"] = append(Definitions["Object"]["setTable"], Definition{
	Name:  "setTable",
	Kind:  "function",
	Short: "```lua\nfunction setTable(table_name, lua_table) -- bool\n```",
	Long:  "```lua\nfunction setTable(table_name, lua_table) -- bool\n```\nSets a Lua table for this Object.\ntable_name: string\nlua_table: table\n\n\nmore: https://api.tabletopsimulator.com/object/#settable",
},
	)
	Definitions["Object"]["setTags"] = append(Definitions["Object"]["setTags"], Definition{
	Name:  "setTags",
	Kind:  "function",
	Short: "```lua\nfunction setTags(tags) -- bool\n```",
	Long:  "```lua\nfunction setTags(tags) -- bool\n```\nReplaces all tags on the Object with those specified.\ntags: table\n\n\nmore: https://api.tabletopsimulator.com/object/#settags",
},
	)
	Definitions["Object"]["setValue"] = append(Definitions["Object"]["setValue"], Definition{
	Name:  "setValue",
	Kind:  "function",
	Short: "```lua\nfunction setValue(value) -- bool\n```",
	Long:  "```lua\nfunction setValue(value) -- bool\n```\nSets the value for this Object.\nvalue: any\n\n\nmore: https://api.tabletopsimulator.com/object/#setvalue",
},
	)
	Definitions["Object"]["setVar"] = append(Definitions["Object"]["setVar"], Definition{
	Name:  "setVar",
	Kind:  "function",
	Short: "```lua\nfunction setVar(variable_name, value) -- bool\n```",
	Long:  "```lua\nfunction setVar(variable_name, value) -- bool\n```\nSets a Lua variable for this Object.\nvariable_name: string\nvalue: any\n\n\nmore: https://api.tabletopsimulator.com/object/#setvar",
},
	)
	Definitions["Object"]["setVectorLines"] = append(Definitions["Object"]["setVectorLines"], Definition{
	Name:  "setVectorLines",
	Kind:  "function",
	Short: "```lua\nfunction setVectorLines(vector_lines) -- bool\n```",
	Long:  "```lua\nfunction setVectorLines(vector_lines) -- bool\n```\nSets the vector lines attached to this Object: {{table points, Color color, float thickness, Vector rotation}, ...}\nvector_lines: table\n\n\nmore: https://api.tabletopsimulator.com/object/#setvectorlines",
},
	)
	Definitions["Object"]["setVelocity"] = append(Definitions["Object"]["setVelocity"], Definition{
	Name:  "setVelocity",
	Kind:  "function",
	Short: "```lua\nfunction setVelocity(vector) -- bool\n```",
	Long:  "```lua\nfunction setVelocity(vector) -- bool\n```\nSets the velocity of the object.\nvector: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#setvelocity",
},
	)
	Definitions["Object"]["shuffle"] = append(Definitions["Object"]["shuffle"], Definition{
	Name:  "shuffle",
	Kind:  "function",
	Short: "```lua\nfunction shuffle() -- bool\n```",
	Long:  "```lua\nfunction shuffle() -- bool\n```\nShuffles this Object.\n\n\nmore: https://api.tabletopsimulator.com/object/#shuffle",
},
	)
	Definitions["Object"]["shuffleStates"] = append(Definitions["Object"]["shuffleStates"], Definition{
	Name:  "shuffleStates",
	Kind:  "function",
	Short: "```lua\nfunction shuffleStates() -- Object\n```",
	Long:  "```lua\nfunction shuffleStates() -- Object\n```\nShuffles the States on this Object and returns reference to the new State.\n\n\nmore: https://api.tabletopsimulator.com/object/#shufflestates",
},
	)
	Definitions["Object"]["split"] = append(Definitions["Object"]["split"], Definition{
	Name:  "split",
	Kind:  "function",
	Short: "```lua\nfunction split(stacks) -- table\n```",
	Long:  "```lua\nfunction split(stacks) -- table\n```\nSplits a deck into the chosen number of stacks and returns created objects.\nstacks: int\n\n\nmore: https://api.tabletopsimulator.com/object/#split",
},
	)
	Definitions["Object"]["spread"] = append(Definitions["Object"]["spread"], Definition{
	Name:  "spread",
	Kind:  "function",
	Short: "```lua\nfunction spread(distance) -- table\n```",
	Long:  "```lua\nfunction spread(distance) -- table\n```\nSpreads the cards of a deck out on the table.\ndistance: float\n\n\nmore: https://api.tabletopsimulator.com/object/#spread",
},
	)
	Definitions["Object"]["takeObject"] = append(Definitions["Object"]["takeObject"], Definition{
	Name:  "takeObject",
	Kind:  "function",
	Short: "```lua\nfunction takeObject(parameters) -- Object\n```",
	Long:  "```lua\nfunction takeObject(parameters) -- Object\n```\nTakes an Object from this container.\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/object/#takeobject",
},
	)
	Definitions["Object"]["translate"] = append(Definitions["Object"]["translate"], Definition{
	Name:  "translate",
	Kind:  "function",
	Short: "```lua\nfunction translate(position) -- bool\n```",
	Long:  "```lua\nfunction translate(position) -- bool\n```\nSmoothly moves this Object from its current position to a given offset.\nposition: Vector\n\n\nmore: https://api.tabletopsimulator.com/object/#translate",
},
	)
	Definitions["Object"]["unregisterCollisions"] = append(Definitions["Object"]["unregisterCollisions"], Definition{
	Name:  "unregisterCollisions",
	Kind:  "function",
	Short: "```lua\nfunction unregisterCollisions() -- bool\n```",
	Long:  "```lua\nfunction unregisterCollisions() -- bool\n```\nUnregisters object to be checked for collisions: onObjectCollisionEnter etc. will no longer work.\n\n\nmore: https://api.tabletopsimulator.com/object/#unregistercollisions",
},
	)
	Definitions["ObjectEvents"]["tryObjectEnter"] = append(Definitions["ObjectEvents"]["tryObjectEnter"], Definition{
	Name:  "tryObjectEnter",
	Kind:  "event",
	Short: "```lua\nfunction tryObjectEnter(object) -- bool\n```",
	Long:  "```lua\nfunction tryObjectEnter(object) -- bool\n```\nAutomatically called when an Object attempts to enter this container.  If this function returns false the object will not be allowed in.\nobject: Object\n\n\nmore: https://api.tabletopsimulator.com/events/#tryobjectenter",
},
	)
	Definitions["ObjectEvents"]["onCollisionEnter"] = append(Definitions["ObjectEvents"]["onCollisionEnter"], Definition{
	Name:  "onCollisionEnter",
	Kind:  "event",
	Short: "```lua\nfunction onCollisionEnter(info) -- void\n```",
	Long:  "```lua\nfunction onCollisionEnter(info) -- void\n```\nAutomatically called when this Object collides with another Object.\ninfo: table\n\n\nmore: https://api.tabletopsimulator.com/events/#oncollisionenter",
},
	)
	Definitions["ObjectEvents"]["onCollisionExit"] = append(Definitions["ObjectEvents"]["onCollisionExit"], Definition{
	Name:  "onCollisionExit",
	Kind:  "event",
	Short: "```lua\nfunction onCollisionExit(info) -- void\n```",
	Long:  "```lua\nfunction onCollisionExit(info) -- void\n```\nAutomatically called when this Object stops touching another Object.\ninfo: table\n\n\nmore: https://api.tabletopsimulator.com/events/#oncollisionexit",
},
	)
	Definitions["ObjectEvents"]["onCollisionStay"] = append(Definitions["ObjectEvents"]["onCollisionStay"], Definition{
	Name:  "onCollisionStay",
	Kind:  "event",
	Short: "```lua\nfunction onCollisionStay(info) -- void\n```",
	Long:  "```lua\nfunction onCollisionStay(info) -- void\n```\nAutomatically called when this Object is touching another Object.\ninfo: table\n\n\nmore: https://api.tabletopsimulator.com/events/#oncollisionstay",
},
	)
	Definitions["ObjectEvents"]["onDestroy"] = append(Definitions["ObjectEvents"]["onDestroy"], Definition{
	Name:  "onDestroy",
	Kind:  "event",
	Short: "```lua\nfunction onDestroy() -- void\n```",
	Long:  "```lua\nfunction onDestroy() -- void\n```\nAutomatically called when this Object is destroyed.\n\n\nmore: https://api.tabletopsimulator.com/events/#ondestroy",
},
	)
	Definitions["ObjectEvents"]["onDrop"] = append(Definitions["ObjectEvents"]["onDrop"], Definition{
	Name:  "onDrop",
	Kind:  "event",
	Short: "```lua\nfunction onDrop(player_color) -- void\n```",
	Long:  "```lua\nfunction onDrop(player_color) -- void\n```\nAutomatically called when this Object is dropped.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#ondrop",
},
	)
	Definitions["ObjectEvents"]["onGroupSort"] = append(Definitions["ObjectEvents"]["onGroupSort"], Definition{
	Name:  "onGroupSort",
	Kind:  "event",
	Short: "```lua\nfunction onGroupSort(group, reversed) -- void\n```",
	Long:  "```lua\nfunction onGroupSort(group, reversed) -- void\n```\nCalled when a group is sorted in this LayoutZone.  Return the table sorted how you want, or false to use the zones default sort.\ngroup: table\nreversed: bool\n\n\nmore: https://api.tabletopsimulator.com/events/#ongroupsort",
},
	)
	Definitions["ObjectEvents"]["onHover"] = append(Definitions["ObjectEvents"]["onHover"], Definition{
	Name:  "onHover",
	Kind:  "event",
	Short: "```lua\nfunction onHover(player_color) -- void\n```",
	Long:  "```lua\nfunction onHover(player_color) -- void\n```\nCalled when a player hovers their pointer over this object.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onhover",
},
	)
	Definitions["ObjectEvents"]["onNumberTyped"] = append(Definitions["ObjectEvents"]["onNumberTyped"], Definition{
	Name:  "onNumberTyped",
	Kind:  "event",
	Short: "```lua\nfunction onNumberTyped(player_color, number_typed) -- void\n```",
	Long:  "```lua\nfunction onNumberTyped(player_color, number_typed) -- void\n```\nCalled when a player hovers their pointer over this object and types a number.\nplayer_color: string\nnumber_typed: int\n\n\nmore: https://api.tabletopsimulator.com/events/#onnumbertyped",
},
	)
	Definitions["ObjectEvents"]["onPeek"] = append(Definitions["ObjectEvents"]["onPeek"], Definition{
	Name:  "onPeek",
	Kind:  "event",
	Short: "```lua\nfunction onPeek(player_color) -- void\n```",
	Long:  "```lua\nfunction onPeek(player_color) -- void\n```\nAutomatically called when this Object is peeked.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onpeek",
},
	)
	Definitions["ObjectEvents"]["onPickUp"] = append(Definitions["ObjectEvents"]["onPickUp"], Definition{
	Name:  "onPickUp",
	Kind:  "event",
	Short: "```lua\nfunction onPickUp(player_color) -- void\n```",
	Long:  "```lua\nfunction onPickUp(player_color) -- void\n```\nAutomatically called when this Object is picked up.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onpickup",
},
	)
	Definitions["ObjectEvents"]["onRandomize"] = append(Definitions["ObjectEvents"]["onRandomize"], Definition{
	Name:  "onRandomize",
	Kind:  "event",
	Short: "```lua\nfunction onRandomize(player_color) -- void\n```",
	Long:  "```lua\nfunction onRandomize(player_color) -- void\n```\nAutomatically called when this Object is randomized.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onrandomze",
},
	)
	Definitions["ObjectEvents"]["tryRandomize"] = append(Definitions["ObjectEvents"]["tryRandomize"], Definition{
	Name:  "tryRandomize",
	Kind:  "event",
	Short: "```lua\nfunction tryRandomize(player_color) -- bool\n```",
	Long:  "```lua\nfunction tryRandomize(player_color) -- bool\n```\nCalled when a player attempts to randomize the script-owner Object. Return false to prevent the randomization taking place.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#tryrandomize",
},
	)
	Definitions["ObjectEvents"]["onRotate"] = append(Definitions["ObjectEvents"]["onRotate"], Definition{
	Name:  "onRotate",
	Kind:  "event",
	Short: "```lua\nfunction onRotate(spin, flip, player_color, old_spin, old_flip) -- void\n```",
	Long:  "```lua\nfunction onRotate(spin, flip, player_color, old_spin, old_flip) -- void\n```\nAutomatically called after a player rotates this object.\nspin: float\nflip: float\nplayer_color: string\nold_spin: float\nold_flip: float\n\n\nmore: https://api.tabletopsimulator.com/events/#onrotate",
},
	)
	Definitions["ObjectEvents"]["tryRotate"] = append(Definitions["ObjectEvents"]["tryRotate"], Definition{
	Name:  "tryRotate",
	Kind:  "event",
	Short: "```lua\nfunction tryRotate(spin, flip, player_color, old_spin, old_flip) -- bool\n```",
	Long:  "```lua\nfunction tryRotate(spin, flip, player_color, old_spin, old_flip) -- bool\n```\nAutomatically called when a player attempts to rotate this object.  If this function returns false the rotation will be cancelled.\nspin: float\nflip: float\nplayer_color: string\nold_spin: float\nold_flip: float\n\n\nmore: https://api.tabletopsimulator.com/events/#tryrotate",
},
	)
	Definitions["ObjectEvents"]["onSearchStart"] = append(Definitions["ObjectEvents"]["onSearchStart"], Definition{
	Name:  "onSearchStart",
	Kind:  "event",
	Short: "```lua\nfunction onSearchStart(player_color) -- void\n```",
	Long:  "```lua\nfunction onSearchStart(player_color) -- void\n```\nAutomatically called when player_color starts to search this object.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onsearchstart",
},
	)
	Definitions["ObjectEvents"]["onSearchEnd"] = append(Definitions["ObjectEvents"]["onSearchEnd"], Definition{
	Name:  "onSearchEnd",
	Kind:  "event",
	Short: "```lua\nfunction onSearchEnd(player_color) -- void\n```",
	Long:  "```lua\nfunction onSearchEnd(player_color) -- void\n```\nAutomatically called when player_color stops searching this object.\nplayer_color: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onsearchend",
},
	)
	Definitions["ObjectEvents"]["onStateChange"] = append(Definitions["ObjectEvents"]["onStateChange"], Definition{
	Name:  "onStateChange",
	Kind:  "event",
	Short: "```lua\nfunction onStateChange(old_guid) -- void\n```",
	Long:  "```lua\nfunction onStateChange(old_guid) -- void\n```\nCalled when this object appears because of a state change.\nold_guid: string\n\n\nmore: https://api.tabletopsimulator.com/events/#onstatechanged",
},
	)
	Definitions["Physics"]["play_area"] = append(Definitions["Physics"]["play_area"], Definition{
	Name:  "play_area",
	Kind:  "property",
	Short: "```lua\nplay_area -- float\n```",
	Long:  "```lua\nplay_area -- float\n```\nThe size of the play area (0.0 - 1.0).\n\nmore: https://api.tabletopsimulator.com/physics/#play_area",
},
	)
	Definitions["Physics"]["getGravity"] = append(Definitions["Physics"]["getGravity"], Definition{
	Name:  "getGravity",
	Kind:  "function",
	Short: "```lua\nfunction getGravity() -- Vector\n```",
	Long:  "```lua\nfunction getGravity() -- Vector\n```\nReturns the gravity Vector.\n\n\nmore: https://api.tabletopsimulator.com/physics/#getgravity",
},
	)
	Definitions["Physics"]["setGravity"] = append(Definitions["Physics"]["setGravity"], Definition{
	Name:  "setGravity",
	Kind:  "function",
	Short: "```lua\nfunction setGravity(vector) -- bool\n```",
	Long:  "```lua\nfunction setGravity(vector) -- bool\n```\nSets the gravity Vector.\nvector: Vector\n\n\nmore: https://api.tabletopsimulator.com/physics/#setgravity",
},
	)
	Definitions["PlayerInstance"]["admin"] = append(Definitions["PlayerInstance"]["admin"], Definition{
	Name:  "admin",
	Kind:  "property",
	Short: "```lua\nadmin -- bool\n```",
	Long:  "```lua\nadmin -- bool\n```\nIs the player currently promoted or hosting the game? Read only.\n\nmore: https://api.tabletopsimulator.com/player/instance/#admin",
},
	)
	Definitions["PlayerInstance"]["blindfolded"] = append(Definitions["PlayerInstance"]["blindfolded"], Definition{
	Name:  "blindfolded",
	Kind:  "property",
	Short: "```lua\nblindfolded -- bool\n```",
	Long:  "```lua\nblindfolded -- bool\n```\nIs the player blindfolded?\n\nmore: https://api.tabletopsimulator.com/player/instance/#blindfolded",
},
	)
	Definitions["PlayerInstance"]["color"] = append(Definitions["PlayerInstance"]["color"], Definition{
	Name:  "color",
	Kind:  "property",
	Short: "```lua\ncolor -- string\n```",
	Long:  "```lua\ncolor -- string\n```\nThe player's color. Read only.\n\nmore: https://api.tabletopsimulator.com/player/instance/#color",
},
	)
	Definitions["PlayerInstance"]["host"] = append(Definitions["PlayerInstance"]["host"], Definition{
	Name:  "host",
	Kind:  "property",
	Short: "```lua\nhost -- bool\n```",
	Long:  "```lua\nhost -- bool\n```\nIs the player the host?.\n\nmore: https://api.tabletopsimulator.com/player/instance/#host",
},
	)
	Definitions["PlayerInstance"]["lift_height"] = append(Definitions["PlayerInstance"]["lift_height"], Definition{
	Name:  "lift_height",
	Kind:  "property",
	Short: "```lua\nlift_height -- float\n```",
	Long:  "```lua\nlift_height -- float\n```\nThe player's lift height from 0 to 1.\n\nmore: https://api.tabletopsimulator.com/player/instance/#lift_height",
},
	)
	Definitions["PlayerInstance"]["promoted"] = append(Definitions["PlayerInstance"]["promoted"], Definition{
	Name:  "promoted",
	Kind:  "property",
	Short: "```lua\npromoted -- bool\n```",
	Long:  "```lua\npromoted -- bool\n```\nIs the player currently promoted? Read only.\n\nmore: https://api.tabletopsimulator.com/player/instance/#promoted",
},
	)
	Definitions["PlayerInstance"]["seated"] = append(Definitions["PlayerInstance"]["seated"], Definition{
	Name:  "seated",
	Kind:  "property",
	Short: "```lua\nseated -- float\n```",
	Long:  "```lua\nseated -- float\n```\nIs the player currently seated at the table? Read only.\n\nmore: https://api.tabletopsimulator.com/player/instance/#seated",
},
	)
	Definitions["PlayerInstance"]["steam_id"] = append(Definitions["PlayerInstance"]["steam_id"], Definition{
	Name:  "steam_id",
	Kind:  "property",
	Short: "```lua\nsteam_id -- float\n```",
	Long:  "```lua\nsteam_id -- float\n```\nThe player's Steam ID. Read only.\n\nmore: https://api.tabletopsimulator.com/player/instance/#steam_id",
},
	)
	Definitions["PlayerInstance"]["steam_name"] = append(Definitions["PlayerInstance"]["steam_name"], Definition{
	Name:  "steam_name",
	Kind:  "property",
	Short: "```lua\nsteam_name -- string\n```",
	Long:  "```lua\nsteam_name -- string\n```\nThe player's Steam name. Read only.\n\nmore: https://api.tabletopsimulator.com/player/instance/#steam_name",
},
	)
	Definitions["PlayerInstance"]["team"] = append(Definitions["PlayerInstance"]["team"], Definition{
	Name:  "team",
	Kind:  "property",
	Short: "```lua\nteam -- string\n```",
	Long:  "```lua\nteam -- string\n```\nThe player's team. Team names: \"None\", \"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\". Read only.\n\nmore: https://api.tabletopsimulator.com/player/instance/#team",
},
	)
	Definitions["PlayerInstance"]["attachCameraToObject"] = append(Definitions["PlayerInstance"]["attachCameraToObject"], Definition{
	Name:  "attachCameraToObject",
	Kind:  "function",
	Short: "```lua\nfunction attachCameraToObject(attachment) -- bool\n```",
	Long:  "```lua\nfunction attachCameraToObject(attachment) -- bool\n```\nMakes a player's camera follow an Object.\nattachment: table\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#attachcameratoobject",
},
	)
	Definitions["PlayerInstance"]["broadcast"] = append(Definitions["PlayerInstance"]["broadcast"], Definition{
	Name:  "broadcast",
	Kind:  "function",
	Short: "```lua\nfunction broadcast(message) -- bool\n```",
	Long:  "```lua\nfunction broadcast(message) -- bool\n```\nBroadcasts a message to the player. This also sends a message to the top center of the screen.\nmessage: string\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#broadcast",
},
	)
	Definitions["PlayerInstance"]["broadcast"] = append(Definitions["PlayerInstance"]["broadcast"], Definition{
	Name:  "broadcast",
	Kind:  "function",
	Short: "```lua\nfunction broadcast(message, color) -- bool\n```",
	Long:  "```lua\nfunction broadcast(message, color) -- bool\n```\nBroadcasts a message to the player with Color. This also sends a message to the top center of the screen.\nmessage: string\ncolor: string\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#broadcast",
},
	)
	Definitions["PlayerInstance"]["changeColor"] = append(Definitions["PlayerInstance"]["changeColor"], Definition{
	Name:  "changeColor",
	Kind:  "function",
	Short: "```lua\nfunction changeColor(new_color) -- bool\n```",
	Long:  "```lua\nfunction changeColor(new_color) -- bool\n```\nChanges the player's color.\nnew_color: string\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#changecolor",
},
	)
	Definitions["PlayerInstance"]["clearSelectedObjects"] = append(Definitions["PlayerInstance"]["clearSelectedObjects"], Definition{
	Name:  "clearSelectedObjects",
	Kind:  "function",
	Short: "```lua\nfunction clearSelectedObjects() -- bool\n```",
	Long:  "```lua\nfunction clearSelectedObjects() -- bool\n```\nClears the player's selection.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#clearselectedobjects",
},
	)
	Definitions["PlayerInstance"]["copy"] = append(Definitions["PlayerInstance"]["copy"], Definition{
	Name:  "copy",
	Kind:  "function",
	Short: "```lua\nfunction copy(objects) -- bool\n```",
	Long:  "```lua\nfunction copy(objects) -- bool\n```\nTriggers the player's Copy action for the specified objects\nobjects: table\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#copy",
},
	)
	Definitions["PlayerInstance"]["getHandCount"] = append(Definitions["PlayerInstance"]["getHandCount"], Definition{
	Name:  "getHandCount",
	Kind:  "function",
	Short: "```lua\nfunction getHandCount() -- int\n```",
	Long:  "```lua\nfunction getHandCount() -- int\n```\nReturns the number of hands that exist for this player color.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#gethandcount",
},
	)
	Definitions["PlayerInstance"]["getHandObjects"] = append(Definitions["PlayerInstance"]["getHandObjects"], Definition{
	Name:  "getHandObjects",
	Kind:  "function",
	Short: "```lua\nfunction getHandObjects(index) -- table\n```",
	Long:  "```lua\nfunction getHandObjects(index) -- table\n```\nReturns a list of all the Cards and Mahjong Tiles in the player's hand. Specify index for additional hands.\nindex: int\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#gethandobjects",
},
	)
	Definitions["PlayerInstance"]["getHandTransform"] = append(Definitions["PlayerInstance"]["getHandTransform"], Definition{
	Name:  "getHandTransform",
	Kind:  "function",
	Short: "```lua\nfunction getHandTransform(hand_index) -- table\n```",
	Long:  "```lua\nfunction getHandTransform(hand_index) -- table\n```\nReturns the Transform of the player's hand.\nhand_index: int\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#gethandtransform",
},
	)
	Definitions["PlayerInstance"]["getPointerPosition"] = append(Definitions["PlayerInstance"]["getPointerPosition"], Definition{
	Name:  "getPointerPosition",
	Kind:  "function",
	Short: "```lua\nfunction getPointerPosition() -- Vector\n```",
	Long:  "```lua\nfunction getPointerPosition() -- Vector\n```\nReturns the position of the given player color's pointer.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#getpointerposition",
},
	)
	Definitions["PlayerInstance"]["getPointerRotation"] = append(Definitions["PlayerInstance"]["getPointerRotation"], Definition{
	Name:  "getPointerRotation",
	Kind:  "function",
	Short: "```lua\nfunction getPointerRotation() -- table\n```",
	Long:  "```lua\nfunction getPointerRotation() -- table\n```\nReturns the y-axis rotation of the given player color's pointer in degrees.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#getpointerrotation",
},
	)
	Definitions["PlayerInstance"]["getHoldingObjects"] = append(Definitions["PlayerInstance"]["getHoldingObjects"], Definition{
	Name:  "getHoldingObjects",
	Kind:  "function",
	Short: "```lua\nfunction getHoldingObjects() -- table\n```",
	Long:  "```lua\nfunction getHoldingObjects() -- table\n```\nReturns a Lua table representing a list of all the Objects currently held by the player.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#getholdingobjects",
},
	)
	Definitions["PlayerInstance"]["getHoverObject"] = append(Definitions["PlayerInstance"]["getHoverObject"], Definition{
	Name:  "getHoverObject",
	Kind:  "function",
	Short: "```lua\nfunction getHoverObject() -- table\n```",
	Long:  "```lua\nfunction getHoverObject() -- table\n```\nReturns the object that this player is hovering their pointer over.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#gethoverobject",
},
	)
	Definitions["PlayerInstance"]["getSelectedObjects"] = append(Definitions["PlayerInstance"]["getSelectedObjects"], Definition{
	Name:  "getSelectedObjects",
	Kind:  "function",
	Short: "```lua\nfunction getSelectedObjects() -- table\n```",
	Long:  "```lua\nfunction getSelectedObjects() -- table\n```\nReturns a Lua table representing a list of all the Objects currently selected by the player.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#getpointerrotation",
},
	)
	Definitions["PlayerInstance"]["kick"] = append(Definitions["PlayerInstance"]["kick"], Definition{
	Name:  "kick",
	Kind:  "function",
	Short: "```lua\nfunction kick() -- bool\n```",
	Long:  "```lua\nfunction kick() -- bool\n```\nKicks the player from the game.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#kick",
},
	)
	Definitions["PlayerInstance"]["lookAt"] = append(Definitions["PlayerInstance"]["lookAt"], Definition{
	Name:  "lookAt",
	Kind:  "function",
	Short: "```lua\nfunction lookAt(parameters) -- bool\n```",
	Long:  "```lua\nfunction lookAt(parameters) -- bool\n```\nMoves the Player's camera to look at a specific point.\nparameters: table\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#lookat",
},
	)
	Definitions["PlayerInstance"]["mute"] = append(Definitions["PlayerInstance"]["mute"], Definition{
	Name:  "mute",
	Kind:  "function",
	Short: "```lua\nfunction mute() -- bool\n```",
	Long:  "```lua\nfunction mute() -- bool\n```\nMutes or unmutes the player.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#mute",
},
	)
	Definitions["PlayerInstance"]["paste"] = append(Definitions["PlayerInstance"]["paste"], Definition{
	Name:  "paste",
	Kind:  "function",
	Short: "```lua\nfunction paste(position) -- bool\n```",
	Long:  "```lua\nfunction paste(position) -- bool\n```\nTriggers the player's Paste action at the specified position\nposition: Vector\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#paste",
},
	)
	Definitions["PlayerInstance"]["pingTable"] = append(Definitions["PlayerInstance"]["pingTable"], Definition{
	Name:  "pingTable",
	Kind:  "function",
	Short: "```lua\nfunction pingTable(position) -- bool\n```",
	Long:  "```lua\nfunction pingTable(position) -- bool\n```\nEmulates the player using the ping tool at the given position.\nposition: Vector\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#pingtable",
},
	)
	Definitions["PlayerInstance"]["print"] = append(Definitions["PlayerInstance"]["print"], Definition{
	Name:  "print",
	Kind:  "function",
	Short: "```lua\nfunction print(message) -- bool\n```",
	Long:  "```lua\nfunction print(message) -- bool\n```\nPrints a message to the player.\nmessage: string\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#print",
},
	)
	Definitions["PlayerInstance"]["print"] = append(Definitions["PlayerInstance"]["print"], Definition{
	Name:  "print",
	Kind:  "function",
	Short: "```lua\nfunction print(message, color) -- bool\n```",
	Long:  "```lua\nfunction print(message, color) -- bool\n```\nPrints a message to the player with Color.\nmessage: string\ncolor: string\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#print",
},
	)
	Definitions["PlayerInstance"]["promote"] = append(Definitions["PlayerInstance"]["promote"], Definition{
	Name:  "promote",
	Kind:  "function",
	Short: "```lua\nfunction promote() -- bool\n```",
	Long:  "```lua\nfunction promote() -- bool\n```\nPromotes or demotes the player.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#promote",
},
	)
	Definitions["PlayerInstance"]["setHandTransform"] = append(Definitions["PlayerInstance"]["setHandTransform"], Definition{
	Name:  "setHandTransform",
	Kind:  "function",
	Short: "```lua\nfunction setHandTransform(transform, hand_index) -- bool\n```",
	Long:  "```lua\nfunction setHandTransform(transform, hand_index) -- bool\n```\nSets the Transform of the player's hand.\ntransform: table\nhand_index: int\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#sethandtransform",
},
	)
	Definitions["PlayerInstance"]["setUITheme"] = append(Definitions["PlayerInstance"]["setUITheme"], Definition{
	Name:  "setUITheme",
	Kind:  "function",
	Short: "```lua\nfunction setUITheme(theme) -- bool\n```",
	Long:  "```lua\nfunction setUITheme(theme) -- bool\n```\nSets the player's UI theme (use \"Export\" in theme editor to get string).\ntheme: string\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#setuitheme",
},
	)
	Definitions["PlayerInstance"]["showHotkeyConfig"] = append(Definitions["PlayerInstance"]["showHotkeyConfig"], Definition{
	Name:  "showHotkeyConfig",
	Kind:  "function",
	Short: "```lua\nfunction showHotkeyConfig() -- bool\n```",
	Long:  "```lua\nfunction showHotkeyConfig() -- bool\n```\nDisplays the hotkey assignment UI.\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#showhotkeyconfig",
},
	)
	Definitions["PlayerInstance"]["showInfoDialog"] = append(Definitions["PlayerInstance"]["showInfoDialog"], Definition{
	Name:  "showInfoDialog",
	Kind:  "function",
	Short: "```lua\nfunction showInfoDialog(info) -- bool\n```",
	Long:  "```lua\nfunction showInfoDialog(info) -- bool\n```\nDisplays text to the player.\ninfo: string\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#showinfodialog",
},
	)
	Definitions["PlayerInstance"]["showConfirmDialog"] = append(Definitions["PlayerInstance"]["showConfirmDialog"], Definition{
	Name:  "showConfirmDialog",
	Kind:  "function",
	Short: "```lua\nfunction showConfirmDialog(info, callback_function) -- bool\n```",
	Long:  "```lua\nfunction showConfirmDialog(info, callback_function) -- bool\n```\nDisplays text to the player and executes callback if they click OK.\ninfo: string\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#showconfirmdialog",
},
	)
	Definitions["PlayerInstance"]["showInputDialog"] = append(Definitions["PlayerInstance"]["showInputDialog"], Definition{
	Name:  "showInputDialog",
	Kind:  "function",
	Short: "```lua\nfunction showInputDialog(description, default_value, callback_function) -- bool\n```",
	Long:  "```lua\nfunction showInputDialog(description, default_value, callback_function) -- bool\n```\nShows text input dialog to the player and executes callback if they click OK.\ndescription: string\ndefault_value: string\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#showinputdialog",
},
	)
	Definitions["PlayerInstance"]["showMemoDialog"] = append(Definitions["PlayerInstance"]["showMemoDialog"], Definition{
	Name:  "showMemoDialog",
	Kind:  "function",
	Short: "```lua\nfunction showMemoDialog(description, default_value, callback_function) -- bool\n```",
	Long:  "```lua\nfunction showMemoDialog(description, default_value, callback_function) -- bool\n```\nShows memo input dialog to the player and executes callback if they click OK.\ndescription: string\ndefault_value: string\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#showmemodialog",
},
	)
	Definitions["PlayerInstance"]["showOptionsDialog"] = append(Definitions["PlayerInstance"]["showOptionsDialog"], Definition{
	Name:  "showOptionsDialog",
	Kind:  "function",
	Short: "```lua\nfunction showOptionsDialog(description, options, default_value, callback_function) -- bool\n```",
	Long:  "```lua\nfunction showOptionsDialog(description, options, default_value, callback_function) -- bool\n```\nShows dropdown options dialog to the player and executes callback if they click OK.\ndescription: string\noptions: table\ndefault_value: int\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#showoptionsdialog",
},
	)
	Definitions["PlayerInstance"]["showColorDialog"] = append(Definitions["PlayerInstance"]["showColorDialog"], Definition{
	Name:  "showColorDialog",
	Kind:  "function",
	Short: "```lua\nfunction showColorDialog(default_color, callback_function) -- bool\n```",
	Long:  "```lua\nfunction showColorDialog(default_color, callback_function) -- bool\n```\nShows color input dialog to the player and executes callback if they click OK.\ndefault_color: Color\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/player/instance/#showmemodialog",
},
	)
	Definitions["PlayerManager"]["Action"] = append(Definitions["PlayerManager"]["Action"], Definition{
	Name:  "Action",
	Kind:  "constant",
	Short: "```lua\nAction -- class\n```",
	Long:  "```lua\nAction -- class\n```\nType of Action player is attempting.\n\nmore: https://api.tabletopsimulator.com/events/#onplayeraction-actions",
},
	)
	Definitions["PlayerManager"]["Black"] = append(Definitions["PlayerManager"]["Black"], Definition{
	Name:  "Black",
	Kind:  "constant",
	Short: "```lua\nBlack -- Player\n```",
	Long:  "```lua\nBlack -- Player\n```\nThe Black player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Blue"] = append(Definitions["PlayerManager"]["Blue"], Definition{
	Name:  "Blue",
	Kind:  "constant",
	Short: "```lua\nBlue -- Player\n```",
	Long:  "```lua\nBlue -- Player\n```\nThe Blue player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Brown"] = append(Definitions["PlayerManager"]["Brown"], Definition{
	Name:  "Brown",
	Kind:  "constant",
	Short: "```lua\nBrown -- Player\n```",
	Long:  "```lua\nBrown -- Player\n```\nThe Brown player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Green"] = append(Definitions["PlayerManager"]["Green"], Definition{
	Name:  "Green",
	Kind:  "constant",
	Short: "```lua\nGreen -- Player\n```",
	Long:  "```lua\nGreen -- Player\n```\nThe Green player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Orange"] = append(Definitions["PlayerManager"]["Orange"], Definition{
	Name:  "Orange",
	Kind:  "constant",
	Short: "```lua\nOrange -- Player\n```",
	Long:  "```lua\nOrange -- Player\n```\nThe Orange player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Pink"] = append(Definitions["PlayerManager"]["Pink"], Definition{
	Name:  "Pink",
	Kind:  "constant",
	Short: "```lua\nPink -- Player\n```",
	Long:  "```lua\nPink -- Player\n```\nThe Pink player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Purple"] = append(Definitions["PlayerManager"]["Purple"], Definition{
	Name:  "Purple",
	Kind:  "constant",
	Short: "```lua\nPurple -- Player\n```",
	Long:  "```lua\nPurple -- Player\n```\nThe Purple player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Red"] = append(Definitions["PlayerManager"]["Red"], Definition{
	Name:  "Red",
	Kind:  "constant",
	Short: "```lua\nRed -- Player\n```",
	Long:  "```lua\nRed -- Player\n```\nThe Red player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Teal"] = append(Definitions["PlayerManager"]["Teal"], Definition{
	Name:  "Teal",
	Kind:  "constant",
	Short: "```lua\nTeal -- Player\n```",
	Long:  "```lua\nTeal -- Player\n```\nThe Teal player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["White"] = append(Definitions["PlayerManager"]["White"], Definition{
	Name:  "White",
	Kind:  "constant",
	Short: "```lua\nWhite -- Player\n```",
	Long:  "```lua\nWhite -- Player\n```\nThe White player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["Yellow"] = append(Definitions["PlayerManager"]["Yellow"], Definition{
	Name:  "Yellow",
	Kind:  "constant",
	Short: "```lua\nYellow -- Player\n```",
	Long:  "```lua\nYellow -- Player\n```\nThe Yellow player.\n\nmore: https://api.tabletopsimulator.com/player/instance/",
},
	)
	Definitions["PlayerManager"]["getAvailableColors"] = append(Definitions["PlayerManager"]["getAvailableColors"], Definition{
	Name:  "getAvailableColors",
	Kind:  "function",
	Short: "```lua\nfunction getAvailableColors() -- table\n```",
	Long:  "```lua\nfunction getAvailableColors() -- table\n```\nReturns valid seats colors at current table.\n\n\nmore: https://api.tabletopsimulator.com/player/manager/#getavailablecolors",
},
	)
	Definitions["PlayerManager"]["getColors"] = append(Definitions["PlayerManager"]["getColors"], Definition{
	Name:  "getColors",
	Kind:  "function",
	Short: "```lua\nfunction getColors() -- table\n```",
	Long:  "```lua\nfunction getColors() -- table\n```\nReturns all possible seats colors.\n\n\nmore: https://api.tabletopsimulator.com/player/manager/#getavailablecolors",
},
	)
	Definitions["PlayerManager"]["getPlayers"] = append(Definitions["PlayerManager"]["getPlayers"], Definition{
	Name:  "getPlayers",
	Kind:  "function",
	Short: "```lua\nfunction getPlayers() -- table\n```",
	Long:  "```lua\nfunction getPlayers() -- table\n```\nReturns a table of all Players.\n\n\nmore: https://api.tabletopsimulator.com/player/manager/#getplayers",
},
	)
	Definitions["PlayerManager"]["getSpectators"] = append(Definitions["PlayerManager"]["getSpectators"], Definition{
	Name:  "getSpectators",
	Kind:  "function",
	Short: "```lua\nfunction getSpectators() -- table\n```",
	Long:  "```lua\nfunction getSpectators() -- table\n```\nReturns a table of spectator Players.\n\n\nmore: https://api.tabletopsimulator.com/player/manager/#getspectators",
},
	)
	Definitions["RPGFigurine"]["attack"] = append(Definitions["RPGFigurine"]["attack"], Definition{
	Name:  "attack",
	Kind:  "function",
	Short: "```lua\nfunction attack() -- bool\n```",
	Long:  "```lua\nfunction attack() -- bool\n```\nPlays a random attack animation.\n\n\nmore: https://api.tabletopsimulator.com/behavior/rpgfigurine/#attack",
},
	)
	Definitions["RPGFigurine"]["changeMode"] = append(Definitions["RPGFigurine"]["changeMode"], Definition{
	Name:  "changeMode",
	Kind:  "function",
	Short: "```lua\nfunction changeMode() -- bool\n```",
	Long:  "```lua\nfunction changeMode() -- bool\n```\nChanges the RPG Figurine's current mode.\n\n\nmore: https://api.tabletopsimulator.com/behavior/rpgfigurine/#changemode",
},
	)
	Definitions["RPGFigurine"]["die"] = append(Definitions["RPGFigurine"]["die"], Definition{
	Name:  "die",
	Kind:  "function",
	Short: "```lua\nfunction die() -- bool\n```",
	Long:  "```lua\nfunction die() -- bool\n```\nPlays the death animation. Call die() again to reset the RPG Figurine.\n\n\nmore: https://api.tabletopsimulator.com/behavior/rpgfigurine/#die",
},
	)
	Definitions["RPGFigurine"]["onAttack"] = append(Definitions["RPGFigurine"]["onAttack"], Definition{
	Name:  "onAttack",
	Kind:  "event",
	Short: "```lua\nfunction onAttack(hit_objects) -- void\n```",
	Long:  "```lua\nfunction onAttack(hit_objects) -- void\n```\nThis function is called, if it exists in your script, when this RPGFigurine attacks another RPGFigurine.\nhit_objects: table\n\n\nmore: https://api.tabletopsimulator.com/behavior/rpgfigurine/#onattack",
},
	)
	Definitions["RPGFigurine"]["onHit"] = append(Definitions["RPGFigurine"]["onHit"], Definition{
	Name:  "onHit",
	Kind:  "event",
	Short: "```lua\nfunction onHit(attacker) -- void\n```",
	Long:  "```lua\nfunction onHit(attacker) -- void\n```\nThis function is called, if it exists in your script, when this RPGFigurine is attacked by another RPGFigurine.\nattacker: Object\n\n\nmore: https://api.tabletopsimulator.com/behavior/rpgfigurine/#onhit",
},
	)
	Definitions["Tables"]["getCustomURL"] = append(Definitions["Tables"]["getCustomURL"], Definition{
	Name:  "getCustomURL",
	Kind:  "function",
	Short: "```lua\nfunction getCustomURL() -- string\n```",
	Long:  "```lua\nfunction getCustomURL() -- string\n```\nReturns the image URL of the current Custom Table, or nil if the current table is not a Custom Table.\n\n\nmore: https://api.tabletopsimulator.com/tables/#getcustomurl",
},
	)
	Definitions["Tables"]["getTable"] = append(Definitions["Tables"]["getTable"], Definition{
	Name:  "getTable",
	Kind:  "function",
	Short: "```lua\nfunction getTable() -- string\n```",
	Long:  "```lua\nfunction getTable() -- string\n```\nReturns the current Table's name i.e. equivalent to getTableObject().name.\n\n\nmore: https://api.tabletopsimulator.com/tables/#gettable",
},
	)
	Definitions["Tables"]["getTableObject"] = append(Definitions["Tables"]["getTableObject"], Definition{
	Name:  "getTableObject",
	Kind:  "function",
	Short: "```lua\nfunction getTableObject() -- Object\n```",
	Long:  "```lua\nfunction getTableObject() -- Object\n```\nReturns the current Table object.\n\n\nmore: https://api.tabletopsimulator.com/tables/#gettableobject",
},
	)
	Definitions["Tables"]["setCustomURL"] = append(Definitions["Tables"]["setCustomURL"], Definition{
	Name:  "setCustomURL",
	Kind:  "function",
	Short: "```lua\nfunction setCustomURL(url) -- bool\n```",
	Long:  "```lua\nfunction setCustomURL(url) -- bool\n```\nSets the image URL for the current Custom Table. Has no effect if the current Table is not a Custom Table.\nurl: string\n\n\nmore: https://api.tabletopsimulator.com/tables/#setcustomurl",
},
	)
	Definitions["Tables"]["setTable"] = append(Definitions["Tables"]["setTable"], Definition{
	Name:  "setTable",
	Kind:  "function",
	Short: "```lua\nfunction setTable(name) -- bool\n```",
	Long:  "```lua\nfunction setTable(name) -- bool\n```\nReplaces the current Table with the Table matching the specified name.\nname: string\n\n\nmore: https://api.tabletopsimulator.com/tables/#settable",
},
	)
	Definitions["TextTool"]["getFontColor"] = append(Definitions["TextTool"]["getFontColor"], Definition{
	Name:  "getFontColor",
	Kind:  "function",
	Short: "```lua\nfunction getFontColor() -- Color\n```",
	Long:  "```lua\nfunction getFontColor() -- Color\n```\nReturns the current font color as a Lua table keyed as table[\"r\"], table[\"g\"], and table[\"b\"].\n\n\nmore: https://api.tabletopsimulator.com/behavior/texttool/#getfontcolor",
},
	)
	Definitions["TextTool"]["getFontSize"] = append(Definitions["TextTool"]["getFontSize"], Definition{
	Name:  "getFontSize",
	Kind:  "function",
	Short: "```lua\nfunction getFontSize() -- int\n```",
	Long:  "```lua\nfunction getFontSize() -- int\n```\nReturns the current font size.\n\n\nmore: https://api.tabletopsimulator.com/behavior/texttool/#getfontsize",
},
	)
	Definitions["TextTool"]["getValue"] = append(Definitions["TextTool"]["getValue"], Definition{
	Name:  "getValue",
	Kind:  "function",
	Short: "```lua\nfunction getValue() -- string\n```",
	Long:  "```lua\nfunction getValue() -- string\n```\nReturns the current text.\n\n\nmore: https://api.tabletopsimulator.com/behavior/texttool/#getvalue",
},
	)
	Definitions["TextTool"]["setFontColor"] = append(Definitions["TextTool"]["setFontColor"], Definition{
	Name:  "setFontColor",
	Kind:  "function",
	Short: "```lua\nfunction setFontColor(color) -- bool\n```",
	Long:  "```lua\nfunction setFontColor(color) -- bool\n```\nSets the current font color. The Lua table parameter should be keyed as table[\"r\"], table[\"g\"], and table[\"b\"].\ncolor: Color\n\n\nmore: https://api.tabletopsimulator.com/behavior/texttool/#setfontcolor",
},
	)
	Definitions["TextTool"]["setFontSize"] = append(Definitions["TextTool"]["setFontSize"], Definition{
	Name:  "setFontSize",
	Kind:  "function",
	Short: "```lua\nfunction setFontSize(font_size) -- bool\n```",
	Long:  "```lua\nfunction setFontSize(font_size) -- bool\n```\nSets the current font size.\nfont_size: int\n\n\nmore: https://api.tabletopsimulator.com/behavior/texttool/#setfontsize",
},
	)
	Definitions["TextTool"]["setValue"] = append(Definitions["TextTool"]["setValue"], Definition{
	Name:  "setValue",
	Kind:  "function",
	Short: "```lua\nfunction setValue(text) -- bool\n```",
	Long:  "```lua\nfunction setValue(text) -- bool\n```\nSets the current text.\ntext: string\n\n\nmore: https://api.tabletopsimulator.com/behavior/texttool/#setvalue",
},
	)
	Definitions["Time"]["time"] = append(Definitions["Time"]["time"], Definition{
	Name:  "time",
	Kind:  "property",
	Short: "```lua\ntime -- float\n```",
	Long:  "```lua\ntime -- float\n```\nThe current game time in seconds.\n\nmore: https://api.tabletopsimulator.com/time/#time",
},
	)
	Definitions["Time"]["delta_time"] = append(Definitions["Time"]["delta_time"], Definition{
	Name:  "delta_time",
	Kind:  "property",
	Short: "```lua\ndelta_time -- float\n```",
	Long:  "```lua\ndelta_time -- float\n```\nTime in seconds since the last frame.\n\nmore: https://api.tabletopsimulator.com/time/#deltatime",
},
	)
	Definitions["Time"]["fixed_time"] = append(Definitions["Time"]["fixed_time"], Definition{
	Name:  "fixed_time",
	Kind:  "property",
	Short: "```lua\nfixed_time -- float\n```",
	Long:  "```lua\nfixed_time -- float\n```\nThe game time of the last fixedUpdate.\n\nmore: https://api.tabletopsimulator.com/time/#fixedtime",
},
	)
	Definitions["Time"]["fixed_delta_time"] = append(Definitions["Time"]["fixed_delta_time"], Definition{
	Name:  "fixed_delta_time",
	Kind:  "property",
	Short: "```lua\nfixed_delta_time -- float\n```",
	Long:  "```lua\nfixed_delta_time -- float\n```\nDuration of fixed update in seconds.\n\nmore: https://api.tabletopsimulator.com/time/#fixeddeltatime",
},
	)
	Definitions["Time"]["frame_count"] = append(Definitions["Time"]["frame_count"], Definition{
	Name:  "frame_count",
	Kind:  "property",
	Short: "```lua\nframe_count -- int\n```",
	Long:  "```lua\nframe_count -- int\n```\nTotal number of frames since the scene began.\n\nmore: https://api.tabletopsimulator.com/time/#framecount",
},
	)
	Definitions["Turns"]["enable"] = append(Definitions["Turns"]["enable"], Definition{
	Name:  "enable",
	Kind:  "property",
	Short: "```lua\nenable -- bool\n```",
	Long:  "```lua\nenable -- bool\n```\nEnable/disable the turns system.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["type"] = append(Definitions["Turns"]["type"], Definition{
	Name:  "type",
	Kind:  "property",
	Short: "```lua\ntype -- int\n```",
	Long:  "```lua\ntype -- int\n```\nIf the turn order is automatic or custom. 1=auto, 2=custom.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["order"] = append(Definitions["Turns"]["order"], Definition{
	Name:  "order",
	Kind:  "property",
	Short: "```lua\norder -- table\n```",
	Long:  "```lua\norder -- table\n```\nA table of strings, representing the player turn order.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["reverse_order"] = append(Definitions["Turns"]["reverse_order"], Definition{
	Name:  "reverse_order",
	Kind:  "property",
	Short: "```lua\nreverse_order -- bool\n```",
	Long:  "```lua\nreverse_order -- bool\n```\nEnable/disable reversing turn rotation direction.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["skip_empty_hands"] = append(Definitions["Turns"]["skip_empty_hands"], Definition{
	Name:  "skip_empty_hands",
	Kind:  "property",
	Short: "```lua\nskip_empty_hands -- bool\n```",
	Long:  "```lua\nskip_empty_hands -- bool\n```\nEnable/disable skipping empty hands.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["disable_interactations"] = append(Definitions["Turns"]["disable_interactations"], Definition{
	Name:  "disable_interactations",
	Kind:  "property",
	Short: "```lua\ndisable_interactations -- bool\n```",
	Long:  "```lua\ndisable_interactations -- bool\n```\nEnable/disable the blocking of players ability to interact with Objects when it is not their turn.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["pass_turns"] = append(Definitions["Turns"]["pass_turns"], Definition{
	Name:  "pass_turns",
	Kind:  "property",
	Short: "```lua\npass_turns -- bool\n```",
	Long:  "```lua\npass_turns -- bool\n```\nEnable/disable a player's ability to pass their turn to another.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["turn_color"] = append(Definitions["Turns"]["turn_color"], Definition{
	Name:  "turn_color",
	Kind:  "property",
	Short: "```lua\nturn_color -- string\n```",
	Long:  "```lua\nturn_color -- string\n```\nThe color of the Player who's turn it is.\n\nmore: https://api.tabletopsimulator.com/turns/#member-variables",
},
	)
	Definitions["Turns"]["getNextTurnColor"] = append(Definitions["Turns"]["getNextTurnColor"], Definition{
	Name:  "getNextTurnColor",
	Kind:  "function",
	Short: "```lua\nfunction getNextTurnColor() -- string\n```",
	Long:  "```lua\nfunction getNextTurnColor() -- string\n```\nReturns the Player Color string of the next player in the turn order.\n\n\nmore: https://api.tabletopsimulator.com/turns/#functions",
},
	)
	Definitions["Turns"]["getPreviousTurnColor"] = append(Definitions["Turns"]["getPreviousTurnColor"], Definition{
	Name:  "getPreviousTurnColor",
	Kind:  "function",
	Short: "```lua\nfunction getPreviousTurnColor() -- string\n```",
	Long:  "```lua\nfunction getPreviousTurnColor() -- string\n```\nReturns the Player Color string of the previous player in the turn order.\n\n\nmore: https://api.tabletopsimulator.com/turns/#functions",
},
	)
	Definitions["UI"]["loading"] = append(Definitions["UI"]["loading"], Definition{
	Name:  "loading",
	Kind:  "property",
	Short: "```lua\nloading -- bool\n```",
	Long:  "```lua\nloading -- bool\n```\nIs true if the UI is still loading on this object.\n\nmore: https://api.tabletopsimulator.com/ui/#member-variables",
},
	)
	Definitions["UI"]["getAttribute"] = append(Definitions["UI"]["getAttribute"], Definition{
	Name:  "getAttribute",
	Kind:  "function",
	Short: "```lua\nfunction getAttribute(id, attribute) -- any\n```",
	Long:  "```lua\nfunction getAttribute(id, attribute) -- any\n```\nObtains the value of a specified attribute of a UI element. Returns typically a string or number.\nid: string\nattribute: string\n\n\nmore: https://api.tabletopsimulator.com/ui/#getattribute",
},
	)
	Definitions["UI"]["getAttributes"] = append(Definitions["UI"]["getAttributes"], Definition{
	Name:  "getAttributes",
	Kind:  "function",
	Short: "```lua\nfunction getAttributes(id) -- table\n```",
	Long:  "```lua\nfunction getAttributes(id) -- table\n```\nReturns the attributes and their values of a UI element that have been set by the user.\nid: string\n\n\nmore: https://api.tabletopsimulator.com/ui/#getattributes",
},
	)
	Definitions["UI"]["getValue"] = append(Definitions["UI"]["getValue"], Definition{
	Name:  "getValue",
	Kind:  "function",
	Short: "```lua\nfunction getValue(id) -- bool\n```",
	Long:  "```lua\nfunction getValue(id) -- bool\n```\nGets the value of a UI element.\nid: string\n\n\nmore: https://api.tabletopsimulator.com/ui/#getvalue",
},
	)
	Definitions["UI"]["hide"] = append(Definitions["UI"]["hide"], Definition{
	Name:  "hide",
	Kind:  "function",
	Short: "```lua\nfunction hide(id) -- bool\n```",
	Long:  "```lua\nfunction hide(id) -- bool\n```\nHides the given UI element.\nid: string\n\n\nmore: https://api.tabletopsimulator.com/ui/#hide",
},
	)
	Definitions["UI"]["setAttribute"] = append(Definitions["UI"]["setAttribute"], Definition{
	Name:  "setAttribute",
	Kind:  "function",
	Short: "```lua\nfunction setAttribute(id, attribute, value) -- bool\n```",
	Long:  "```lua\nfunction setAttribute(id, attribute, value) -- bool\n```\nSets the value of a specified attribute of a UI element.\nid: string\nattribute: string\nvalue: any\n\n\nmore: https://api.tabletopsimulator.com/ui/#setattribute",
},
	)
	Definitions["UI"]["setAttributes"] = append(Definitions["UI"]["setAttributes"], Definition{
	Name:  "setAttributes",
	Kind:  "function",
	Short: "```lua\nfunction setAttributes(id, data) -- bool\n```",
	Long:  "```lua\nfunction setAttributes(id, data) -- bool\n```\nUpdates the value of the supplied attributes of a UI element.\nid: string\ndata: table\n\n\nmore: https://api.tabletopsimulator.com/ui/#setattributes",
},
	)
	Definitions["UI"]["setValue"] = append(Definitions["UI"]["setValue"], Definition{
	Name:  "setValue",
	Kind:  "function",
	Short: "```lua\nfunction setValue(id, value) -- bool\n```",
	Long:  "```lua\nfunction setValue(id, value) -- bool\n```\nUpdates the value of a UI element.\nid: string\nvalue: string\n\n\nmore: https://api.tabletopsimulator.com/ui/#setvalue",
},
	)
	Definitions["UI"]["show"] = append(Definitions["UI"]["show"], Definition{
	Name:  "show",
	Kind:  "function",
	Short: "```lua\nfunction show(id) -- bool\n```",
	Long:  "```lua\nfunction show(id) -- bool\n```\nShows the given UI element.\nid: string\n\n\nmore: https://api.tabletopsimulator.com/ui/#show",
},
	)
	Definitions["UI"]["setXml"] = append(Definitions["UI"]["setXml"], Definition{
	Name:  "setXml",
	Kind:  "function",
	Short: "```lua\nfunction setXml(xml, assets) -- bool\n```",
	Long:  "```lua\nfunction setXml(xml, assets) -- bool\n```\nReplaces the run-time UI with the XML string.\nxml: string\nassets: table\n\n\nmore: https://api.tabletopsimulator.com/ui/#setxml",
},
	)
	Definitions["UI"]["setXmlTable"] = append(Definitions["UI"]["setXmlTable"], Definition{
	Name:  "setXmlTable",
	Kind:  "function",
	Short: "```lua\nfunction setXmlTable(xmltable, assets) -- bool\n```",
	Long:  "```lua\nfunction setXmlTable(xmltable, assets) -- bool\n```\nReplaces the run-time UI with an XML string which is generated from a table of data.\nxmltable: table\nassets: table\n\n\nmore: https://api.tabletopsimulator.com/ui/#setxmltable",
},
	)
	Definitions["UI"]["setCustomAssets"] = append(Definitions["UI"]["setCustomAssets"], Definition{
	Name:  "setCustomAssets",
	Kind:  "function",
	Short: "```lua\nfunction setCustomAssets(assets) -- bool\n```",
	Long:  "```lua\nfunction setCustomAssets(assets) -- bool\n```\nSets the UI ASSETS (like custom images) for global or an Object.\nassets: table\n\n\nmore: https://api.tabletopsimulator.com/ui/#setcustomassets",
},
	)
	Definitions["UI"]["getXml"] = append(Definitions["UI"]["getXml"], Definition{
	Name:  "getXml",
	Kind:  "function",
	Short: "```lua\nfunction getXml() -- string\n```",
	Long:  "```lua\nfunction getXml() -- string\n```\nReturns the run-time UI's XML in string format.\n\n\nmore: https://api.tabletopsimulator.com/ui/#getxml",
},
	)
	Definitions["UI"]["getXmlTable"] = append(Definitions["UI"]["getXmlTable"], Definition{
	Name:  "getXmlTable",
	Kind:  "function",
	Short: "```lua\nfunction getXmlTable() -- table\n```",
	Long:  "```lua\nfunction getXmlTable() -- table\n```\nReturns the run-time UI's XML formatted as a Lua table.\n\n\nmore: https://api.tabletopsimulator.com/ui/#getxmltable",
},
	)
	Definitions["UI"]["getCustomAssets"] = append(Definitions["UI"]["getCustomAssets"], Definition{
	Name:  "getCustomAssets",
	Kind:  "function",
	Short: "```lua\nfunction getCustomAssets() -- table\n```",
	Long:  "```lua\nfunction getCustomAssets() -- table\n```\nReturns information on all custom assets uploaded to the UI ASSETS pane.\n\n\nmore: https://api.tabletopsimulator.com/ui/#getcustomassets",
},
	)
	Definitions["Vector"]["new"] = append(Definitions["Vector"]["new"], Definition{
	Name:  "new",
	Kind:  "function",
	Short: "```lua\nfunction new(x, y, z) -- Vector\n```",
	Long:  "```lua\nfunction new(x, y, z) -- Vector\n```\nReturns a new Vector.\nx: float\ny: float\nz: float\n\n\nmore: https://api.tabletopsimulator.com/vector/#new",
},
	)
	Definitions["Vector"]["max"] = append(Definitions["Vector"]["max"], Definition{
	Name:  "max",
	Kind:  "function",
	Short: "```lua\nfunction max(v1, v2) -- Vector\n```",
	Long:  "```lua\nfunction max(v1, v2) -- Vector\n```\nReturns a new Vector with the max component of each parameter.\nv1: Vector\nv2: Vector\n\n\nmore: https://api.tabletopsimulator.com/vector/#max",
},
	)
	Definitions["Vector"]["min"] = append(Definitions["Vector"]["min"], Definition{
	Name:  "min",
	Kind:  "function",
	Short: "```lua\nfunction min(v1, v2) -- Vector\n```",
	Long:  "```lua\nfunction min(v1, v2) -- Vector\n```\nReturns a new Vector with the min component of each parameter.\nv1: Vector\nv2: Vector\n\n\nmore: https://api.tabletopsimulator.com/vector/#min",
},
	)
	Definitions["Vector"]["between"] = append(Definitions["Vector"]["between"], Definition{
	Name:  "between",
	Kind:  "function",
	Short: "```lua\nfunction between(v1, v2) -- Vector\n```",
	Long:  "```lua\nfunction between(v1, v2) -- Vector\n```\nReturns a new Vector pointing from v1 to v2.\nv1: Vector\nv2: Vector\n\n\nmore: https://api.tabletopsimulator.com/vector/#between",
},
	)
	Definitions["Wait"]["condition"] = append(Definitions["Wait"]["condition"], Definition{
	Name:  "condition",
	Kind:  "function",
	Short: "```lua\nfunction condition(func, condition, timeout, timeout_func) -- int\n```",
	Long:  "```lua\nfunction condition(func, condition, timeout, timeout_func) -- int\n```\nActivates a function when a given function returns true or activates a different function if a timeout occurs.\nfunc: function\ncondition: function\ntimeout: float\ntimeout_func: function\n\n\nmore: https://api.tabletopsimulator.com/base/#condition",
},
	)
	Definitions["Wait"]["frames"] = append(Definitions["Wait"]["frames"], Definition{
	Name:  "frames",
	Kind:  "function",
	Short: "```lua\nfunction frames(func, frame_count) -- int\n```",
	Long:  "```lua\nfunction frames(func, frame_count) -- int\n```\nActivates a function after a set number of frames.\nfunc: function\nframe_count: int\n\n\nmore: https://api.tabletopsimulator.com/base/#frames",
},
	)
	Definitions["Wait"]["stop"] = append(Definitions["Wait"]["stop"], Definition{
	Name:  "stop",
	Kind:  "function",
	Short: "```lua\nfunction stop(id) -- bool\n```",
	Long:  "```lua\nfunction stop(id) -- bool\n```\nStops a currently running Wait function.\nid: int\n\n\nmore: https://api.tabletopsimulator.com/base/#stop",
},
	)
	Definitions["Wait"]["time"] = append(Definitions["Wait"]["time"], Definition{
	Name:  "time",
	Kind:  "function",
	Short: "```lua\nfunction time(func, time, repetitions) -- int\n```",
	Long:  "```lua\nfunction time(func, time, repetitions) -- int\n```\nActivates a function after a set amount of time has passed, repeats given amount of times.\nfunc: function\ntime: float\nrepetitions: int\n\n\nmore: https://api.tabletopsimulator.com/base/#time",
},
	)
	Definitions["WebRequest"]["custom"] = append(Definitions["WebRequest"]["custom"], Definition{
	Name:  "custom",
	Kind:  "function",
	Short: "```lua\nfunction custom(url, method, download, data, headers, callback_function) -- WebRequest\n```",
	Long:  "```lua\nfunction custom(url, method, download, data, headers, callback_function) -- WebRequest\n```\nPerforms a HTTP request using the specified method, data and headers.\nurl: string\nmethod: string\ndownload: bool\ndata: string\nheaders: table\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/webrequest/manager/#custom",
},
	)
	Definitions["WebRequest"]["delete"] = append(Definitions["WebRequest"]["delete"], Definition{
	Name:  "delete",
	Kind:  "function",
	Short: "```lua\nfunction delete(url, callback_function) -- WebRequest\n```",
	Long:  "```lua\nfunction delete(url, callback_function) -- WebRequest\n```\nPerforms a HTTP DELETE request.\nurl: string\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/webrequest/manager/#delete",
},
	)
	Definitions["WebRequest"]["get"] = append(Definitions["WebRequest"]["get"], Definition{
	Name:  "get",
	Kind:  "function",
	Short: "```lua\nfunction get(url, callback_function) -- WebRequest\n```",
	Long:  "```lua\nfunction get(url, callback_function) -- WebRequest\n```\nGet data in text from the url. Callback function is supplied the WebRequest.\nurl: string\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/webrequest/manager/#get",
},
	)
	Definitions["WebRequest"]["head"] = append(Definitions["WebRequest"]["head"], Definition{
	Name:  "head",
	Kind:  "function",
	Short: "```lua\nfunction head(url, callback_function) -- WebRequest\n```",
	Long:  "```lua\nfunction head(url, callback_function) -- WebRequest\n```\nPerforms a HTTP HEAD request.\nurl: string\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/webrequest/manager/#head",
},
	)
	Definitions["WebRequest"]["post"] = append(Definitions["WebRequest"]["post"], Definition{
	Name:  "post",
	Kind:  "function",
	Short: "```lua\nfunction post(url, form, callback_function) -- WebRequest\n```",
	Long:  "```lua\nfunction post(url, form, callback_function) -- WebRequest\n```\nPost the form to the url. Callback function is supplied the WebRequest.\nurl: string\nform: table\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/webrequest/manager/#post",
},
	)
	Definitions["WebRequest"]["put"] = append(Definitions["WebRequest"]["put"], Definition{
	Name:  "put",
	Kind:  "function",
	Short: "```lua\nfunction put(url, data, callback_function) -- WebRequest\n```",
	Long:  "```lua\nfunction put(url, data, callback_function) -- WebRequest\n```\nPut the data to the url. Callback function is supplied the WebRequest.\nurl: string\ndata: string\ncallback_function: function\n\n\nmore: https://api.tabletopsimulator.com/webrequest/manager/#put",
},
	)
	Definitions["Zone"]["getOptions"] = append(Definitions["Zone"]["getOptions"], Definition{
	Name:  "getOptions",
	Kind:  "function",
	Short: "```lua\nfunction getOptions() -- table\n```",
	Long:  "```lua\nfunction getOptions() -- table\n```\nReturns the LayoutZone options.\n\n\nmore: https://api.tabletopsimulator.com/behavior/layoutzone/#getoptions",
},
	)
	Definitions["Zone"]["layout"] = append(Definitions["Zone"]["layout"], Definition{
	Name:  "layout",
	Kind:  "function",
	Short: "```lua\nfunction layout() -- bool\n```",
	Long:  "```lua\nfunction layout() -- bool\n```\nLays out the zone.\n\n\nmore: https://api.tabletopsimulator.com/behavior/layoutzone/#layout",
},
	)
	Definitions["Zone"]["setOptions"] = append(Definitions["Zone"]["setOptions"], Definition{
	Name:  "setOptions",
	Kind:  "function",
	Short: "```lua\nfunction setOptions(options) -- table\n```",
	Long:  "```lua\nfunction setOptions(options) -- table\n```\nSets the LayoutZone options.\noptions: table\n\n\nmore: https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions",
},
	)
	Definitions["bit32"]["arshift"] = append(Definitions["bit32"]["arshift"], Definition{
	Name:  "arshift",
	Kind:  "function",
	Short: "```lua\nfunction arshift(x, disp) -- int\n```",
	Long:  "```lua\nfunction arshift(x, disp) -- int\n```\nReturns the number x shifted disp bits to the right.\nx: int\ndisp: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.arshift",
},
	)
	Definitions["bit32"]["band"] = append(Definitions["bit32"]["band"], Definition{
	Name:  "band",
	Kind:  "function",
	Short: "```lua\nfunction band(...) -- int\n```",
	Long:  "```lua\nfunction band(...) -- int\n```\nReturns the bitwise and of its operands.\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.band",
},
	)
	Definitions["bit32"]["bnot"] = append(Definitions["bit32"]["bnot"], Definition{
	Name:  "bnot",
	Kind:  "function",
	Short: "```lua\nfunction bnot(x) -- int\n```",
	Long:  "```lua\nfunction bnot(x) -- int\n```\nReturns the bitwise not of x.\nx: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.bnot",
},
	)
	Definitions["bit32"]["bor"] = append(Definitions["bit32"]["bor"], Definition{
	Name:  "bor",
	Kind:  "function",
	Short: "```lua\nfunction bor(...) -- int\n```",
	Long:  "```lua\nfunction bor(...) -- int\n```\nReturns the bitwise or of its operands.\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.bor",
},
	)
	Definitions["bit32"]["btest"] = append(Definitions["bit32"]["btest"], Definition{
	Name:  "btest",
	Kind:  "function",
	Short: "```lua\nfunction btest(...) -- bool\n```",
	Long:  "```lua\nfunction btest(...) -- bool\n```\nReturns a bool signaling whether the bitwise and of its operands is different from zero.\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.btest",
},
	)
	Definitions["bit32"]["bxor"] = append(Definitions["bit32"]["bxor"], Definition{
	Name:  "bxor",
	Kind:  "function",
	Short: "```lua\nfunction bxor(...) -- int\n```",
	Long:  "```lua\nfunction bxor(...) -- int\n```\nReturns the bitwise xor of its operands.\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.bxor",
},
	)
	Definitions["bit32"]["extract"] = append(Definitions["bit32"]["extract"], Definition{
	Name:  "extract",
	Kind:  "function",
	Short: "```lua\nfunction extract(n, field, width) -- int\n```",
	Long:  "```lua\nfunction extract(n, field, width) -- int\n```\nReturns the unsigned number formed by the bits field to field + width - 1 from n.\nn: int\nfield: int\nwidth: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.extract",
},
	)
	Definitions["bit32"]["lrotate"] = append(Definitions["bit32"]["lrotate"], Definition{
	Name:  "lrotate",
	Kind:  "function",
	Short: "```lua\nfunction lrotate(x, disp) -- int\n```",
	Long:  "```lua\nfunction lrotate(x, disp) -- int\n```\nReturns the number x rotated disp bits to the left.\nx: int\ndisp: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.lrotate",
},
	)
	Definitions["bit32"]["lshift"] = append(Definitions["bit32"]["lshift"], Definition{
	Name:  "lshift",
	Kind:  "function",
	Short: "```lua\nfunction lshift(x, disp) -- int\n```",
	Long:  "```lua\nfunction lshift(x, disp) -- int\n```\nReturns the number x shifted disp bits to the left.\nx: int\ndisp: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.lshift",
},
	)
	Definitions["bit32"]["replace"] = append(Definitions["bit32"]["replace"], Definition{
	Name:  "replace",
	Kind:  "function",
	Short: "```lua\nfunction replace(n, v, field, width) -- int\n```",
	Long:  "```lua\nfunction replace(n, v, field, width) -- int\n```\nReturns a copy of n with the bits field to field + width - 1 replaced by the value v.\nn: int\nv: int\nfield: int\nwidth: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.replace",
},
	)
	Definitions["bit32"]["rrotate"] = append(Definitions["bit32"]["rrotate"], Definition{
	Name:  "rrotate",
	Kind:  "function",
	Short: "```lua\nfunction rrotate(x, disp) -- int\n```",
	Long:  "```lua\nfunction rrotate(x, disp) -- int\n```\nReturns the number x rotated disp bits to the right.\nx: int\ndisp: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.rrotate",
},
	)
	Definitions["bit32"]["rshift"] = append(Definitions["bit32"]["rshift"], Definition{
	Name:  "rshift",
	Kind:  "function",
	Short: "```lua\nfunction rshift(x, disp) -- int\n```",
	Long:  "```lua\nfunction rshift(x, disp) -- int\n```\nReturns the number x shifted disp bits to the right.\nx: int\ndisp: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-bit32.rshift",
},
	)
	Definitions["coroutine"]["create"] = append(Definitions["coroutine"]["create"], Definition{
	Name:  "create",
	Kind:  "function",
	Short: "```lua\nfunction create(f) -- thread\n```",
	Long:  "```lua\nfunction create(f) -- thread\n```\nCreates a new coroutine, with body f.\nf: function\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.create",
},
	)
	Definitions["coroutine"]["resume"] = append(Definitions["coroutine"]["resume"], Definition{
	Name:  "resume",
	Kind:  "function",
	Short: "```lua\nfunction resume(co) -- table\n```",
	Long:  "```lua\nfunction resume(co) -- table\n```\nStarts or continues the execution of coroutine co.\nco: coroutine\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.resume",
},
	)
	Definitions["coroutine"]["running"] = append(Definitions["coroutine"]["running"], Definition{
	Name:  "running",
	Kind:  "function",
	Short: "```lua\nfunction running() -- table\n```",
	Long:  "```lua\nfunction running() -- table\n```\nReturns the running coroutine plus a bool, true when the running coroutine is the main one.\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.running",
},
	)
	Definitions["coroutine"]["status"] = append(Definitions["coroutine"]["status"], Definition{
	Name:  "status",
	Kind:  "function",
	Short: "```lua\nfunction status(co) -- string\n```",
	Long:  "```lua\nfunction status(co) -- string\n```\nReturns the status of coroutine co, as a string.\nco: coroutine\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.status",
},
	)
	Definitions["coroutine"]["wrap"] = append(Definitions["coroutine"]["wrap"], Definition{
	Name:  "wrap",
	Kind:  "function",
	Short: "```lua\nfunction wrap(f) -- table\n```",
	Long:  "```lua\nfunction wrap(f) -- table\n```\nCreates a new coroutine, with body f.\nf: function\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.wrap",
},
	)
	Definitions["coroutine"]["yield"] = append(Definitions["coroutine"]["yield"], Definition{
	Name:  "yield",
	Kind:  "function",
	Short: "```lua\nfunction yield(value) -- void\n```",
	Long:  "```lua\nfunction yield(value) -- void\n```\nSuspends the execution of the calling coroutine.\nvalue: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.yield",
},
	)
	Definitions["dynamic"]["eval"] = append(Definitions["dynamic"]["eval"], Definition{
	Name:  "eval",
	Kind:  "function",
	Short: "```lua\nfunction eval(s) -- any\n```",
	Long:  "```lua\nfunction eval(s) -- any\n```\nReturns the evaluation of s.\ns: string\n\n\nmore: http://www.moonsharp.org/additions.html",
},
	)
	Definitions["dynamic"]["prepare"] = append(Definitions["dynamic"]["prepare"], Definition{
	Name:  "prepare",
	Kind:  "function",
	Short: "```lua\nfunction prepare(s) -- any\n```",
	Long:  "```lua\nfunction prepare(s) -- any\n```\nReturns a prepared expression object which can be passed to dynamic.eval for faster execution.\ns: string\n\n\nmore: http://www.moonsharp.org/additions.html",
},
	)
	Definitions["math"]["huge"] = append(Definitions["math"]["huge"], Definition{
	Name:  "huge",
	Kind:  "constant",
	Short: "```lua\nhuge -- float\n```",
	Long:  "```lua\nhuge -- float\n```\nThe value HUGE_VAL, a value larger than or equal to any other numerical value.\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.huge",
},
	)
	Definitions["math"]["pi"] = append(Definitions["math"]["pi"], Definition{
	Name:  "pi",
	Kind:  "constant",
	Short: "```lua\npi -- float\n```",
	Long:  "```lua\npi -- float\n```\nThe value of p.\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.pi",
},
	)
	Definitions["math"]["abs"] = append(Definitions["math"]["abs"], Definition{
	Name:  "abs",
	Kind:  "function",
	Short: "```lua\nfunction abs(x) -- float\n```",
	Long:  "```lua\nfunction abs(x) -- float\n```\nReturns the absolute value of x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.abs",
},
	)
	Definitions["math"]["acos"] = append(Definitions["math"]["acos"], Definition{
	Name:  "acos",
	Kind:  "function",
	Short: "```lua\nfunction acos(x) -- float\n```",
	Long:  "```lua\nfunction acos(x) -- float\n```\nReturns the arc cosine of x (in radians).\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.acos",
},
	)
	Definitions["math"]["asin"] = append(Definitions["math"]["asin"], Definition{
	Name:  "asin",
	Kind:  "function",
	Short: "```lua\nfunction asin(x) -- float\n```",
	Long:  "```lua\nfunction asin(x) -- float\n```\nReturns the arc sine of x (in radians).\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.asin",
},
	)
	Definitions["math"]["atan"] = append(Definitions["math"]["atan"], Definition{
	Name:  "atan",
	Kind:  "function",
	Short: "```lua\nfunction atan(x) -- float\n```",
	Long:  "```lua\nfunction atan(x) -- float\n```\nReturns the arc tangent of x (in radians).\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.atan",
},
	)
	Definitions["math"]["atan2"] = append(Definitions["math"]["atan2"], Definition{
	Name:  "atan2",
	Kind:  "function",
	Short: "```lua\nfunction atan2(y, x) -- float\n```",
	Long:  "```lua\nfunction atan2(y, x) -- float\n```\nReturns the arc tangent of y/x (in radians), but uses the signs of both parameters to find the quadrant of the result.\ny: float\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.atan2",
},
	)
	Definitions["math"]["ceil"] = append(Definitions["math"]["ceil"], Definition{
	Name:  "ceil",
	Kind:  "function",
	Short: "```lua\nfunction ceil(x) -- int\n```",
	Long:  "```lua\nfunction ceil(x) -- int\n```\nReturns the smallest integer larger than or equal to x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.ceil",
},
	)
	Definitions["math"]["cos"] = append(Definitions["math"]["cos"], Definition{
	Name:  "cos",
	Kind:  "function",
	Short: "```lua\nfunction cos(x) -- float\n```",
	Long:  "```lua\nfunction cos(x) -- float\n```\nReturns the cosine of x (assumed to be in radians).\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.cos",
},
	)
	Definitions["math"]["cosh"] = append(Definitions["math"]["cosh"], Definition{
	Name:  "cosh",
	Kind:  "function",
	Short: "```lua\nfunction cosh(x) -- float\n```",
	Long:  "```lua\nfunction cosh(x) -- float\n```\nReturns the hyperbolic cosine of x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.cosh",
},
	)
	Definitions["math"]["deg"] = append(Definitions["math"]["deg"], Definition{
	Name:  "deg",
	Kind:  "function",
	Short: "```lua\nfunction deg(x) -- float\n```",
	Long:  "```lua\nfunction deg(x) -- float\n```\nReturns the angle x (given in radians) in degrees.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.deg",
},
	)
	Definitions["math"]["exp"] = append(Definitions["math"]["exp"], Definition{
	Name:  "exp",
	Kind:  "function",
	Short: "```lua\nfunction exp(x) -- float\n```",
	Long:  "```lua\nfunction exp(x) -- float\n```\nReturns the value e^x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.exp",
},
	)
	Definitions["math"]["floor"] = append(Definitions["math"]["floor"], Definition{
	Name:  "floor",
	Kind:  "function",
	Short: "```lua\nfunction floor(x) -- int\n```",
	Long:  "```lua\nfunction floor(x) -- int\n```\nReturns the largest integer smaller than or equal to x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.floor",
},
	)
	Definitions["math"]["fmod"] = append(Definitions["math"]["fmod"], Definition{
	Name:  "fmod",
	Kind:  "function",
	Short: "```lua\nfunction fmod(x, y) -- float\n```",
	Long:  "```lua\nfunction fmod(x, y) -- float\n```\nReturns the remainder of the division of x by y that rounds the quotient towards zero.\nx: float\ny: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.fmod",
},
	)
	Definitions["math"]["frexp"] = append(Definitions["math"]["frexp"], Definition{
	Name:  "frexp",
	Kind:  "function",
	Short: "```lua\nfunction frexp(x) -- table\n```",
	Long:  "```lua\nfunction frexp(x) -- table\n```\nReturns m and e such that x = m2^e, e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero).\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.frexp",
},
	)
	Definitions["math"]["ldexp"] = append(Definitions["math"]["ldexp"], Definition{
	Name:  "ldexp",
	Kind:  "function",
	Short: "```lua\nfunction ldexp(m, e) -- float\n```",
	Long:  "```lua\nfunction ldexp(m, e) -- float\n```\nReturns m2^e (e should be an integer).\nm: float\ne: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.ldexp",
},
	)
	Definitions["math"]["log"] = append(Definitions["math"]["log"], Definition{
	Name:  "log",
	Kind:  "function",
	Short: "```lua\nfunction log(x) -- float\n```",
	Long:  "```lua\nfunction log(x) -- float\n```\nReturns the logarithm of x in the given base.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.log",
},
	)
	Definitions["math"]["max"] = append(Definitions["math"]["max"], Definition{
	Name:  "max",
	Kind:  "function",
	Short: "```lua\nfunction max(x, ...) -- float\n```",
	Long:  "```lua\nfunction max(x, ...) -- float\n```\nReturns the maximum value among its arguments.\nx: float\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.max",
},
	)
	Definitions["math"]["min"] = append(Definitions["math"]["min"], Definition{
	Name:  "min",
	Kind:  "function",
	Short: "```lua\nfunction min(x, ...) -- float\n```",
	Long:  "```lua\nfunction min(x, ...) -- float\n```\nReturns the minimum value among its arguments.\nx: float\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.min",
},
	)
	Definitions["math"]["modf"] = append(Definitions["math"]["modf"], Definition{
	Name:  "modf",
	Kind:  "function",
	Short: "```lua\nfunction modf(x) -- table\n```",
	Long:  "```lua\nfunction modf(x) -- table\n```\nReturns two numbers, the integral part of x and the fractional part of x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.modf",
},
	)
	Definitions["math"]["pow"] = append(Definitions["math"]["pow"], Definition{
	Name:  "pow",
	Kind:  "function",
	Short: "```lua\nfunction pow(x, y) -- float\n```",
	Long:  "```lua\nfunction pow(x, y) -- float\n```\nReturns x^y. (You can also use the expression x^y to compute this value.)\nx: float\ny: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.pow",
},
	)
	Definitions["math"]["rad"] = append(Definitions["math"]["rad"], Definition{
	Name:  "rad",
	Kind:  "function",
	Short: "```lua\nfunction rad(x) -- float\n```",
	Long:  "```lua\nfunction rad(x) -- float\n```\nReturns the angle x (given in degrees) in radians.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.rad",
},
	)
	Definitions["math"]["random"] = append(Definitions["math"]["random"], Definition{
	Name:  "random",
	Kind:  "function",
	Short: "```lua\nfunction random() -- float\n```",
	Long:  "```lua\nfunction random() -- float\n```\nThis function is an interface to the simple pseudo-random generator function rand provided by Standard C.\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.random",
},
	)
	Definitions["math"]["randomseed"] = append(Definitions["math"]["randomseed"], Definition{
	Name:  "randomseed",
	Kind:  "function",
	Short: "```lua\nfunction randomseed(x) -- void\n```",
	Long:  "```lua\nfunction randomseed(x) -- void\n```\nSets x as the \"seed\" for the pseudo-random generator: equal seeds produce equal sequences of numbers.\nx: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.randomseed",
},
	)
	Definitions["math"]["sin"] = append(Definitions["math"]["sin"], Definition{
	Name:  "sin",
	Kind:  "function",
	Short: "```lua\nfunction sin(x) -- float\n```",
	Long:  "```lua\nfunction sin(x) -- float\n```\nReturns the sine of x (assumed to be in radians).\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.sin",
},
	)
	Definitions["math"]["sinh"] = append(Definitions["math"]["sinh"], Definition{
	Name:  "sinh",
	Kind:  "function",
	Short: "```lua\nfunction sinh(x) -- float\n```",
	Long:  "```lua\nfunction sinh(x) -- float\n```\nReturns the hyperbolic sine of x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.sinh",
},
	)
	Definitions["math"]["sqrt"] = append(Definitions["math"]["sqrt"], Definition{
	Name:  "sqrt",
	Kind:  "function",
	Short: "```lua\nfunction sqrt(x) -- float\n```",
	Long:  "```lua\nfunction sqrt(x) -- float\n```\nReturns the square root of x. (You can also use the expression x^0.5 to compute this value.)\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.sqrt",
},
	)
	Definitions["math"]["tan"] = append(Definitions["math"]["tan"], Definition{
	Name:  "tan",
	Kind:  "function",
	Short: "```lua\nfunction tan(x) -- float\n```",
	Long:  "```lua\nfunction tan(x) -- float\n```\nReturns the tangent of x (assumed to be in radians).\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.tan",
},
	)
	Definitions["math"]["tanh"] = append(Definitions["math"]["tanh"], Definition{
	Name:  "tanh",
	Kind:  "function",
	Short: "```lua\nfunction tanh(x) -- float\n```",
	Long:  "```lua\nfunction tanh(x) -- float\n```\nReturns the hyperbolic tangent of x.\nx: float\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-math.tanh",
},
	)
	Definitions["os"]["clock"] = append(Definitions["os"]["clock"], Definition{
	Name:  "clock",
	Kind:  "function",
	Short: "```lua\nfunction clock() -- int\n```",
	Long:  "```lua\nfunction clock() -- int\n```\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-os.clock",
},
	)
	Definitions["os"]["date"] = append(Definitions["os"]["date"], Definition{
	Name:  "date",
	Kind:  "function",
	Short: "```lua\nfunction date() -- table\n```",
	Long:  "```lua\nfunction date() -- table\n```\nReturns a string or a table containing date and time.\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-os.date",
},
	)
	Definitions["os"]["difftime"] = append(Definitions["os"]["difftime"], Definition{
	Name:  "difftime",
	Kind:  "function",
	Short: "```lua\nfunction difftime(t2, t1) -- int\n```",
	Long:  "```lua\nfunction difftime(t2, t1) -- int\n```\nReturns the number of seconds from time t1 to time t2.\nt2: time\nt1: time\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-os.difftime",
},
	)
	Definitions["os"]["time"] = append(Definitions["os"]["time"], Definition{
	Name:  "time",
	Kind:  "function",
	Short: "```lua\nfunction time() -- table\n```",
	Long:  "```lua\nfunction time() -- table\n```\nReturns the current time when called without arguments, or a time representing the date and time specified by the given table.\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-os.time",
},
	)
	Definitions["string"]["byte"] = append(Definitions["string"]["byte"], Definition{
	Name:  "byte",
	Kind:  "function",
	Short: "```lua\nfunction byte(s, i, j) -- int\n```",
	Long:  "```lua\nfunction byte(s, i, j) -- int\n```\nReturns the internal numerical codes of the characters s[i], s[i+1], ..., s[j].\ns: string\ni: int\nj: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.byte",
},
	)
	Definitions["string"]["char"] = append(Definitions["string"]["char"], Definition{
	Name:  "char",
	Kind:  "function",
	Short: "```lua\nfunction char(c) -- string\n```",
	Long:  "```lua\nfunction char(c) -- string\n```\nReturns a string comprised of the integer char codes converted to chars and concatenated.\nc: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.char",
},
	)
	Definitions["string"]["dump"] = append(Definitions["string"]["dump"], Definition{
	Name:  "dump",
	Kind:  "function",
	Short: "```lua\nfunction dump(f) -- string\n```",
	Long:  "```lua\nfunction dump(f) -- string\n```\nReturns a string containing a binary representation of the given function.\nf: function\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.dump",
},
	)
	Definitions["string"]["find"] = append(Definitions["string"]["find"], Definition{
	Name:  "find",
	Kind:  "function",
	Short: "```lua\nfunction find(s, pattern, init, plain) -- int\n```",
	Long:  "```lua\nfunction find(s, pattern, init, plain) -- int\n```\nReturns the start and end indices of pattern in string, or nil.\ns: string\npattern: string\ninit: int\nplain: bool\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.find",
},
	)
	Definitions["string"]["format"] = append(Definitions["string"]["format"], Definition{
	Name:  "format",
	Kind:  "function",
	Short: "```lua\nfunction format(formatstring, ...) -- string\n```",
	Long:  "```lua\nfunction format(formatstring, ...) -- string\n```\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\nformatstring: string\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.format",
},
	)
	Definitions["string"]["gmatch"] = append(Definitions["string"]["gmatch"], Definition{
	Name:  "gmatch",
	Kind:  "function",
	Short: "```lua\nfunction gmatch(s, pattern) -- function\n```",
	Long:  "```lua\nfunction gmatch(s, pattern) -- function\n```\nReturns an iterator function that returns the next captures from pattern over the string s.\ns: string\npattern: string\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.gmatch",
},
	)
	Definitions["string"]["gsub"] = append(Definitions["string"]["gsub"], Definition{
	Name:  "gsub",
	Kind:  "function",
	Short: "```lua\nfunction gsub(s, pattern, repl, n) -- string\n```",
	Long:  "```lua\nfunction gsub(s, pattern, repl, n) -- string\n```\nReturns a string from pattern matched to s replaced with repl for n occurences.\ns: string\npattern: string\nrepl: string\nn: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.gsub",
},
	)
	Definitions["string"]["len"] = append(Definitions["string"]["len"], Definition{
	Name:  "len",
	Kind:  "function",
	Short: "```lua\nfunction len(s) -- int\n```",
	Long:  "```lua\nfunction len(s) -- int\n```\nReturns the length of the string.\ns: string\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.len",
},
	)
	Definitions["string"]["lower"] = append(Definitions["string"]["lower"], Definition{
	Name:  "lower",
	Kind:  "function",
	Short: "```lua\nfunction lower(s) -- string\n```",
	Long:  "```lua\nfunction lower(s) -- string\n```\nReturns the string converted to lower case.\ns: string\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.lower",
},
	)
	Definitions["string"]["match"] = append(Definitions["string"]["match"], Definition{
	Name:  "match",
	Kind:  "function",
	Short: "```lua\nfunction match(s, pattern, init) -- captures\n```",
	Long:  "```lua\nfunction match(s, pattern, init) -- captures\n```\nReturns the captures from pattern matched to s.\ns: string\npattern: string\ninit: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.match",
},
	)
	Definitions["string"]["rep"] = append(Definitions["string"]["rep"], Definition{
	Name:  "rep",
	Kind:  "function",
	Short: "```lua\nfunction rep(s, n, sep) -- captures\n```",
	Long:  "```lua\nfunction rep(s, n, sep) -- captures\n```\nReturns a string that is the concatenation of n copies of the string s separated by the string sep.\ns: string\nn: int\nsep: string\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.rep",
},
	)
	Definitions["string"]["reverse"] = append(Definitions["string"]["reverse"], Definition{
	Name:  "reverse",
	Kind:  "function",
	Short: "```lua\nfunction reverse(s) -- string\n```",
	Long:  "```lua\nfunction reverse(s) -- string\n```\nReturns the reverse of string.\ns: string\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.reverse",
},
	)
	Definitions["string"]["sub"] = append(Definitions["string"]["sub"], Definition{
	Name:  "sub",
	Kind:  "function",
	Short: "```lua\nfunction sub(s, i, j) -- string\n```",
	Long:  "```lua\nfunction sub(s, i, j) -- string\n```\nReturns the substring of s that starts at i and continues until j.\ns: string\ni: int\nj: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.sub",
},
	)
	Definitions["string"]["unicode"] = append(Definitions["string"]["unicode"], Definition{
	Name:  "unicode",
	Kind:  "function",
	Short: "```lua\nfunction unicode(s, i, j) -- int\n```",
	Long:  "```lua\nfunction unicode(s, i, j) -- int\n```\nReturns the unicode numerical codes of the characters s[i], s[i+1], ..., s[j].\ns: string\ni: int\nj: int\n\n\nmore: http://www.moonsharp.org/additions.html",
},
	)
	Definitions["string"]["upper"] = append(Definitions["string"]["upper"], Definition{
	Name:  "upper",
	Kind:  "function",
	Short: "```lua\nfunction upper(s) -- string\n```",
	Long:  "```lua\nfunction upper(s) -- string\n```\nReturns the string converted to upper case.\ns: string\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-string.upper",
},
	)
	Definitions["table"]["concat"] = append(Definitions["table"]["concat"], Definition{
	Name:  "concat",
	Kind:  "function",
	Short: "```lua\nfunction concat(list, sep, i, j) -- string\n```",
	Long:  "```lua\nfunction concat(list, sep, i, j) -- string\n```\nReturns a string of items i to j in list joined by sep.\nlist: table\nsep: string\ni: int\nj: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-table.concat",
},
	)
	Definitions["table"]["insert"] = append(Definitions["table"]["insert"], Definition{
	Name:  "insert",
	Kind:  "function",
	Short: "```lua\nfunction insert(list, pos, value) -- any\n```",
	Long:  "```lua\nfunction insert(list, pos, value) -- any\n```\nInserts element value at position pos in list.\nlist: table\npos: int\nvalue: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-table.insert",
},
	)
	Definitions["table"]["pack"] = append(Definitions["table"]["pack"], Definition{
	Name:  "pack",
	Kind:  "function",
	Short: "```lua\nfunction pack(...) -- table\n```",
	Long:  "```lua\nfunction pack(...) -- table\n```\nReturns a new table with all parameters stored into keys 1, 2, etc. and with a field \"n\" with the total number of parameters.\n...: any\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-table.pack",
},
	)
	Definitions["table"]["remove"] = append(Definitions["table"]["remove"], Definition{
	Name:  "remove",
	Kind:  "function",
	Short: "```lua\nfunction remove(list, pos) -- any\n```",
	Long:  "```lua\nfunction remove(list, pos) -- any\n```\nRemoves (and returns) item pos from list.\nlist: table\npos: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-table.remove",
},
	)
	Definitions["table"]["sort"] = append(Definitions["table"]["sort"], Definition{
	Name:  "sort",
	Kind:  "function",
	Short: "```lua\nfunction sort(list, comp) -- bool\n```",
	Long:  "```lua\nfunction sort(list, comp) -- bool\n```\nSorts list in place. Uses compare function comp if specified.\nlist: table\ncomp: function\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-table.sort",
},
	)
	Definitions["table"]["unpack"] = append(Definitions["table"]["unpack"], Definition{
	Name:  "unpack",
	Kind:  "function",
	Short: "```lua\nfunction unpack(list, i, j) -- string\n```",
	Long:  "```lua\nfunction unpack(list, i, j) -- string\n```\nReturns elemeents i to j from list.\nlist: table\ni: int\nj: int\n\n\nmore: https://www.lua.org/manual/5.2/manual.html#pdf-table.unpack",
},
	)
}

var Definitions = map[string]map[string][]Definition{
	"": {},
	"Action": {},
	"AssetBundle": {},
	"Backgrounds": {},
	"Book": {},
	"Browser": {},
	"Clock": {},
	"Color": {},
	"Component": {},
	"Container": {},
	"Counter": {},
	"GameObject": {},
	"Global": {},
	"GlobalEvents": {},
	"Grid": {},
	"Hands": {},
	"Info": {},
	"JSON": {},
	"LayoutZone": {},
	"Lighting": {},
	"Material": {},
	"MusicPlayer": {},
	"Notes": {},
	"Object": {},
	"ObjectEvents": {},
	"Physics": {},
	"PlayerInstance": {},
	"PlayerManager": {},
	"RPGFigurine": {},
	"Tables": {},
	"TextTool": {},
	"Time": {},
	"Turns": {},
	"UI": {},
	"Vector": {},
	"Wait": {},
	"WebRequest": {},
	"Zone": {},
	"bit32": {},
	"coroutine": {},
	"dynamic": {},
	"math": {},
	"os": {},
	"string": {},
	"table": {},
}
